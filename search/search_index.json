{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BioMCP: AI-Powered Biomedical Research","text":"<p>Transform how you search and analyze biomedical data with BioMCP - a powerful tool that connects AI assistants and researchers to critical biomedical databases through natural language.</p>"},{"location":"#built-and-maintained-by","title":"Built and Maintained by","text":"NEW       Remote BioMCP Now Available!      <p>Connect to BioMCP instantly through Claude - no installation required!</p> \ud83d\ude80 Instant Access Start using BioMCP in under 2 minutes \u2601\ufe0f Cloud-Powered Always up-to-date with latest features \ud83d\udd12 Secure Auth Google OAuth authentication \ud83d\udee0\ufe0f 23+ Tools Full suite of biomedical research tools        Connect to Remote BioMCP Now"},{"location":"#what-can-you-do-with-biomcp","title":"What Can You Do with BioMCP?","text":""},{"location":"#search-research-literature","title":"Search Research Literature","text":"<p>Find articles about genes, variants, diseases, and drugs with automatic cancer genomics data from cBioPortal</p> <pre><code>biomcp article search --gene BRAF --disease melanoma\n</code></pre>"},{"location":"#discover-clinical-trials","title":"Discover Clinical Trials","text":"<p>Search active trials by condition, location, phase, and eligibility criteria including genetic biomarkers</p> <pre><code>biomcp trial search --condition \"lung cancer\" --status RECRUITING\n</code></pre>"},{"location":"#analyze-genetic-variants","title":"Analyze Genetic Variants","text":"<p>Query variant databases, predict effects, and understand clinical significance</p> <pre><code>biomcp variant search --gene TP53 --significance pathogenic\n</code></pre>"},{"location":"#ai-powered-analysis","title":"AI-Powered Analysis","text":"<p>Use with Claude Desktop for conversational biomedical research with sequential thinking</p> <pre><code># Claude automatically uses BioMCP tools\n\"What BRAF mutations are found in melanoma?\"\n</code></pre>"},{"location":"#5-minute-quick-start","title":"5-Minute Quick Start","text":""},{"location":"#choose-your-interface","title":"Choose Your Interface","text":"Claude Desktop (Recommended)Command LinePython SDK <p>Best for: Conversational research, complex queries, AI-assisted analysis</p> <ol> <li> <p>Install Claude Desktop from claude.ai/desktop</p> </li> <li> <p>Configure BioMCP:    <code>json    {      \"mcpServers\": {        \"biomcp\": {          \"command\": \"uv\",          \"args\": [     \"run\", \"--with\", \"biomcp-python\",     \"biomcp\", \"run\"   ]        }      }    }</code></p> </li> <li> <p>Start researching: Ask Claude about any biomedical topic!</p> </li> </ol> <p>Full Claude Desktop Guide \u2192</p> <p>Best for: Direct queries, scripting, automation</p> <ol> <li> <p>Install BioMCP:    <pre><code># Using uv (recommended)\nuv tool install biomcp\n\n# Or using pip\npip install biomcp-python\n</code></pre></p> </li> <li> <p>Run your first search:    <pre><code>biomcp article search \\\n  --gene BRAF --disease melanoma \\\n  --limit 5\n</code></pre></p> </li> </ol> <p>CLI Reference \u2192</p> <p>Best for: Integration, custom applications, bulk operations</p> <ol> <li> <p>Install the package:    <pre><code>pip install biomcp-python\n</code></pre></p> </li> <li> <p>Use in your code:    <pre><code>from biomcp import BioMCPClient\n\nasync with BioMCPClient() as client:\n    articles = await client.articles.search(\n        genes=[\"BRAF\"],\n        diseases=[\"melanoma\"]\n    )\n</code></pre></p> </li> </ol> <p>Python SDK Docs \u2192</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#unified-search-across-databases","title":"Unified Search Across Databases","text":"<ul> <li>PubMed/PubTator3: 30M+ research articles with entity recognition</li> <li>ClinicalTrials.gov: 400K+ clinical trials worldwide</li> <li>MyVariant.info: Comprehensive variant annotations</li> <li>cBioPortal: Automatic cancer genomics integration</li> </ul>"},{"location":"#intelligent-query-processing","title":"Intelligent Query Processing","text":"<ul> <li>Natural language to structured queries</li> <li>Automatic synonym expansion</li> <li>OR logic support for flexible matching</li> <li>Cross-domain relationship discovery</li> </ul>"},{"location":"#built-for-ai-integration","title":"Built for AI Integration","text":"<ul> <li>24 specialized MCP tools</li> <li>Sequential thinking for complex analysis</li> <li>Streaming responses for real-time updates</li> <li>Context preservation across queries</li> </ul> <p>Explore All Features \u2192</p>"},{"location":"#learn-by-example","title":"Learn by Example","text":""},{"location":"#find-articles-about-a-specific-mutation","title":"Find Articles About a Specific Mutation","text":"<pre><code># Search for BRAF V600E mutations\nbiomcp article search --gene BRAF \\\n  --keyword \"V600E|p.V600E|c.1799T&gt;A\"\n</code></pre>"},{"location":"#discover-trials-near-you","title":"Discover Trials Near You","text":"<pre><code># Find cancer trials in Boston area\nbiomcp trial search --condition cancer \\\n  --latitude 42.3601 --longitude -71.0589 \\\n  --distance 50\n</code></pre>"},{"location":"#get-gene-information","title":"Get Gene Information","text":"<pre><code># Get comprehensive gene data\nbiomcp gene get TP53\n</code></pre> <p>More Examples \u2192</p>"},{"location":"#popular-workflows","title":"Popular Workflows","text":""},{"location":"#literature-review","title":"Literature Review","text":"<p>Systematic search across papers, preprints, and clinical trials Workflow Guide \u2192</p>"},{"location":"#variant-interpretation","title":"Variant Interpretation","text":"<p>From variant ID to clinical significance and treatment implications Workflow Guide \u2192</p>"},{"location":"#trial-matching","title":"Trial Matching","text":"<p>Find eligible trials based on patient criteria and biomarkers Workflow Guide \u2192</p>"},{"location":"#drug-research","title":"Drug Research","text":"<p>Connect drugs to targets, trials, and research literature Workflow Guide \u2192</p>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>NCI Integration: Enhanced cancer trial search with biomarker filtering</li> <li>AlphaGenome: Predict variant effects on gene regulation</li> <li>BigQuery Logging: Monitor usage and performance</li> <li>HTTP Server Mode: Deploy as a service</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started - Installation and first steps</li> <li>User Guides - Detailed usage instructions</li> <li>API Reference - Technical documentation</li> <li>FAQ - Quick answers to common questions</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>GitHub: github.com/genomoncology/biomcp</li> <li>Issues: Report bugs or request features</li> <li>Discussions: Ask questions and share tips</li> </ul>"},{"location":"#license","title":"License","text":"<p>BioMCP is licensed under the MIT License. See LICENSE for details.</p>"},{"location":"FDA_SECURITY/","title":"FDA Integration Security Documentation","text":""},{"location":"FDA_SECURITY/#overview","title":"Overview","text":"<p>This document outlines the security measures implemented in the BioMCP FDA integration to ensure safe handling of medical data and protection against common vulnerabilities.</p>"},{"location":"FDA_SECURITY/#security-features","title":"Security Features","text":""},{"location":"FDA_SECURITY/#1-input-validation-sanitization","title":"1. Input Validation &amp; Sanitization","text":"<p>All user inputs are validated and sanitized before being sent to the FDA API:</p> <ul> <li>Injection Prevention: Removes characters that could be used for SQL injection, XSS, or command injection (<code>&lt;&gt;\\\"';&amp;|\\\\</code>)</li> <li>Length Limits: Enforces maximum lengths on all input fields</li> <li>Type Validation: Ensures parameters match expected types (dates, numbers, etc.)</li> <li>Format Validation: Validates specific formats (e.g., YYYY-MM-DD for dates)</li> </ul> <p>Implementation: <code>src/biomcp/openfda/input_validation.py</code></p> <pre><code># Example usage\nfrom biomcp.openfda.input_validation import sanitize_input, validate_drug_name\n\nsafe_drug = validate_drug_name(\"Aspirin&lt;script&gt;\")  # Returns \"Aspirin\"\nsafe_input = sanitize_input(\"'; DROP TABLE;\")  # SQL injection blocked\n</code></pre>"},{"location":"FDA_SECURITY/#2-api-key-protection","title":"2. API Key Protection","text":"<p>API keys are protected at multiple levels:</p> <ul> <li>Cache Key Exclusion: API keys are removed before generating cache keys</li> <li>No Logging: API keys are never logged, even in debug mode</li> <li>Environment Variables: Keys stored in environment variables, not in code</li> <li>Validation: API key format is validated before use</li> </ul> <p>Implementation: <code>src/biomcp/openfda/cache.py</code>, <code>src/biomcp/openfda/utils.py</code></p>"},{"location":"FDA_SECURITY/#3-rate-limiting","title":"3. Rate Limiting","text":"<p>Client-side rate limiting prevents API quota exhaustion:</p> <ul> <li>Token Bucket Algorithm: Allows bursts while maintaining average rate</li> <li>Configurable Limits: 40 requests/minute without key, 240 with key</li> <li>Concurrent Request Limiting: Maximum 10 concurrent requests via semaphore</li> <li>Automatic Backoff: Delays requests when approaching limits</li> </ul> <p>Implementation: <code>src/biomcp/openfda/rate_limiter.py</code></p>"},{"location":"FDA_SECURITY/#4-circuit-breaker-pattern","title":"4. Circuit Breaker Pattern","text":"<p>Prevents cascading failures when FDA API is unavailable:</p> <ul> <li>Failure Threshold: Opens after 5 consecutive failures</li> <li>Recovery Timeout: Waits 60 seconds before retry attempts</li> <li>Half-Open State: Tests recovery with limited requests</li> <li>Automatic Recovery: Returns to normal operation when API recovers</li> </ul> <p>States:</p> <ul> <li>CLOSED: Normal operation</li> <li>OPEN: Blocking all requests (API is down)</li> <li>HALF_OPEN: Testing if API has recovered</li> </ul>"},{"location":"FDA_SECURITY/#5-memory-protection","title":"5. Memory Protection","text":"<p>Prevents memory exhaustion from large responses:</p> <ul> <li>Response Size Limits: Maximum 1MB per cached response</li> <li>Cache Size Limits: Maximum 100 entries in cache</li> <li>FIFO Eviction: Oldest entries removed when cache is full</li> <li>Size Validation: Large responses rejected before caching</li> </ul> <p>Configuration:</p> <pre><code>export BIOMCP_FDA_MAX_RESPONSE_SIZE=1048576  # 1MB\nexport BIOMCP_FDA_MAX_CACHE_SIZE=100\n</code></pre>"},{"location":"FDA_SECURITY/#6-file-operation-security","title":"6. File Operation Security","text":"<p>Secure handling of cache files:</p> <ul> <li>File Locking: Uses <code>fcntl</code> for exclusive/shared locks</li> <li>Atomic Operations: Writes to temp files then renames</li> <li>Race Condition Prevention: Locks prevent concurrent modifications</li> <li>Permission Control: Files created without world-write permissions</li> </ul> <p>Implementation: <code>src/biomcp/openfda/drug_shortages.py</code></p>"},{"location":"FDA_SECURITY/#security-best-practices","title":"Security Best Practices","text":""},{"location":"FDA_SECURITY/#for-developers","title":"For Developers","text":"<ol> <li>Never Log Sensitive Data</li> </ol> <pre><code># BAD\nlogger.debug(f\"API key: {api_key}\")\n\n# GOOD\nlogger.debug(\"API key configured\" if api_key else \"No API key\")\n</code></pre> <ol> <li>Always Validate Input</li> </ol> <pre><code>from biomcp.openfda.input_validation import validate_drug_name\n\n# Always validate before using\nsafe_drug = validate_drug_name(user_input)\nif safe_drug:\n    # Use safe_drug, not user_input\n    await search_adverse_events(drug=safe_drug)\n</code></pre> <ol> <li>Use Rate Limiting</li> </ol> <pre><code>from biomcp.openfda.rate_limiter import rate_limited_request\n\n# Wrap API calls with rate limiting\nresult = await rate_limited_request(make_api_call, params)\n</code></pre>"},{"location":"FDA_SECURITY/#for-system-administrators","title":"For System Administrators","text":"<ol> <li> <p>API Key Management</p> </li> <li> <p>Store API keys in environment variables</p> </li> <li>Rotate keys regularly (recommended: every 90 days)</li> <li>Use different keys for dev/staging/production</li> <li> <p>Monitor key usage for anomalies</p> </li> <li> <p>Monitoring</p> </li> <li> <p>Set up alerts for circuit breaker state changes</p> </li> <li>Monitor rate limit consumption</li> <li>Track cache hit/miss ratios</li> <li> <p>Log validation failures (potential attacks)</p> </li> <li> <p>Resource Limits <pre><code># Configure limits based on your environment\nexport BIOMCP_FDA_CACHE_TTL=15  # Minutes\nexport BIOMCP_FDA_MAX_CACHE_SIZE=100\nexport BIOMCP_FDA_MAX_RESPONSE_SIZE=1048576  # 1MB\n</code></pre></p> </li> </ol>"},{"location":"FDA_SECURITY/#threat-model","title":"Threat Model","text":""},{"location":"FDA_SECURITY/#threats-addressed","title":"Threats Addressed","text":"Threat Mitigation Implementation SQL Injection Input sanitization <code>input_validation.py</code> XSS Attacks HTML/JS character removal <code>sanitize_input()</code> Command Injection Shell metacharacter removal <code>sanitize_input()</code> API Key Exposure Exclusion from logs/cache <code>cache.py</code>, <code>utils.py</code> DoS via Rate Limits Client-side rate limiting <code>rate_limiter.py</code> Cascading Failures Circuit breaker pattern <code>CircuitBreaker</code> class Memory Exhaustion Response size limits <code>MAX_RESPONSE_SIZE</code> Race Conditions File locking <code>fcntl</code> usage Cache Poisoning Input validation <code>build_safe_query()</code>"},{"location":"FDA_SECURITY/#residual-risks","title":"Residual Risks","text":"<ol> <li> <p>API Key Compromise: If environment is compromised, keys are accessible</p> </li> <li> <p>Mitigation: Use secret management systems in production</p> </li> <li> <p>Zero-Day FDA API Vulnerabilities: Unknown vulnerabilities in FDA API</p> </li> <li> <p>Mitigation: Monitor FDA security advisories</p> </li> <li> <p>Distributed DoS: Multiple clients could still overwhelm FDA API</p> </li> <li>Mitigation: Implement global rate limiting at gateway level</li> </ol>"},{"location":"FDA_SECURITY/#compliance-considerations","title":"Compliance Considerations","text":""},{"location":"FDA_SECURITY/#hipaa-if-applicable","title":"HIPAA (If Applicable)","text":"<p>While FDA's public APIs don't contain PHI, if extended to include patient data:</p> <ol> <li>Encryption: Use TLS for all API communications</li> <li>Audit Logging: Log all data access (but not the data itself)</li> <li>Access Controls: Implement user authentication/authorization</li> <li>Data Retention: Define and enforce retention policies</li> </ol>"},{"location":"FDA_SECURITY/#fda-data-usage","title":"FDA Data Usage","text":"<ol> <li>Attribution: Always include FDA disclaimers in responses</li> <li>Data Currency: Warn users that data may not be real-time</li> <li>Medical Decisions: Explicitly state data is not for clinical decisions</li> <li>Rate Limits: Respect FDA's terms of service</li> </ol>"},{"location":"FDA_SECURITY/#security-testing","title":"Security Testing","text":""},{"location":"FDA_SECURITY/#automated-tests","title":"Automated Tests","text":"<p>Run security tests with:</p> <pre><code>pytest tests/tdd/openfda/test_security.py -v\n</code></pre> <p>Tests cover:</p> <ul> <li>Input validation</li> <li>Cache key security</li> <li>Rate limiting</li> <li>Circuit breaker</li> <li>File operations</li> </ul>"},{"location":"FDA_SECURITY/#manual-security-review","title":"Manual Security Review","text":"<p>Checklist for security review:</p> <ul> <li>[ ] No sensitive data in logs</li> <li>[ ] All inputs validated</li> <li>[ ] Rate limiting functional</li> <li>[ ] Circuit breaker triggers correctly</li> <li>[ ] Cache size limited</li> <li>[ ] File operations are atomic</li> <li>[ ] API keys not in cache keys</li> <li>[ ] Error messages don't leak information</li> </ul>"},{"location":"FDA_SECURITY/#incident-response","title":"Incident Response","text":""},{"location":"FDA_SECURITY/#if-api-key-is-compromised","title":"If API Key is Compromised","text":"<ol> <li>Immediate: Revoke compromised key at FDA portal</li> <li>Generate: Create new API key</li> <li>Update: Update environment variables</li> <li>Restart: Restart services to load new key</li> <li>Audit: Review logs for unauthorized usage</li> </ol>"},{"location":"FDA_SECURITY/#if-rate-limits-exceeded","title":"If Rate Limits Exceeded","text":"<ol> <li>Check: Verify circuit breaker state</li> <li>Wait: Allow circuit breaker recovery timeout</li> <li>Reduce: Lower request rate if needed</li> <li>Monitor: Check for abnormal usage patterns</li> </ol>"},{"location":"FDA_SECURITY/#if-security-vulnerability-found","title":"If Security Vulnerability Found","text":"<ol> <li>Assess: Determine severity and exploitability</li> <li>Patch: Develop and test fix</li> <li>Deploy: Roll out fix with monitoring</li> <li>Document: Update this security documentation</li> <li>Notify: Inform users if data was at risk</li> </ol>"},{"location":"FDA_SECURITY/#configuration-reference","title":"Configuration Reference","text":""},{"location":"FDA_SECURITY/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OPENFDA_API_KEY</code> None FDA API key for higher rate limits <code>BIOMCP_FDA_CACHE_TTL</code> 15 Cache TTL in minutes <code>BIOMCP_FDA_MAX_CACHE_SIZE</code> 100 Maximum cache entries <code>BIOMCP_FDA_MAX_RESPONSE_SIZE</code> 1048576 Maximum response size in bytes <code>BIOMCP_SHORTAGE_CACHE_TTL</code> 24 Drug shortage cache TTL in hours"},{"location":"FDA_SECURITY/#security-headers","title":"Security Headers","text":"<p>When deploying as a web service, add these headers:</p> <pre><code>headers = {\n    \"X-Content-Type-Options\": \"nosniff\",\n    \"X-Frame-Options\": \"DENY\",\n    \"X-XSS-Protection\": \"1; mode=block\",\n    \"Strict-Transport-Security\": \"max-age=31536000; includeSubDomains\",\n    \"Content-Security-Policy\": \"default-src 'self'\"\n}\n</code></pre>"},{"location":"FDA_SECURITY/#contact","title":"Contact","text":"<p>For security issues, contact: security@biomcp.org (create this address)</p> <p>For FDA API issues, see: https://open.fda.gov/apis/</p> <p>Last Updated: 2025-08-07 Version: 1.0</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the BioMCP project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#062-2025-08-05","title":"0.6.2 - 2025-08-05","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>NCI Clinical Trials Search API Integration - Enhanced cancer trial search capabilities:</li> <li>Dual source support for trial search/getter tools (ClinicalTrials.gov + NCI)</li> <li>NCI API key handling via <code>NCI_API_KEY</code> environment variable or parameter</li> <li>Advanced trial filters: biomarkers, prior therapy, brain metastases acceptance</li> <li>6 New MCP Tools for NCI-specific searches:<ul> <li><code>nci_organization_searcher</code> / <code>nci_organization_getter</code>: Cancer centers, hospitals, research institutions</li> <li><code>nci_intervention_searcher</code> / <code>nci_intervention_getter</code>: Drugs, devices, procedures, biologicals</li> <li><code>nci_biomarker_searcher</code>: Trial eligibility biomarkers (reference genes, branches)</li> <li><code>nci_disease_searcher</code>: NCI's controlled vocabulary of cancer conditions</li> </ul> </li> <li>OR Query Support: All NCI endpoints support OR queries (e.g., \"PD-L1 OR CD274\")</li> <li>Real-time access to NCI's curated cancer trials database</li> <li>Automatic cBioPortal integration for gene searches</li> <li>Proper NCI parameter mapping (org_city, org_state_or_province, etc.)</li> <li>Comprehensive error handling for Elasticsearch limits</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Enhanced unified search router to properly handle NCI domains</li> <li>Trial search/getter tools now accept <code>source</code> parameter (\"clinicaltrials\" or \"nci\")</li> <li>Improved domain-specific search logic for query+domain combinations</li> </ul>"},{"location":"changelog/#added-cli-commands","title":"Added CLI Commands","text":"<pre><code># Organization search/get\nbiomcp organization search \"MD Anderson\" --api-key YOUR_KEY\nbiomcp organization get 12345 --api-key YOUR_KEY\n\n# Intervention search/get\nbiomcp intervention search pembrolizumab --type Drug --api-key YOUR_KEY\nbiomcp intervention get 67890 --api-key YOUR_KEY\n\n# Biomarker search\nbiomcp biomarker search --name \"PD-L1\" --api-key YOUR_KEY\n\n# Disease search\nbiomcp disease search melanoma --source nci --api-key YOUR_KEY\n\n# Enhanced trial commands with source selection\nbiomcp trial search --condition melanoma --source nci --api-key YOUR_KEY\nbiomcp trial get NCT04280705 --source nci --api-key YOUR_KEY\n</code></pre>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Added NCI tutorial with example prompts: <code>docs/tutorials/nci-prompts.md</code></li> <li>Created API parameter reference: <code>docs/api-changes/nci-api-parameters.md</code></li> <li>Updated CLAUDE.md with NCI usage instructions and parameter notes</li> <li>Requires NCI API key from: https://clinicaltrialsapi.cancer.gov/</li> </ul>"},{"location":"changelog/#060-2025-08-01","title":"0.6.0 - 2025-08-01","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Streamable HTTP Transport Support (#45) - MCP specification version 2025-03-26:</li> <li>Enabled FastMCP's native <code>/mcp</code> endpoint for Streamable HTTP transport</li> <li>MCP specification compliant transport (2025-03-26 spec) via FastMCP 1.12.3+</li> <li>CLI support via <code>biomcp run --mode streamable_http</code> (uses native FastMCP implementation)</li> <li>Full backward compatibility with legacy SSE endpoints</li> <li>Cloudflare Worker updated with POST /mcp route for full spec compliance</li> <li>Simplified worker implementation to leverage FastMCP's built-in transport support</li> <li>Added comprehensive integration tests for streamable HTTP functionality</li> <li>New transport protocol documentation guide</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Enhanced CLI with transport modes (stdio, worker, streamable_http)</li> <li>Added configurable host and port options for HTTP-based transports</li> <li>Simplified server modes by removing redundant <code>http</code> mode</li> <li>Cloudflare Worker now supports both GET and POST methods on /mcp endpoint</li> <li>Pinned FastMCP dependency to version range &gt;=1.12.3,&lt;2.0.0 for stability</li> <li>Standardized documentation file naming to lowercase with hyphens for consistency</li> </ul>"},{"location":"changelog/#migration-notes","title":"Migration Notes","text":"<ul> <li>From SSE to Streamable HTTP: Update your server startup from <code>--mode worker</code> to <code>--mode streamable_http</code></li> <li>Docker deployments: Ensure you're using <code>--host 0.0.0.0</code> for proper container networking</li> <li>Cloudflare Workers: The worker now automatically handles both transport types on <code>/mcp</code></li> <li>See the new Transport Protocol Guide for detailed migration instructions</li> </ul>"},{"location":"changelog/#050-2025-08-01","title":"0.5.0 - 2025-08-01","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>BioThings Integration for real-time biomedical data access:</li> <li>New MCP Tools (3 tools added, total now 17):<ul> <li><code>gene_getter</code>: Query MyGene.info for gene information (symbols, names, summaries)</li> <li><code>drug_getter</code>: Query MyChem.info for drug/chemical data (formulas, indications, mechanisms)</li> <li><code>disease_getter</code>: Query MyDisease.info for disease information (definitions, synonyms, ontologies)</li> </ul> </li> <li>Unified Search/Fetch Enhancement:<ul> <li>Added <code>gene</code>, <code>drug</code>, <code>disease</code> as new searchable domains alongside article, trial, variant</li> <li>Integrated into unified search syntax: <code>search(domain=\"gene\", keywords=[\"BRAF\"])</code></li> <li>Query language support: <code>gene:BRAF</code>, <code>drug:pembrolizumab</code>, <code>disease:melanoma</code></li> <li>Full fetch support: <code>fetch(domain=\"drug\", id=\"DB00945\")</code></li> </ul> </li> <li>Clinical Trial Enhancement:<ul> <li>Automatic disease synonym expansion for trial searches</li> <li>Real-time synonym lookup from MyDisease.info</li> <li>Example: searching for \"GIST\" automatically includes \"gastrointestinal stromal tumor\"</li> </ul> </li> <li>Smart Caching &amp; Performance:<ul> <li>Batch operations for multiple gene/drug lookups</li> <li>Intelligent caching with TTL (gene: 24h, drug: 48h, disease: 72h)</li> <li>Rate limiting to respect API guidelines</li> </ul> </li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Trial search now expands disease terms by default (disable with <code>expand_synonyms=False</code>)</li> <li>Enhanced error handling for BioThings API responses</li> <li>Improved network reliability with automatic retries</li> </ul>"},{"location":"changelog/#046-2025-07-09","title":"0.4.6 - 2025-07-09","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>MkDocs documentation deployment</li> </ul>"},{"location":"changelog/#045-2025-07-09","title":"0.4.5 - 2025-07-09","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Unified search and fetch tools following OpenAI MCP guidelines</li> <li>Additional variant sources (TCGA/GDC, 1000 Genomes) enabled by default in fetch operations</li> <li>Additional article sources (bioRxiv, medRxiv, Europe PMC) enabled by default in search operations</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Consolidated 10 separate MCP tools into 2 unified tools (search and fetch)</li> <li>Updated response formats to comply with OpenAI MCP specifications</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>OpenAI MCP compliance issues to enable integration</li> </ul>"},{"location":"changelog/#044-2025-07-08","title":"0.4.4 - 2025-07-08","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Performance Optimizations:</li> <li>Connection pooling with event loop lifecycle management (30% latency reduction)</li> <li>Parallel test execution with pytest-xdist (5x faster test runs)</li> <li>Request batching for cBioPortal API calls (80% fewer API calls)</li> <li>Smart caching with LRU eviction and fast hash keys (10x faster cache operations)</li> <li>Major performance improvements achieving ~3x faster test execution (120s \u2192 42s)</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Non-critical ASGI errors suppressed</li> <li>Performance issues in article_searcher</li> </ul>"},{"location":"changelog/#043-2025-07-08","title":"0.4.3 - 2025-07-08","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Complete HTTP centralization and improved code quality</li> <li>Comprehensive constants module for better maintainability</li> <li>Domain-specific handlers for result formatting</li> <li>Parameter parser for robust input validation</li> <li>Custom exception hierarchy for better error handling</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Refactored domain handlers to use static methods for better performance</li> <li>Enhanced type safety throughout the codebase</li> <li>Refactored complex functions to meet code quality standards</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Type errors in router.py for full mypy compliance</li> <li>Complex functions exceeding cyclomatic complexity thresholds</li> </ul>"},{"location":"changelog/#042-2025-07-07","title":"0.4.2 - 2025-07-07","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Europe PMC DOI support for article fetching</li> <li>Pagination support for Europe PMC searches</li> <li>OR logic support for variant notation searches (e.g., R173 vs Arg173 vs p.R173)</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Enhanced variant notation search capabilities</li> </ul>"},{"location":"changelog/#041-2025-07-03","title":"0.4.1 - 2025-07-03","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>AlphaGenome as an optional dependency to predict variant effects on gene regulation</li> <li>Per-request API key support for AlphaGenome integration</li> <li>AI predictions to complement existing database lookups</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Comprehensive sanitization in Cloudflare Worker to prevent sensitive data logging</li> <li>Secure usage in hosted environments where users provide their own keys</li> </ul>"},{"location":"changelog/#040-2025-06-27","title":"0.4.0 - 2025-06-27","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>cBioPortal Integration for article searches:</li> <li>Automatic gene-level mutation summaries when searching with gene parameters</li> <li>Mutation-specific search capabilities (e.g., BRAF V600E, SRSF2 F57*)</li> <li>Dynamic cancer type resolution using cBioPortal API</li> <li>Smart caching and rate limiting for optimal performance</li> </ul>"},{"location":"changelog/#033-2025-06-20","title":"0.3.3 - 2025-06-20","text":""},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Release workflow updates</li> </ul>"},{"location":"changelog/#032-2025-06-20","title":"0.3.2 - 2025-06-20","text":""},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Release workflow updates</li> </ul>"},{"location":"changelog/#031-2025-06-20","title":"0.3.1 - 2025-06-20","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Build and release process improvements</li> </ul>"},{"location":"changelog/#030-2025-06-20","title":"0.3.0 - 2025-06-20","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Expanded search capabilities</li> <li>Integration tests for MCP server functionality</li> <li>Utility modules for gene validation, mutation filtering, and request caching</li> </ul>"},{"location":"changelog/#021-2025-06-19","title":"0.2.1 - 2025-06-19","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Remote MCP policies</li> </ul>"},{"location":"changelog/#020-2025-06-17","title":"0.2.0 - 2025-06-17","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Sequential thinking tool for systematic problem-solving</li> <li>Session-based thinking to replace global state</li> <li>Extracted router handlers to reduce complexity</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Replaced global state in thinking module with session management</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Global state from sequential thinking module</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Race conditions in sequential thinking with concurrent usage</li> </ul>"},{"location":"changelog/#0111-2025-06-12","title":"0.1.11 - 2025-06-12","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Advanced eligibility criteria filters to clinical trial search</li> </ul>"},{"location":"changelog/#0110-2025-05-21","title":"0.1.10 - 2025-05-21","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>OAuth support on the Cloudflare worker via Stytch</li> </ul>"},{"location":"changelog/#019-2025-05-17","title":"0.1.9 - 2025-05-17","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Refactor: Bump minimum Python version to 3.10</li> </ul>"},{"location":"changelog/#018-2025-05-14","title":"0.1.8 - 2025-05-14","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Article searcher fixes</li> </ul>"},{"location":"changelog/#017-2025-05-07","title":"0.1.7 - 2025-05-07","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Remote OAuth support</li> </ul>"},{"location":"changelog/#016-2025-05-05","title":"0.1.6 - 2025-05-05","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Updates to handle cursor integration</li> </ul>"},{"location":"changelog/#015-2025-05-01","title":"0.1.5 - 2025-05-01","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Updates to smithery yaml to account for object types needed for remote calls</li> <li>Documentation and Lzyank updates</li> </ul>"},{"location":"changelog/#013-2025-05-01","title":"0.1.3 - 2025-05-01","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>Health check functionality to assist with API call issues</li> <li>System resources and network &amp; environment information gathering</li> <li>Remote MCP capability via Cloudflare using SSE</li> </ul>"},{"location":"changelog/#012-2025-04-18","title":"0.1.2 - 2025-04-18","text":""},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li>Researcher persona and BioMCP v0.1.2 release</li> <li>Deep Researcher Persona blog post</li> <li>Researcher persona video demo</li> </ul>"},{"location":"changelog/#011-2025-04-14","title":"0.1.1 - 2025-04-14","text":""},{"location":"changelog/#added_20","title":"Added","text":"<ul> <li>Claude Desktop and MCP Inspector tutorials</li> <li>Improved Claude Desktop Tutorial for BioMCP</li> <li>Troubleshooting guide and blog post</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Log tool names as comma separated string</li> <li>Server hanging issues</li> <li>Error responses in variant count check</li> </ul>"},{"location":"changelog/#010-2025-04-08","title":"0.1.0 - 2025-04-08","text":""},{"location":"changelog/#added_21","title":"Added","text":"<ul> <li>Initial release of BioMCP</li> <li>PubMed/PubTator3 article search integration</li> <li>ClinicalTrials.gov trial search integration</li> <li>MyVariant.info variant search integration</li> <li>CLI interface for direct usage</li> <li>MCP server for AI assistant integration</li> <li>Cloudflare Worker support for remote deployment</li> <li>Comprehensive test suite with pytest-bdd</li> <li>GenomOncology introduction</li> <li>Blog post on AI-assisted clinical trial search</li> <li>MacOS troubleshooting guide</li> </ul>"},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>API keys properly externalized</li> <li>Input validation using Pydantic models</li> <li>Safe string handling in all API calls</li> </ul>"},{"location":"faq-condensed/","title":"FAQ - Quick Answers","text":""},{"location":"faq-condensed/#getting-started","title":"Getting Started","text":"<p>Q: What is BioMCP? A: A unified interface to biomedical databases (PubMed, ClinicalTrials.gov, MyVariant, etc.) for researchers and AI assistants.</p> <p>Q: Do I need API keys? A: No for basic use. Yes for: NCI trials (cancer-specific), AlphaGenome (variant predictions), enhanced cBioPortal features.</p> <p>Q: How do I install it? A: <code>uv tool install biomcp</code> (recommended) or <code>pip install biomcp-python</code></p>"},{"location":"faq-condensed/#common-issues","title":"Common Issues","text":"<p>Q: \"Command not found\" after installation A: Restart terminal, or use full path: <code>~/.local/bin/biomcp</code></p> <p>Q: No results for gene search A: Use official symbols (ERBB2 not HER2). Check at genenames.org</p> <p>Q: Location search not working A: Must provide coordinates: <code>--latitude 42.3601 --longitude -71.0589</code></p> <p>Q: Why does the AI use 'think' first? A: Required for systematic analysis. Improves search quality and prevents missed connections.</p>"},{"location":"faq-condensed/#search-tips","title":"Search Tips","text":"<p>Q: How to search variant notations? A: Use OR syntax: <code>--keyword \"V600E|p.V600E|c.1799T&gt;A\"</code></p> <p>Q: Include/exclude preprints? A: Included by default. Use <code>--no-preprints</code> to exclude.</p> <p>Q: Search multiple databases? A: Use unified search: <code>search(query=\"gene:BRAF AND disease:melanoma\")</code></p>"},{"location":"faq-condensed/#data-questions","title":"Data Questions","text":"<p>Q: How current is the data? A: Daily updates for PubMed/trials, weekly for BioThings, varies for cBioPortal.</p> <p>Q: ClinicalTrials.gov vs NCI? A: CT.gov = comprehensive, NCI = cancer-focused with biomarker filters (needs API key).</p> <p>Q: What's MSI/TMB/VAF? A: MSI = Microsatellite Instability, TMB = Tumor Mutational Burden, VAF = Variant Allele Frequency</p>"},{"location":"faq-condensed/#technical","title":"Technical","text":"<p>Q: Rate limits? A: ~3 req/sec without keys, higher with keys. NCI = 1000/day with key.</p> <p>Q: Cache issues? A: Clear with: <code>rm -rf ~/.biomcp/cache</code></p> <p>Q: Which Python version? A: 3.10+ required</p>"},{"location":"faq-condensed/#quick-references","title":"Quick References","text":"<p>Common Gene Aliases:</p> <ul> <li>HER2 \u2192 ERBB2</li> <li>PD-L1 \u2192 CD274</li> <li>c-MET \u2192 MET</li> </ul> <p>City Coordinates:</p> <ul> <li>NYC: 40.7128, -74.0060</li> <li>Boston: 42.3601, -71.0589</li> <li>LA: 34.0522, -118.2437</li> </ul> <p>Trial Status:</p> <ul> <li>RECRUITING = Currently enrolling</li> <li>ACTIVE_NOT_RECRUITING = Ongoing</li> <li>COMPLETED = Finished</li> </ul>"},{"location":"faq-condensed/#getting-help","title":"Getting Help","text":"<ol> <li>Check this FAQ</li> <li>Read Troubleshooting</li> <li>Search GitHub Issues</li> <li>Ask with version info: <code>biomcp --version</code></li> </ol>"},{"location":"genomoncology/","title":"GenomOncology: Powering the Future of Precision Medicine","text":""},{"location":"genomoncology/#who-we-are","title":"Who We Are","text":"<p>GenomOncology is a leading healthcare technology company dedicated to transforming precision medicine through innovative genomic analysis solutions. We connect complex genomic data and actionable clinical insights, enabling healthcare providers to deliver personalized treatment strategies for cancer patients.</p>"},{"location":"genomoncology/#our-commitment-to-open-healthcare","title":"Our Commitment to Open Healthcare","text":"<p>We believe in the power of open source systems to further the impact of precision medicine. Through the BioMCP initiative we hope to engage the healthcare community in this open-access ecosystem designed to accelerate innovation in precision medicine. By evolving this open framework, we're moving to create a more collaborative, efficient, and transparent healthcare environment.</p>"},{"location":"genomoncology/#our-precision-oncology-platform","title":"Our Precision Oncology Platform","text":"<p>Today, our proprietary knowledge management system, known as the Precision Oncology Platform (POP), serves as the backbone of our solutions, continuously aggregating and curating the latest genomic research, clinical trials, and treatment guidelines. This system:</p> <ul> <li>Processes and harmonizes data from 40+ scientific and clinical sources</li> <li>Updates weekly to incorporate the newest research findings</li> <li>Utilizes advanced NLP to extract meaningful insights from unstructured text</li> <li>Maintains a comprehensive database of 25,000+ variant-drug associations</li> </ul>"},{"location":"genomoncology/#real-world-impact","title":"Real-World Impact","text":"<p>Our technology currently powers precision medicine programs at:</p> <ul> <li>120+ hospitals and cancer centers</li> <li>15 academic medical centers</li> <li>8 commercial reference laboratories</li> <li>10+ pharmaceutical research programs</li> </ul> <p>Processing over 100,000 genomic profiles monthly, our solutions have helped match thousands of patients to targeted therapies and clinical trials, significantly improving outcomes.</p>"},{"location":"genomoncology/#join-us-in-the-next-phase-of-transforming-healthcare","title":"Join Us In The Next Phase of Transforming Healthcare","text":"<p>By contributing to the BioMCP ecosystem, we're inviting developers to collaborate with us in creating the next generation of precision medicine tools. Whether you're looking to build applications that leverage genomic data, create integrations with existing healthcare systems, or explore novel approaches to biomarker analysis, GenomOncology provides the technological foundation to bring your ideas to life.</p>"},{"location":"genomoncology/#get-started","title":"Get Started","text":"<p>Ready to explore what's possible with GenomOncology and BioMCP?</p> <ul> <li>Clone our repositories on GitHub</li> <li>Register for API access</li> <li>Join our developer community</li> </ul> <p>Together, we can accelerate precision medicine through open collaboration and innovation.</p> <p>GenomOncology: Transforming data into treatment decisions</p>"},{"location":"policies/","title":"GenomOncology Remote MCP","text":"<p>Privacy Policy Version 1.2 \u2013 Effective June 18, 2025</p>"},{"location":"policies/#1-data-we-collect","title":"1. Data We Collect","text":"Type Examples Source Storage Account Google user ID, email, display name From Google OAuth BigQuery Queries Prompts, timestamps User input BigQuery Operational IP address, user-agent Automatic Temporary only Usage Token counts, latency, model performance Derived metrics Aggregated Third-Party Responses API responses from PubMed, bioRxiv, etc. Third-party services Not stored <p>We do not collect sensitive health or demographic information.</p>"},{"location":"policies/#2-how-we-use-it","title":"2. How We Use It","text":"<ul> <li>Authenticate and secure the service</li> <li>Improve quality, accuracy, and speed of model output</li> <li>Analyze aggregate usage for insights</li> <li>Monitor third-party API performance (without storing responses)</li> <li>Comply with laws</li> </ul>"},{"location":"policies/#3-legal-basis-gdpruk","title":"3. Legal Basis (GDPR/UK)","text":"<ul> <li>Contractual necessity (Art. 6(1)(b) GDPR)</li> <li>Legitimate interests (Art. 6(1)(f))</li> <li>Consent, where applicable</li> </ul>"},{"location":"policies/#4-who-we-share-with","title":"4. Who We Share With","text":"<ul> <li>Google Cloud / Cloudflare \u2013 Hosting &amp; Auth</li> <li>API providers \u2013 e.g., PubMed, bioRxiv</li> <li>Your queries are transmitted to these services</li> <li>We do not control their data retention practices</li> <li>We do not store third-party responses</li> <li>Analytics tools \u2013 e.g., BigQuery</li> <li>Authorities \u2013 if required by law</li> </ul> <p>We do not sell your personal data.</p>"},{"location":"policies/#5-third-party-data-handling","title":"5. Third-Party Data Handling","text":"<p>When you use the Service:</p> <ul> <li>Your queries may be sent to third-party APIs (PubMed, bioRxiv, TCGA, 1000 Genomes)</li> <li>These services have their own privacy policies and data practices</li> <li>We use third-party responses to generate output but do not store them</li> <li>Third parties may independently retain query data per their policies</li> <li>Only your username and queries are stored in our systems</li> </ul>"},{"location":"policies/#6-cookies","title":"6. Cookies","text":"<p>We use only Google OAuth session cookies. No additional tracking cookies are set.</p>"},{"location":"policies/#7-data-retention","title":"7. Data Retention","text":"<ul> <li>BigQuery storage (usernames &amp; queries): Retained indefinitely</li> <li>Operational data (IP, user-agent): Not retained</li> <li>Third-party responses: Not stored</li> <li>Aggregated metrics: Retained indefinitely</li> <li>Account Username: Retained until deletion requested</li> </ul>"},{"location":"policies/#8-security","title":"8. Security","text":"<ul> <li>All data encrypted in transit (TLS 1.3)</li> <li>Least-privilege access enforced via IAM</li> <li>Username and query data stored in BigQuery with strict access control</li> <li>Operational data (IP, user-agent) processed but not retained</li> <li>Incident Response: Security incidents investigated within 24 hours</li> <li>Breach Notification: Users notified within 72 hours of confirmed breach</li> <li>Security Audits: Annual third-party security assessments</li> <li>Vulnerability Reporting: See our SECURITY.md</li> </ul>"},{"location":"policies/#9-international-transfers","title":"9. International Transfers","text":"<p>Data is stored in Google Cloud's <code>us-central1</code>. Transfers from the EU/UK rely on SCCs.</p>"},{"location":"policies/#10-your-rights","title":"10. Your Rights","text":"<p>Depending on your location, you may request to:</p> <ul> <li>Access, correct, or delete your data</li> <li>Restrict or object to processing</li> <li>Port your data</li> <li>File a complaint (EEA/UK)</li> <li>Opt out (California residents)</li> </ul> <p>Data Export:</p> <ul> <li>Available in JSON or CSV format</li> <li>Requests fulfilled within 30 days</li> <li>Includes: account info, queries, timestamps</li> <li>Excludes: operational data, third-party responses, aggregated metrics</li> </ul> <p>Email: privacy@genomoncology.com</p>"},{"location":"policies/#11-childrens-privacy","title":"11. Children's Privacy","text":"<p>The Service is not intended for use by anyone under 16 years old.</p>"},{"location":"policies/#12-policy-changes","title":"12. Policy Changes","text":"<p>We will update this document at <code>/privacy</code> with an updated Effective Date. Material changes will be announced by email. Version history maintained at: github.com/genomoncology/biomcp/blob/main/docs/biomcp-privacy.md</p>"},{"location":"policies/#13-contact","title":"13. Contact","text":"<p>Data Protection Officer \ud83d\udce7 dpo@genomoncology.com \ud83d\udcee GenomOncology LLC \u2013 Privacy Office 1138 West 9th Street, Suite 400 Cleveland, OH 44113</p>"},{"location":"policies/#security-policy","title":"Security Policy","text":""},{"location":"policies/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>We take the security of biomcp seriously. If you believe you have found a security vulnerability, please report it to us as described below.</p>"},{"location":"policies/#please-do-not","title":"Please do NOT:","text":"<ul> <li>Open a public GitHub issue</li> <li>Discuss the vulnerability publicly before it has been addressed</li> </ul>"},{"location":"policies/#please-do","title":"Please DO:","text":"<ul> <li>Email us at security@genomoncology.com</li> <li>Include the word \"SECURITY\" in the subject line</li> <li>Provide detailed steps to reproduce the vulnerability</li> <li>Include the impact and potential attack scenarios</li> </ul>"},{"location":"policies/#what-to-expect","title":"What to expect:","text":"<ul> <li>Acknowledgment: Within 24 hours</li> <li>Initial Assessment: Within 72 hours</li> <li>Status Updates: At least every 5 business days</li> <li>Resolution Target: Critical issues within 30 days</li> </ul>"},{"location":"policies/#scope","title":"Scope","text":"<p>Vulnerabilities in the following areas are in scope:</p> <ul> <li>Authentication bypass or privilege escalation</li> <li>Data exposure or unauthorized access to user queries</li> <li>Injection vulnerabilities (SQL, command, etc.)</li> <li>Cross-site scripting (XSS) or request forgery (CSRF)</li> <li>Denial of service vulnerabilities</li> <li>Insecure cryptographic implementations</li> <li>Third-party API key exposure</li> </ul>"},{"location":"policies/#out-of-scope","title":"Out of Scope:","text":"<ul> <li>Vulnerabilities in third-party services (PubMed, bioRxiv, etc.)</li> <li>Issues in dependencies with existing patches</li> <li>Social engineering attacks</li> <li>Physical attacks</li> <li>Attacks requiring authenticated admin access</li> </ul>"},{"location":"policies/#disclosure-policy","title":"Disclosure Policy","text":"<ul> <li>We will work with you to understand and validate the issue</li> <li>We will prepare a fix and release it as soon as possible</li> <li>We will publicly disclose the vulnerability after the fix is released</li> <li>We will credit you for the discovery (unless you prefer to remain anonymous)</li> </ul>"},{"location":"policies/#safe-harbor","title":"Safe Harbor","text":"<p>Any activities conducted in a manner consistent with this policy will be considered authorized conduct, and we will not initiate legal action against you. If legal action is initiated by a third party against you in connection with activities conducted under this policy, we will take steps to make it known that your actions were conducted in compliance with this policy.</p>"},{"location":"policies/#contact","title":"Contact","text":"<p>Security Team Email: security@genomoncology.com PGP Key: Available upon request</p> <p>Thank you for helping keep biomcp and our users safe!</p>"},{"location":"policies/#genomoncology-remote-mcp_1","title":"GenomOncology Remote MCP","text":"<p>Terms of Service Version 1.2 \u2013 Effective June 18, 2025</p> <p>This document applies to the hosted Remote MCP service (the \"Service\") provided by GenomOncology LLC.</p> <p>For use of the open-source code available at https://github.com/genomoncology/biomcp, refer to the repository's LICENSE file (e.g., MIT License).</p>"},{"location":"policies/#1-definitions","title":"1. Definitions","text":"Term Meaning Service The hosted Model Context Protocol (MCP) instance available via Cloudflare and secured by Google OAuth. User Content Prompts, messages, files, code, or other material submitted by you. Output Model-generated text or data produced in response to your User Content. Personal Data Information that identifies or relates to an identifiable individual, including Google account identifiers and query text. Commercial Use Any use that directly or indirectly generates revenue, including but not limited to: selling access, integrating into paid products, or using for business operations. Academic Research Non-commercial research conducted by accredited educational institutions for scholarly purposes."},{"location":"policies/#2-eligibility-accounts","title":"2. Eligibility &amp; Accounts","text":"<p>You must:</p> <ul> <li>Be at least 16 years old</li> <li>Have a valid Google account</li> <li>Not be barred from receiving services under applicable law</li> </ul> <p>Authentication is handled via Google OAuth. Keep your credentials secure.</p>"},{"location":"policies/#3-license-intellectual-property","title":"3. License &amp; Intellectual Property","text":"<p>You are granted a limited, revocable, non-exclusive, non-transferable license to use the Service for internal research and non-commercial evaluation.</p> <p>Permitted Uses:</p> <ul> <li>Personal research and learning</li> <li>Academic research (with attribution)</li> <li>Evaluation for potential commercial licensing</li> <li>Open-source development (non-commercial)</li> </ul> <p>Prohibited Commercial Uses:</p> <ul> <li>Reselling or redistributing Service access</li> <li>Integration into commercial products/services</li> <li>Use in revenue-generating operations</li> <li>Commercial data analysis or insights</li> </ul> <p>For commercial licensing inquiries, contact: licensing@genomoncology.com</p> <p>We retain all rights in the Service and its software. You retain ownership of your User Content, but grant us a royalty-free, worldwide license to use it (and the resulting Output) to provide, secure, and improve the Service.</p>"},{"location":"policies/#4-acceptable-use-rate-limits","title":"4. Acceptable Use &amp; Rate Limits","text":"<p>You must not:</p> <ol> <li>Violate any law or regulation</li> <li>Reverse-engineer, scrape, or probe the Service or model weights</li> <li>Exceed rate limits or disrupt the Service</li> </ol> <p>Rate Limits:</p> <ul> <li>Standard tier: 100 requests per hour, 1000 per day</li> <li>Burst limit: 10 requests per minute</li> <li>Payload size: 50KB per request</li> </ul> <p>Exceeding Limits:</p> <ul> <li>First violation: 1-hour suspension</li> <li>Repeated violations: Account review and possible termination</li> <li>Higher limits available upon request: api-limits@genomoncology.com</li> </ul>"},{"location":"policies/#5-privacy-logging-improvement","title":"5. Privacy, Logging &amp; Improvement","text":"<p>We store Google user ID, email address, and query text with timestamps in Google BigQuery. This data is analyzed to:</p> <ul> <li>Operate and secure the Service</li> <li>Improve system performance and user experience</li> <li>Tune models and develop features</li> <li>Generate usage analytics</li> </ul> <p>Note: We process but do not retain operational data like IP addresses or user-agents. Third-party API responses are used in real-time but not stored.</p> <p>See our Privacy Policy for details.</p>"},{"location":"policies/#6-thirdparty-services","title":"6. Third\u2011Party Services","text":"<p>The Service queries third-party APIs and knowledge sources (e.g., PubMed, bioRxiv, TCGA, 1000 Genomes) to respond to user prompts.</p> <p>Important:</p> <ul> <li>Your queries are transmitted to these services</li> <li>Third-party services have independent terms and privacy policies</li> <li>We cannot guarantee their availability, accuracy, or uptime</li> <li>Third parties may retain your query data per their policies</li> <li>API responses are used to generate output but not stored by us</li> </ul> <p>You acknowledge that third-party content is subject to their respective licenses and terms.</p>"},{"location":"policies/#7-disclaimers","title":"7. Disclaimers","text":"<ul> <li>AI Output: May be inaccurate or biased. Do not rely on it for medical or legal decisions.</li> <li>AS\u2011IS: The Service is provided \"as is\" with no warranties or guarantees.</li> <li>Third-Party Content: We are not responsible for accuracy or availability of third-party data.</li> </ul>"},{"location":"policies/#8-limitation-of-liability","title":"8. Limitation of Liability","text":"<p>To the extent permitted by law, GenomOncology is not liable for indirect, incidental, or consequential damages, including:</p> <ul> <li>Data loss</li> <li>Business interruption</li> <li>Inaccurate output</li> <li>Third-party service failures</li> </ul>"},{"location":"policies/#9-indemnification","title":"9. Indemnification","text":"<p>You agree to indemnify and hold GenomOncology harmless from any claim resulting from your misuse of the Service.</p>"},{"location":"policies/#10-termination","title":"10. Termination","text":"<p>We may suspend or terminate access at any time. Upon termination:</p> <ul> <li>Your license ends immediately</li> <li>We retain stored data (username &amp; queries) per our Privacy Policy</li> <li>You may request data export within 30 days</li> </ul>"},{"location":"policies/#11-governing-law-dispute-resolution","title":"11. Governing Law &amp; Dispute Resolution","text":"<p>These Terms are governed by the laws of Ohio, USA. Disputes will be resolved via binding arbitration in Cuyahoga County, Ohio, under JAMS Streamlined Rules.</p>"},{"location":"policies/#12-changes","title":"12. Changes","text":"<p>We may update these Terms by posting to <code>/terms</code>. Material changes will be emailed. Continued use constitutes acceptance. Version history: github.com/genomoncology/biomcp/blob/main/docs/biomcp-terms.md</p>"},{"location":"policies/#13-security-vulnerability-reporting","title":"13. Security &amp; Vulnerability Reporting","text":"<p>Found a security issue? Please report it responsibly:</p> <ul> <li>Email: security@genomoncology.com</li> <li>See: SECURITY.md</li> </ul>"},{"location":"policies/#14-contact","title":"14. Contact","text":"<p>GenomOncology LLC 1138 West 9th Street, Suite 400 Cleveland, OH 44113 \ud83d\udce7 legal@genomoncology.com</p>"},{"location":"policies/#appendix-a-acceptable-use-policy-aup","title":"Appendix A \u2013 Acceptable Use Policy (AUP)","text":"<ul> <li>Do not submit illegal, harassing, or hateful content</li> <li>Do not generate malware, spam, or scrape personal data</li> <li>Respect copyright and IP laws</li> <li>Do not attempt to re-identify individuals from model output</li> <li>Do not use the Service to process protected health information (PHI)</li> <li>Do not submit personally identifiable genetic data</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you resolve common issues with BioMCP installation, configuration, and usage.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#prerequisites-not-met","title":"Prerequisites Not Met","text":"<p>macOS:</p> <pre><code># Install uv (recommended)\nbrew install uv\n\n# Or using the official installer\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install Node.js for npx (if needed)\nbrew install node\n</code></pre> <p>Linux:</p> <pre><code># Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install Node.js\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre> <p>Windows:</p> <pre><code># Install uv\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Install Node.js from https://nodejs.org\n</code></pre>"},{"location":"troubleshooting/#command-not-found-error","title":"\"Command not found\" Error","text":"<p>After installing BioMCP, if you get \"command not found\":</p> <ol> <li> <p>Restart your terminal - PATH updates require a new session</p> </li> <li> <p>Check installation location:</p> </li> </ol> <pre><code># For uv tool install\nls ~/.local/bin/biomcp\n\n# For pip install\nwhich biomcp\n</code></pre> <ol> <li>Add to PATH manually:</li> </ol> <pre><code># Add to ~/.bashrc or ~/.zshrc\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <ol> <li>Reinstall with force:</li> </ol> <pre><code>uv tool install biomcp --force\n</code></pre> <ol> <li>Use full path: <pre><code>~/.local/bin/biomcp --version\n</code></pre></li> </ol>"},{"location":"troubleshooting/#python-version-issues","title":"Python Version Issues","text":"<p>BioMCP requires Python 3.10 or higher:</p> <pre><code># Check Python version\npython --version\n\n# If too old, install newer version\n# macOS\nbrew install python@3.11\n\n# Linux\nsudo apt update\nsudo apt install python3.11\n\n# Use pyenv for version management\npyenv install 3.11.8\npyenv local 3.11.8\n</code></pre>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#api-key-not-working","title":"API Key Not Working","text":"<p>Environment Variable Not Set:</p> <pre><code># Check if set\necho $NCI_API_KEY\n\n# Set temporarily\nexport NCI_API_KEY=\"your-key-here\"\n\n# Set permanently in ~/.bashrc or ~/.zshrc\necho 'export NCI_API_KEY=\"your-key-here\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <p>Wrong API Key Format:</p> <ul> <li>NCI keys: Should be 36 characters (UUID format)</li> <li>AlphaGenome: Alphanumeric string</li> <li>cBioPortal: JWT token format</li> </ul> <p>API Key Permissions:</p> <pre><code># Test NCI API key\nbiomcp health check --verbose\n\n# Test specific API\ncurl -H \"X-API-KEY: $NCI_API_KEY\" \\\n  \"https://cts.nlm.nih.gov/api/v2/trials?size=1\"\n</code></pre>"},{"location":"troubleshooting/#ssl-certificate-errors","title":"SSL Certificate Errors","text":"<p>Update certificates:</p> <pre><code># Python certificates\npip install --upgrade certifi\n\n# System certificates (macOS)\nbrew install ca-certificates\n\n# System certificates (Linux)\nsudo apt-get update\nsudo apt-get install ca-certificates\n</code></pre> <p>Corporate proxy issues:</p> <pre><code># Set proxy environment variables\nexport HTTP_PROXY=\"http://proxy.company.com:8080\"\nexport HTTPS_PROXY=\"http://proxy.company.com:8080\"\nexport NO_PROXY=\"localhost,127.0.0.1\"\n\n# Configure pip for proxy\npip config set global.proxy http://proxy.company.com:8080\n</code></pre>"},{"location":"troubleshooting/#search-issues","title":"Search Issues","text":""},{"location":"troubleshooting/#no-results-found","title":"No Results Found","text":"<p>1. Check gene symbol:</p> <pre><code># Wrong: common names\nbiomcp article search --gene HER2  # \u274c\n\n# Correct: official HGNC symbol\nbiomcp article search --gene ERBB2  # \u2705\n\n# Find correct symbol\nbiomcp gene get HER2  # Will suggest ERBB2\n</code></pre> <p>2. Too restrictive filters:</p> <pre><code># Too specific - may return nothing\nbiomcp article search --gene BRAF --disease \"stage IV melanoma\" \\\n  --chemical \"dabrafenib and trametinib combination\"\n\n# Better - broader search\nbiomcp article search --gene BRAF --disease melanoma \\\n  --keyword \"dabrafenib trametinib\"\n</code></pre> <p>3. Check data availability:</p> <pre><code># Test if gene exists in database\nbiomcp gene get YOUR_GENE\n\n# Test if disease term is recognized\nbiomcp disease get \"your disease term\"\n</code></pre>"},{"location":"troubleshooting/#location-search-not-working","title":"Location Search Not Working","text":"<p>Location searches require coordinates:</p> <pre><code># Wrong - city name only\nbiomcp trial search --condition cancer --city \"New York\"  # \u274c\n\n# Correct - with coordinates\nbiomcp trial search --condition cancer \\\n  --latitude 40.7128 --longitude -74.0060 --distance 50  # \u2705\n</code></pre> <p>Common coordinates:</p> <ul> <li>New York: 40.7128, -74.0060</li> <li>Los Angeles: 34.0522, -118.2437</li> <li>Chicago: 41.8781, -87.6298</li> <li>Houston: 29.7604, -95.3698</li> <li>Boston: 42.3601, -71.0589</li> </ul>"},{"location":"troubleshooting/#preprint-search-issues","title":"Preprint Search Issues","text":"<p>Preprints not appearing:</p> <pre><code># Check if preprints are being excluded\nbiomcp article search --gene BRAF --no-preprints  # Excludes preprints\n\n# Include preprints (default)\nbiomcp article search --gene BRAF  # Includes preprints\n</code></pre> <p>DOI not found:</p> <pre><code># Ensure correct DOI format\nbiomcp article get \"10.1101/2024.01.20.23288905\"  # bioRxiv format\n\n# Not all preprints are indexed immediately\n# Try searching by title/keywords instead\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-searches","title":"Slow Searches","text":"<p>1. Reduce result count:</p> <pre><code># Default may be too high\nbiomcp article search --gene TP53 --limit 100  # Slow\n\n# Reduce for faster results\nbiomcp article search --gene TP53 --limit 10   # Fast\n</code></pre> <p>2. Use specific filters:</p> <pre><code># Broad search - slow\nbiomcp trial search --condition cancer\n\n# Specific search - faster\nbiomcp trial search --condition \"melanoma\" --phase PHASE3 \\\n  --status RECRUITING --country \"United States\"\n</code></pre> <p>3. Check API health:</p> <pre><code># See which APIs are slow\nbiomcp health check --verbose\n\n# Check specific API\nbiomcp health check --apis-only\n</code></pre>"},{"location":"troubleshooting/#timeout-errors","title":"Timeout Errors","text":"<p>Increase timeout for slow networks:</p> <pre><code># Set environment variable\nexport BIOMCP_TIMEOUT=300  # 5 minutes\n\n# Or use configuration file\necho \"timeout: 300\" &gt; ~/.biomcp/config.yml\n</code></pre> <p>For specific operations:</p> <pre><code># In Python scripts\nimport asyncio\nasyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n</code></pre>"},{"location":"troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Large result sets:</p> <pre><code># Process in batches\nfor i in {1..10}; do\n  biomcp article search --gene BRCA1 --page $i --limit 100\ndone\n\n# Use streaming where available\nbiomcp article search --gene TP53 --format jsonl | \\\n  while read line; do\n    echo \"$line\" | jq '.pmid'\n  done\n</code></pre>"},{"location":"troubleshooting/#mcp-server-issues","title":"MCP Server Issues","text":""},{"location":"troubleshooting/#testing-server-connectivity","title":"Testing Server Connectivity","text":"<p>1. Test with MCP Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre> <p>Open http://127.0.0.1:6274 and verify:</p> <ul> <li>Tools list loads</li> <li>Can invoke a simple tool like <code>gene_getter</code></li> </ul> <p>2. Test with curl (HTTP mode):</p> <pre><code># Start server in HTTP mode\nbiomcp run --mode http --port 8000\n\n# Test health endpoint\ncurl http://localhost:8000/health\n\n# Test MCP endpoint\ncurl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"tools/list\"}'\n</code></pre>"},{"location":"troubleshooting/#claude-desktop-integration-issues","title":"Claude Desktop Integration Issues","text":"<p>Server not appearing:</p> <ol> <li> <p>Check configuration file location:</p> </li> <li> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></p> </li> <li> <p>Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code></p> </li> <li> <p>Validate JSON syntax:</p> </li> </ol> <pre><code># macOS\ncat ~/Library/Application\\ Support/Claude/claude_desktop_config.json | jq .\n</code></pre> <ol> <li>Check server starts correctly:    <pre><code># Test the exact command from config\nuv run --with biomcp-python biomcp run\n</code></pre></li> </ol> <p>Server crashes: Check logs:</p> <pre><code># Enable debug logging\nexport BIOMCP_LOG_LEVEL=DEBUG\nuv run --with biomcp-python biomcp run\n</code></pre> <p>Common fixes:</p> <ul> <li>Update to latest version: <code>uv tool install biomcp --force</code></li> <li>Clear cache: <code>rm -rf ~/.biomcp/cache</code></li> <li>Check port conflicts: <code>lsof -i :8000</code></li> </ul>"},{"location":"troubleshooting/#data-quality-issues","title":"Data Quality Issues","text":""},{"location":"troubleshooting/#outdated-results","title":"Outdated Results","text":"<p>Check data freshness:</p> <pre><code># See when databases were last updated\nbiomcp health check --verbose | grep \"Last updated\"\n</code></pre> <p>Clear cache if needed:</p> <pre><code># Remove cached results\nrm -rf ~/.biomcp/cache\n\n# Or set cache TTL\nexport BIOMCP_CACHE_TTL=900  # 15 minutes\n</code></pre>"},{"location":"troubleshooting/#missing-annotations","title":"Missing Annotations","text":"<p>PubTator3 annotations missing:</p> <ul> <li>Some newer articles may not be fully annotated yet</li> <li>Try searching by PMID directly</li> <li>Check if article is indexed: search by title</li> </ul> <p>Variant annotations incomplete:</p> <ul> <li>Not all variants have all annotation types</li> <li>Rare variants may lack population frequencies</li> <li>Novel variants won't have ClinVar data</li> </ul>"},{"location":"troubleshooting/#error-messages","title":"Error Messages","text":""},{"location":"troubleshooting/#common-error-codes","title":"Common Error Codes","text":"<p>HTTP 429 - Rate Limit Exceeded:</p> <pre><code># Add delay between requests\nbiomcp article search --gene BRAF --delay 1000  # 1 second\n\n# Or reduce parallel requests\nexport BIOMCP_MAX_CONCURRENT=2\n</code></pre> <p>HTTP 404 - Not Found:</p> <ul> <li>Check identifier format (PMID, NCT ID, etc.)</li> <li>Verify record exists in source database</li> <li>Try alternative identifiers</li> </ul> <p>HTTP 500 - Server Error:</p> <ul> <li>External API may be down</li> <li>Check status: <code>biomcp health check</code></li> <li>Try again later</li> </ul>"},{"location":"troubleshooting/#debugging","title":"Debugging","text":"<p>Enable verbose logging:</p> <pre><code># Set log level\nexport BIOMCP_LOG_LEVEL=DEBUG\n\n# Run with verbose output\nbiomcp article search --gene BRAF --verbose\n\n# Check log files\ntail -f ~/.biomcp/logs/biomcp.log\n</code></pre> <p>Report bugs: Include when reporting issues:</p> <ol> <li>BioMCP version: <code>biomcp --version</code></li> <li>Full error message and stack trace</li> <li>Command that caused the error</li> <li>Operating system and Python version</li> <li>Relevant environment variables</li> </ol> <p>Report at: https://github.com/genomoncology/biomcp/issues</p>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#quick-checks","title":"Quick Checks","text":"<ol> <li>Check FAQ first: Frequently Asked Questions</li> <li>Search existing issues: GitHub Issues</li> <li>Check examples: How-to Guides</li> </ol>"},{"location":"troubleshooting/#community-support","title":"Community Support","text":"<ul> <li>Issue Tracker: Report bugs, request features</li> <li>Documentation: PRs welcome for improvements</li> </ul>"},{"location":"troubleshooting/#professional-support","title":"Professional Support","text":"<p>For commercial support, contact: support@genomoncology.com</p> <p>Still having issues? Open a GitHub issue with details.</p>"},{"location":"apis/error-codes/","title":"Error Codes Reference","text":"<p>This document provides a comprehensive list of error codes returned by BioMCP APIs, their meanings, and recommended actions.</p>"},{"location":"apis/error-codes/#http-status-codes","title":"HTTP Status Codes","text":""},{"location":"apis/error-codes/#success-codes-2xx","title":"Success Codes (2xx)","text":"Code Status Description 200 OK Request successful 201 Created Resource created successfully 204 No Content Request successful, no content to return"},{"location":"apis/error-codes/#client-error-codes-4xx","title":"Client Error Codes (4xx)","text":"Code Status Description Action 400 Bad Request Invalid request parameters Check parameter format and values 401 Unauthorized Missing or invalid API key Verify API key is correct 403 Forbidden Access denied to resource Check permissions for API key 404 Not Found Resource not found Verify ID exists and is correct format 409 Conflict Resource conflict Check for duplicate requests 422 Unprocessable Entity Validation error Review validation errors in response 429 Too Many Requests Rate limit exceeded Implement backoff and retry"},{"location":"apis/error-codes/#server-error-codes-5xx","title":"Server Error Codes (5xx)","text":"Code Status Description Action 500 Internal Server Error Server error Retry with exponential backoff 502 Bad Gateway Upstream service error Wait and retry 503 Service Unavailable Service temporarily unavailable Check service status, retry later 504 Gateway Timeout Request timeout Retry with smaller request"},{"location":"apis/error-codes/#biomcp-specific-error-codes","title":"BioMCP-Specific Error Codes","text":""},{"location":"apis/error-codes/#article-errors-1xxx","title":"Article Errors (1xxx)","text":"Code Error Description Example 1001 INVALID_PMID Invalid PubMed ID format \"abc123\" instead of \"12345678\" 1002 ARTICLE_NOT_FOUND Article does not exist PMID not in PubMed 1003 DOI_NOT_FOUND DOI cannot be resolved Invalid or non-existent DOI 1004 PUBTATOR_ERROR PubTator3 annotation failed Service temporarily down 1005 PREPRINT_NOT_INDEXED Preprint not yet indexed Recently submitted preprint"},{"location":"apis/error-codes/#trial-errors-2xxx","title":"Trial Errors (2xxx)","text":"Code Error Description Example 2001 INVALID_NCT_ID Invalid NCT ID format Missing \"NCT\" prefix 2002 TRIAL_NOT_FOUND Trial does not exist NCT ID not registered 2003 INVALID_LOCATION Invalid geographic coordinates Latitude &gt; 90 2004 NCI_API_REQUIRED NCI API key required Using NCI source without key 2005 INVALID_STATUS Invalid trial status Status not recognized"},{"location":"apis/error-codes/#variant-errors-3xxx","title":"Variant Errors (3xxx)","text":"Code Error Description Example 3001 INVALID_HGVS Invalid HGVS notation Malformed HGVS string 3002 VARIANT_NOT_FOUND Variant not in database Novel variant 3003 INVALID_ASSEMBLY Invalid genome assembly Not hg19 or hg38 3004 COORDINATE_MISMATCH Coordinates don't match reference Position out of range 3005 ALPHAGENOME_REQUIRED AlphaGenome API key required Prediction without key"},{"location":"apis/error-codes/#genedrugdisease-errors-4xxx","title":"Gene/Drug/Disease Errors (4xxx)","text":"Code Error Description Example 4001 GENE_NOT_FOUND Gene symbol not recognized Non-standard symbol 4002 DRUG_NOT_FOUND Drug/chemical not found Misspelled drug name 4003 DISEASE_NOT_FOUND Disease term not recognized Non-standard terminology 4004 SPECIES_NOT_SUPPORTED Only human genes supported Requesting mouse gene 4005 AMBIGUOUS_QUERY Multiple matches found Common drug name"},{"location":"apis/error-codes/#authentication-errors-5xxx","title":"Authentication Errors (5xxx)","text":"Code Error Description Action 5001 API_KEY_INVALID API key format invalid Check key format 5002 API_KEY_EXPIRED API key has expired Renew API key 5003 API_KEY_REVOKED API key was revoked Contact support 5004 INSUFFICIENT_PERMISSIONS API key lacks required permissions Upgrade API key 5005 IP_NOT_ALLOWED IP address not whitelisted Add IP to whitelist"},{"location":"apis/error-codes/#rate-limit-errors-6xxx","title":"Rate Limit Errors (6xxx)","text":"Code Error Description Headers 6001 RATE_LIMIT_EXCEEDED Too many requests X-RateLimit-Remaining: 0 6002 DAILY_LIMIT_EXCEEDED Daily quota exceeded X-RateLimit-Reset: timestamp 6003 CONCURRENT_LIMIT Too many concurrent requests X-Concurrent-Limit: 10 6004 BURST_LIMIT_EXCEEDED Short-term rate limit Retry-After: 60"},{"location":"apis/error-codes/#validation-errors-7xxx","title":"Validation Errors (7xxx)","text":"Code Error Description Example 7001 MISSING_REQUIRED_FIELD Required parameter missing Missing gene for variant search 7002 INVALID_FIELD_TYPE Wrong parameter type String instead of integer 7003 VALUE_OUT_OF_RANGE Value outside allowed range Page number &lt; 1 7004 INVALID_ENUM_VALUE Invalid enumeration value Phase \"PHASE5\" 7005 MUTUALLY_EXCLUSIVE Conflicting parameters Both PMID and DOI provided"},{"location":"apis/error-codes/#external-service-errors-8xxx","title":"External Service Errors (8xxx)","text":"Code Error Description Service 8001 PUBMED_UNAVAILABLE PubMed API down NCBI E-utilities 8002 CLINICALTRIALS_UNAVAILABLE ClinicalTrials.gov down CT.gov API 8003 BIOTHINGS_UNAVAILABLE BioThings API down MyGene/MyVariant 8004 CBIOPORTAL_UNAVAILABLE cBioPortal unavailable cBioPortal API 8005 EXTERNAL_TIMEOUT External service timeout Any external API"},{"location":"apis/error-codes/#error-response-format","title":"Error Response Format","text":""},{"location":"apis/error-codes/#standard-error-response","title":"Standard Error Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": 1002,\n    \"type\": \"ARTICLE_NOT_FOUND\",\n    \"message\": \"Article with PMID 99999999 not found\",\n    \"details\": {\n      \"pmid\": \"99999999\",\n      \"searched_in\": [\"pubmed\", \"pmc\", \"preprints\"]\n    }\n  },\n  \"request_id\": \"req_abc123\",\n  \"timestamp\": \"2024-03-15T10:30:00Z\"\n}\n</code></pre>"},{"location":"apis/error-codes/#validation-error-response","title":"Validation Error Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": 7001,\n    \"type\": \"MISSING_REQUIRED_FIELD\",\n    \"message\": \"Validation failed\",\n    \"details\": {\n      \"errors\": [\n        {\n          \"field\": \"gene\",\n          \"message\": \"Gene symbol is required for variant search\"\n        },\n        {\n          \"field\": \"assembly\",\n          \"message\": \"Assembly must be 'hg19' or 'hg38'\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"apis/error-codes/#rate-limit-error-response","title":"Rate Limit Error Response","text":"<pre><code>{\n  \"error\": {\n    \"code\": 6001,\n    \"type\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Rate limit of 180 requests per minute exceeded\",\n    \"details\": {\n      \"limit\": 180,\n      \"remaining\": 0,\n      \"reset\": 1710504000,\n      \"retry_after\": 45\n    }\n  },\n  \"headers\": {\n    \"X-RateLimit-Limit\": \"180\",\n    \"X-RateLimit-Remaining\": \"0\",\n    \"X-RateLimit-Reset\": \"1710504000\",\n    \"Retry-After\": \"45\"\n  }\n}\n</code></pre>"},{"location":"apis/error-codes/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"apis/error-codes/#1-implement-exponential-backoff","title":"1. Implement Exponential Backoff","text":"<pre><code>import time\nimport random\n\ndef exponential_backoff(attempt: int, base_delay: float = 1.0):\n    \"\"\"Calculate exponential backoff with jitter.\"\"\"\n    delay = base_delay * (2 ** attempt)\n    jitter = random.uniform(0, delay * 0.1)\n    return delay + jitter\n\n# Usage\nfor attempt in range(5):\n    try:\n        response = await client.search(...)\n        break\n    except RateLimitError:\n        delay = exponential_backoff(attempt)\n        time.sleep(delay)\n</code></pre>"},{"location":"apis/error-codes/#2-handle-specific-error-types","title":"2. Handle Specific Error Types","text":"<pre><code>try:\n    article = await client.articles.get(pmid)\nexcept BioMCPError as e:\n    if e.code == 1002:  # ARTICLE_NOT_FOUND\n        # Try alternative sources\n        article = await search_preprints(pmid)\n    elif e.code == 6001:  # RATE_LIMIT_EXCEEDED\n        # Wait and retry\n        time.sleep(e.retry_after)\n        article = await client.articles.get(pmid)\n    else:\n        # Log and re-raise\n        logger.error(f\"Unexpected error: {e}\")\n        raise\n</code></pre>"},{"location":"apis/error-codes/#3-parse-error-details","title":"3. Parse Error Details","text":"<pre><code>def handle_validation_error(error_response):\n    \"\"\"Extract and handle validation errors.\"\"\"\n    if error_response[\"error\"][\"type\"] == \"VALIDATION_ERROR\":\n        for error in error_response[\"error\"][\"details\"][\"errors\"]:\n            field = error[\"field\"]\n            message = error[\"message\"]\n            print(f\"Validation error on {field}: {message}\")\n</code></pre>"},{"location":"apis/error-codes/#4-monitor-rate-limits","title":"4. Monitor Rate Limits","text":"<pre><code>class RateLimitMonitor:\n    def __init__(self):\n        self.limits = {}\n\n    def update_from_headers(self, headers):\n        \"\"\"Update rate limit state from response headers.\"\"\"\n        self.limits[\"remaining\"] = int(headers.get(\"X-RateLimit-Remaining\", 0))\n        self.limits[\"reset\"] = int(headers.get(\"X-RateLimit-Reset\", 0))\n\n        if self.limits[\"remaining\"] &lt; 10:\n            logger.warning(f\"Rate limit low: {self.limits['remaining']} remaining\")\n\n    def should_delay(self):\n        \"\"\"Check if we should delay before next request.\"\"\"\n        return self.limits.get(\"remaining\", 100) &lt; 5\n</code></pre>"},{"location":"apis/error-codes/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"apis/error-codes/#scenario-1-gene-symbol-not-found","title":"Scenario 1: Gene Symbol Not Found","text":"<p>Error:</p> <pre><code>{\n  \"error\": {\n    \"code\": 4001,\n    \"type\": \"GENE_NOT_FOUND\",\n    \"message\": \"Gene symbol 'HER2' not found. Did you mean 'ERBB2'?\",\n    \"details\": {\n      \"query\": \"HER2\",\n      \"suggestions\": [\"ERBB2\", \"ERBB2IP\"]\n    }\n  }\n}\n</code></pre> <p>Solution:</p> <pre><code>try:\n    gene = await client.genes.get(\"HER2\")\nexcept GeneNotFoundError as e:\n    if e.suggestions:\n        # Try first suggestion\n        gene = await client.genes.get(e.suggestions[0])\n</code></pre>"},{"location":"apis/error-codes/#scenario-2-location-search-without-coordinates","title":"Scenario 2: Location Search Without Coordinates","text":"<p>Error:</p> <pre><code>{\n  \"error\": {\n    \"code\": 7001,\n    \"type\": \"MISSING_REQUIRED_FIELD\",\n    \"message\": \"Latitude and longitude required for location search\",\n    \"details\": {\n      \"hint\": \"Use geocoding service to convert city names to coordinates\"\n    }\n  }\n}\n</code></pre> <p>Solution:</p> <pre><code># Use a geocoding service first\ncoords = await geocode(\"Boston, MA\")\ntrials = await client.trials.search(\n    conditions=[\"cancer\"],\n    lat=coords.lat,\n    long=coords.long,\n    distance=50\n)\n</code></pre>"},{"location":"apis/error-codes/#scenario-3-api-key-required","title":"Scenario 3: API Key Required","text":"<p>Error:</p> <pre><code>{\n  \"error\": {\n    \"code\": 2004,\n    \"type\": \"NCI_API_REQUIRED\",\n    \"message\": \"NCI API key required for this operation\",\n    \"details\": {\n      \"get_key_url\": \"https://api.cancer.gov\",\n      \"feature\": \"biomarker_search\"\n    }\n  }\n}\n</code></pre> <p>Solution:</p> <pre><code># Initialize client with API key\nclient = BioMCPClient(nci_api_key=os.getenv(\"NCI_API_KEY\"))\n\n# Or provide per-request\ntrials = await client.trials.search(\n    source=\"nci\",\n    conditions=[\"melanoma\"],\n    api_key=\"your-nci-key\"\n)\n</code></pre>"},{"location":"apis/error-codes/#debugging-tips","title":"Debugging Tips","text":""},{"location":"apis/error-codes/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(\"biomcp\")\n</code></pre>"},{"location":"apis/error-codes/#2-inspect-raw-responses","title":"2. Inspect Raw Responses","text":"<pre><code># Enable raw response mode\nclient = BioMCPClient(debug=True)\n\n# Access raw response\nresponse = await client.articles.search(genes=[\"BRAF\"])\nprint(response.raw_response)\n</code></pre>"},{"location":"apis/error-codes/#3-capture-request-ids","title":"3. Capture Request IDs","text":"<pre><code>try:\n    result = await client.search(...)\nexcept BioMCPError as e:\n    print(f\"Request ID: {e.request_id}\")\n    # Include request_id when reporting issues\n</code></pre>"},{"location":"apis/error-codes/#support","title":"Support","text":"<p>For error codes not listed here or persistent issues:</p> <ol> <li>Check FAQ for common issues</li> <li>Search GitHub Issues</li> <li>Report new issues with:</li> <li>Error code and message</li> <li>Request ID if available</li> <li>Minimal code to reproduce</li> <li>BioMCP version</li> </ol>"},{"location":"apis/overview/","title":"API Reference Overview","text":"<p>BioMCP provides multiple interfaces for programmatic access to biomedical data. This reference covers the Python SDK, MCP protocol implementation, and HTTP API endpoints.</p>"},{"location":"apis/overview/#available-apis","title":"Available APIs","text":""},{"location":"apis/overview/#1-python-sdk","title":"1. Python SDK","text":"<p>The Python SDK provides async/await interfaces for all BioMCP functionality:</p> <ul> <li>Client API: High-level client for all domains</li> <li>Domain-specific APIs: Specialized interfaces for articles, trials, variants</li> <li>Streaming API: For real-time data processing</li> <li>Batch API: For bulk operations</li> </ul> <p>See Python SDK Reference for detailed documentation.</p>"},{"location":"apis/overview/#2-mcp-protocol","title":"2. MCP Protocol","text":"<p>BioMCP implements the Model Context Protocol for AI assistant integration:</p> <ul> <li>24 specialized tools for biomedical research</li> <li>Unified search across all domains</li> <li>Sequential thinking for complex queries</li> <li>Streaming responses for large datasets</li> </ul> <p>See MCP Tools Reference for implementation details.</p>"},{"location":"apis/overview/#3-http-rest-api","title":"3. HTTP REST API","text":"<p>When running in HTTP mode, BioMCP exposes RESTful endpoints:</p> <ul> <li>Search endpoints for each domain</li> <li>Fetch endpoints for detailed records</li> <li>Health monitoring endpoints</li> <li>WebSocket support for streaming</li> </ul> <p>See Transport Protocol Guide for endpoint documentation.</p>"},{"location":"apis/overview/#common-patterns","title":"Common Patterns","text":""},{"location":"apis/overview/#authentication","title":"Authentication","text":"<p>Most endpoints work without authentication. API keys enable enhanced features:</p> <pre><code># Python SDK\nclient = BioMCPClient(\n    nci_api_key=\"your-key\",\n    alphagenome_api_key=\"your-key\"\n)\n\n# HTTP API\nheaders = {\n    \"X-NCI-API-Key\": \"your-key\",\n    \"X-AlphaGenome-API-Key\": \"your-key\"\n}\n</code></pre>"},{"location":"apis/overview/#error-handling","title":"Error Handling","text":"<p>All APIs use consistent error codes:</p> Code Meaning Action 400 Bad Request Check parameters 401 Unauthorized Check API key 404 Not Found Verify ID exists 429 Rate Limited Retry with backoff 500 Server Error Retry later"},{"location":"apis/overview/#pagination","title":"Pagination","text":"<p>Standard pagination across all APIs:</p> <pre><code># Python SDK\nresults = await client.search(\n    domain=\"article\",\n    page=1,\n    page_size=20\n)\n\n# HTTP API\nGET /api/articles?page=1&amp;page_size=20\n</code></pre>"},{"location":"apis/overview/#response-formats","title":"Response Formats","text":"<p>All APIs support multiple response formats:</p> <ul> <li>JSON: Default, structured data</li> <li>JSONL: Streaming line-delimited JSON</li> <li>Markdown: Human-readable formatting</li> <li>CSV: Tabular data export</li> </ul>"},{"location":"apis/overview/#rate-limits","title":"Rate Limits","text":"API Without Key With Key PubMed/PubTator3 3 req/sec 10 req/sec ClinicalTrials.gov 50 req/min 50 req/min BioThings 3 req/sec 10 req/sec NCI N/A 1000 req/day AlphaGenome N/A 100 req/day"},{"location":"apis/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Python SDK Reference - Detailed Python API documentation</li> <li>MCP Tools Reference - MCP implementation details</li> <li>Transport Protocol Guide - REST endpoint documentation</li> <li>Error Codes Reference - Complete error code listing</li> </ul>"},{"location":"apis/python-sdk/","title":"Python Package Reference","text":"<p>The BioMCP Python package provides direct access to biomedical data search and retrieval functions through modular domain-specific APIs.</p>"},{"location":"apis/python-sdk/#installation","title":"Installation","text":"<pre><code>pip install biomcp-python\n</code></pre>"},{"location":"apis/python-sdk/#quick-start","title":"Quick Start","text":"<pre><code>import asyncio\nfrom biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\nfrom biomcp.articles.search import search_articles, PubmedRequest\nfrom biomcp.trials.search import search_trials, TrialQuery\n\nasync def main():\n    # Search for pathogenic variants\n    variant_query = VariantQuery(\n        gene=\"BRAF\",\n        significance=ClinicalSignificance.PATHOGENIC\n    )\n    variants_result = await search_variants(variant_query)\n\n    # Search articles\n    article_request = PubmedRequest(\n        genes=[\"BRAF\"],\n        diseases=[\"melanoma\"]\n    )\n    articles_result = await search_articles(article_request)\n\n    # Search clinical trials\n    trial_query = TrialQuery(\n        conditions=[\"melanoma\"],\n        status=\"RECRUITING\"\n    )\n    trials_result = await search_trials(trial_query)\n\nasyncio.run(main())\n</code></pre>"},{"location":"apis/python-sdk/#api-structure","title":"API Structure","text":"<p>The BioMCP package is organized into domain-specific modules that you import directly:</p>"},{"location":"apis/python-sdk/#available-modules","title":"Available Modules","text":"<ul> <li>Variants: <code>biomcp.variants.search</code> - Search genetic variants</li> <li>Articles: <code>biomcp.articles.search</code> - Search biomedical literature</li> <li>Trials: <code>biomcp.trials.search</code> - Search clinical trials</li> <li>Genes: <code>biomcp.genes</code> - Get gene information</li> <li>Diseases: <code>biomcp.diseases</code> - Get disease information</li> <li>Drugs: <code>biomcp.drugs</code> - Get drug information</li> </ul>"},{"location":"apis/python-sdk/#import-patterns","title":"Import Patterns","text":"<pre><code># Variants\nfrom biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\nfrom biomcp.variants.getter import get_variant\nfrom biomcp.variants.alphagenome import predict_variant_effects\n\n# Articles\nfrom biomcp.articles.search import search_articles, PubmedRequest\n\n# Trials\nfrom biomcp.trials.search import search_trials, TrialQuery, TrialPhase\n\n# Direct functions\nfrom biomcp.genes import get_gene\nfrom biomcp.diseases import get_disease\nfrom biomcp.drugs import get_drug\n</code></pre>"},{"location":"apis/python-sdk/#articles-api","title":"Articles API","text":""},{"location":"apis/python-sdk/#search_articles","title":"search_articles()","text":"<p>Search PubMed/PubTator3 for biomedical literature.</p> <pre><code>from biomcp.articles.search import search_articles, PubmedRequest\n\nasync def search_articles(\n    request: PubmedRequest,\n    output_json: bool = False\n) -&gt; str:\n</code></pre> <p>PubmedRequest Parameters:</p> <ul> <li><code>genes</code>: List of gene symbols (e.g., [\"BRAF\", \"KRAS\"])</li> <li><code>diseases</code>: List of disease/condition terms</li> <li><code>chemicals</code>: List of drug/chemical names</li> <li><code>variants</code>: List of variant notations</li> <li><code>keywords</code>: Additional search keywords (supports OR with |)</li> </ul> <p>Example:</p> <pre><code>from biomcp.articles.search import search_articles, PubmedRequest\n\n# Basic search\nrequest = PubmedRequest(\n    genes=[\"EGFR\"],\n    diseases=[\"lung cancer\"]\n)\nresults = await search_articles(request)\n\n# Advanced search with keywords\nrequest = PubmedRequest(\n    genes=[\"BRAF\"],\n    keywords=[\"V600E|p.V600E|resistance\"],\n    chemicals=[\"vemurafenib\", \"dabrafenib\"]\n)\nresults = await search_articles(request)\n</code></pre>"},{"location":"apis/python-sdk/#trials-api","title":"Trials API","text":""},{"location":"apis/python-sdk/#search_trials","title":"search_trials()","text":"<p>Search clinical trials from ClinicalTrials.gov.</p> <pre><code>from biomcp.trials.search import search_trials, TrialQuery, TrialPhase, RecruitingStatus\n\nasync def search_trials(\n    query: TrialQuery,\n    output_json: bool = False\n) -&gt; str:\n</code></pre> <p>TrialQuery Parameters:</p> <ul> <li><code>conditions</code>: Disease/condition terms</li> <li><code>interventions</code>: Treatment/intervention terms</li> <li><code>other_terms</code>: Additional search terms</li> <li><code>status</code>: Trial status (use RecruitingStatus enum)</li> <li><code>phase</code>: Trial phase (use TrialPhase enum)</li> <li><code>study_type</code>: INTERVENTIONAL or OBSERVATIONAL</li> <li><code>lat</code>, <code>long</code>, <code>distance</code>: Geographic search parameters</li> </ul> <p>Available Enums:</p> <ul> <li><code>TrialPhase</code>: EARLY_PHASE1, PHASE1, PHASE2, PHASE3, PHASE4, NOT_APPLICABLE</li> <li><code>RecruitingStatus</code>: OPEN, CLOSED, ANY</li> <li><code>StudyType</code>: INTERVENTIONAL, OBSERVATIONAL, EXPANDED_ACCESS</li> </ul> <p>Example:</p> <pre><code>from biomcp.trials.search import search_trials, TrialQuery, TrialPhase\n\n# Basic search\nquery = TrialQuery(\n    conditions=[\"melanoma\"],\n    phase=TrialPhase.PHASE3,\n    recruiting_status=\"RECRUITING\"\n)\nresults = await search_trials(query)\n\n# Location-based search\nquery = TrialQuery(\n    conditions=[\"breast cancer\"],\n    lat=40.7128,\n    long=-74.0060,\n    distance=50\n)\nresults = await search_trials(query)\n</code></pre>"},{"location":"apis/python-sdk/#variants-api","title":"Variants API","text":""},{"location":"apis/python-sdk/#search_variants","title":"search_variants()","text":"<p>Search genetic variants in MyVariant.info.</p> <pre><code>from biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\n\nasync def search_variants(\n    query: VariantQuery,\n    output_json: bool = False,\n    include_cbioportal: bool = True\n) -&gt; str:\n</code></pre> <p>VariantQuery Parameters:</p> <ul> <li><code>gene</code>: Gene symbol (e.g. BRAF, TP53)</li> <li><code>hgvsp</code>: Protein change notation (e.g., p.V600E, p.Arg557His)</li> <li><code>hgvsc</code>: cDNA notation (e.g., c.1799T&gt;A)</li> <li><code>rsid</code>: dbSNP rsID (e.g., rs113488022)</li> <li><code>region</code>: Genomic region as chr:start-end (e.g. chr1:12345-67890)</li> <li><code>significance</code>: ClinVar clinical significance (use ClinicalSignificance enum)</li> <li><code>min_frequency</code>, <code>max_frequency</code>: Allele frequency filters</li> <li><code>cadd</code>: Minimum CADD phred score</li> <li><code>polyphen</code>: PolyPhen-2 prediction (use PolyPhenPrediction enum)</li> <li><code>sift</code>: SIFT prediction (use SiftPrediction enum)</li> <li><code>sources</code>: Include only specific data sources</li> <li><code>size</code>: Number of results to return</li> <li><code>offset</code>: Result offset for pagination</li> </ul> <p>Available Enums:</p> <ul> <li><code>ClinicalSignificance</code>: PATHOGENIC, LIKELY_PATHOGENIC, UNCERTAIN_SIGNIFICANCE, LIKELY_BENIGN, BENIGN</li> <li><code>PolyPhenPrediction</code>: PROBABLY_DAMAGING, POSSIBLY_DAMAGING, BENIGN</li> <li><code>SiftPrediction</code>: DELETERIOUS, TOLERATED</li> </ul> <p>Example:</p> <pre><code>from biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\n\n# Search pathogenic variants\nquery = VariantQuery(\n    gene=\"BRCA1\",\n    significance=ClinicalSignificance.PATHOGENIC,\n    max_frequency=0.01\n)\nresults = await search_variants(query)\n\n# Search by genomic region\nquery = VariantQuery(\n    region=\"chr7:140453136-140453137\"\n)\nresults = await search_variants(query)\n\n# Search by protein change\nquery = VariantQuery(\n    gene=\"BRAF\",\n    hgvsp=\"p.V600E\"\n)\nresults = await search_variants(query)\n</code></pre>"},{"location":"apis/python-sdk/#get_variant","title":"get_variant()","text":"<p>Get detailed variant information.</p> <pre><code>from biomcp.variants.getter import get_variant\n\nasync def get_variant(\n    variant_id: str,\n    output_json: bool = False,\n    include_external: bool = False\n) -&gt; str:\n</code></pre> <p>Parameters:</p> <ul> <li><code>variant_id</code>: Variant identifier (HGVS, rsID, or genomic like \"chr7:g.140453136A&gt;T\")</li> <li><code>output_json</code>: Return JSON format instead of markdown</li> <li><code>include_external</code>: Include external database annotations</li> </ul> <p>Example:</p> <pre><code># Get by HGVS\nvariant_info = await get_variant(\"chr7:g.140453136A&gt;T\")\n\n# Get by rsID\nvariant_info = await get_variant(\"rs113488022\")\n</code></pre>"},{"location":"apis/python-sdk/#predict_variant_effects","title":"predict_variant_effects()","text":"<p>Predict variant effects using AlphaGenome AI.</p> <pre><code>from biomcp.variants.alphagenome import predict_variant_effects\n\nasync def predict_variant_effects(\n    chromosome: str,\n    position: int,\n    reference: str,\n    alternate: str,\n    interval_size: int = 131_072,\n    tissue_types: list[str] | None = None,\n    significance_threshold: float = 0.5,\n    api_key: str | None = None\n) -&gt; str:\n</code></pre> <p>Parameters:</p> <ul> <li><code>chromosome</code>: Chromosome (e.g., 'chr7')</li> <li><code>position</code>: 1-based genomic position</li> <li><code>reference</code>: Reference allele(s)</li> <li><code>alternate</code>: Alternate allele(s)</li> <li><code>interval_size</code>: Size of genomic context window (max 1,000,000)</li> <li><code>tissue_types</code>: UBERON tissue ontology terms for tissue-specific predictions</li> <li><code>significance_threshold</code>: Threshold for significant log2 fold changes</li> <li><code>api_key</code>: AlphaGenome API key (or set ALPHAGENOME_API_KEY env var)</li> </ul> <p>Example:</p> <pre><code># Predict effects of BRAF V600E mutation\nprediction = await predict_variant_effects(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    api_key=\"your-alphagenome-api-key\"\n)\n</code></pre>"},{"location":"apis/python-sdk/#direct-data-apis","title":"Direct Data APIs","text":""},{"location":"apis/python-sdk/#get_gene","title":"get_gene()","text":"<p>Get gene information from MyGene.info.</p> <pre><code>from biomcp.genes import get_gene\n\nasync def get_gene(\n    gene_id_or_symbol: str,\n    output_json: bool = False\n) -&gt; str:\n</code></pre> <p>Example:</p> <pre><code>gene_info = await get_gene(\"BRCA1\")\n</code></pre>"},{"location":"apis/python-sdk/#get_disease","title":"get_disease()","text":"<p>Get disease information from MyDisease.info.</p> <pre><code>from biomcp.diseases import get_disease\n\nasync def get_disease(\n    disease_id_or_name: str,\n    output_json: bool = False\n) -&gt; str:\n</code></pre> <p>Example:</p> <pre><code>disease_info = await get_disease(\"melanoma\")\n</code></pre>"},{"location":"apis/python-sdk/#get_drug","title":"get_drug()","text":"<p>Get drug information from MyChem.info.</p> <pre><code>from biomcp.drugs import get_drug\n\nasync def get_drug(\n    drug_id_or_name: str,\n    output_json: bool = False\n) -&gt; str:\n</code></pre> <p>Example:</p> <pre><code>drug_info = await get_drug(\"imatinib\")\n</code></pre>"},{"location":"apis/python-sdk/#complete-analysis-example","title":"Complete Analysis Example","text":"<pre><code>import asyncio\nfrom biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\nfrom biomcp.articles.search import search_articles, PubmedRequest\nfrom biomcp.trials.search import search_trials, TrialQuery, TrialPhase\nfrom biomcp.genes import get_gene\n\nasync def analyze_gene_variants(gene_symbol: str, disease: str):\n    \"\"\"Complete gene variant analysis workflow.\"\"\"\n\n    # 1. Get gene information\n    gene_info = await get_gene(gene_symbol)\n    print(f\"Gene: {gene_symbol}\")\n\n    # 2. Search for pathogenic variants\n    variant_query = VariantQuery(\n        gene=gene_symbol,\n        significance=ClinicalSignificance.PATHOGENIC,\n        max_frequency=0.01  # Rare variants\n    )\n    variants_result = await search_variants(variant_query)\n    print(f\"Found pathogenic variants for {gene_symbol}\")\n\n    # 3. Search related literature\n    article_request = PubmedRequest(\n        genes=[gene_symbol],\n        diseases=[disease],\n        keywords=[\"therapy\", \"treatment\", \"prognosis\"]\n    )\n    articles_result = await search_articles(article_request)\n    print(f\"Found literature on {gene_symbol} and {disease}\")\n\n    # 4. Find clinical trials\n    trial_query = TrialQuery(\n        conditions=[disease],\n        other_terms=[gene_symbol, f\"{gene_symbol} mutation\"],\n        phase=TrialPhase.PHASE3,\n        recruiting_status=\"RECRUITING\"\n    )\n    trials_result = await search_trials(trial_query)\n    print(f\"Found trials for {disease} with {gene_symbol}\")\n\n    return {\n        \"gene_info\": gene_info,\n        \"variants\": variants_result,\n        \"articles\": articles_result,\n        \"trials\": trials_result\n    }\n\n# Run the analysis\nresults = asyncio.run(analyze_gene_variants(\"BRAF\", \"melanoma\"))\n</code></pre>"},{"location":"apis/python-sdk/#langchain-integration","title":"LangChain Integration","text":"<pre><code>from langchain.tools import tool\nfrom biomcp.variants.search import search_variants, VariantQuery, ClinicalSignificance\nfrom biomcp.articles.search import search_articles, PubmedRequest\n\n@tool\ndef search_pathogenic_variants(gene: str) -&gt; str:\n    \"\"\"Search for pathogenic variants in a specific gene.\"\"\"\n    import asyncio\n\n    async def _search():\n        query = VariantQuery(\n            gene=gene,\n            significance=ClinicalSignificance.PATHOGENIC\n        )\n        return await search_variants(query)\n\n    return asyncio.run(_search())\n\n@tool\ndef search_gene_literature(gene: str, disease: str = None) -&gt; str:\n    \"\"\"Search for scientific literature about a gene and optionally a disease.\"\"\"\n    import asyncio\n\n    async def _search():\n        request = PubmedRequest(\n            genes=[gene],\n            diseases=[disease] if disease else []\n        )\n        return await search_articles(request)\n\n    return asyncio.run(_search())\n\n# Use with your LLM/agent framework\ntools = [search_pathogenic_variants, search_gene_literature]\n</code></pre>"},{"location":"apis/python-sdk/#key-differences-from-other-documentation","title":"Key Differences from Other Documentation","text":"<p>\u274c Does NOT work:</p> <pre><code>from biomcp import BioMCPClient  # This class doesn't exist\n</code></pre> <p>\u2705 Actually works:</p> <pre><code>from biomcp.variants.search import search_variants, VariantQuery\nfrom biomcp.articles.search import search_articles, PubmedRequest\nfrom biomcp.trials.search import search_trials, TrialQuery\n</code></pre>"},{"location":"apis/python-sdk/#summary","title":"Summary","text":"<p>The BioMCP package provides powerful biomedical data access through:</p> <ul> <li>Direct async functions for each domain (variants, articles, trials, genes, diseases, drugs)</li> <li>Pydantic models for type-safe queries and responses</li> <li>Comprehensive enums for standardized values</li> <li>No unified client - use individual domain modules directly</li> </ul> <p>This modular approach works well for building tools and integrating with frameworks like LangChain, as it provides direct access to specific functionality without the overhead of a unified client interface.</p>"},{"location":"apis/python-sdk/#additional-resources","title":"Additional Resources","text":"<ul> <li>MCP Tools Reference</li> <li>CLI Commands</li> <li>How-to Guides</li> </ul>"},{"location":"backend-services-reference/01-overview/","title":"Backend Services Reference Overview","text":"<p>BioMCP integrates with multiple biomedical databases and services to provide comprehensive research capabilities. This reference documents the underlying APIs and their capabilities.</p>"},{"location":"backend-services-reference/01-overview/#service-categories","title":"Service Categories","text":""},{"location":"backend-services-reference/01-overview/#literature-and-publications","title":"Literature and Publications","text":"<ul> <li>PubTator3: Biomedical literature with entity annotations</li> <li>Europe PMC: Preprints from bioRxiv and medRxiv</li> </ul>"},{"location":"backend-services-reference/01-overview/#clinical-trials","title":"Clinical Trials","text":"<ul> <li>ClinicalTrials.gov: U.S. and international clinical trials registry</li> <li>NCI CTS API: National Cancer Institute's enhanced trial search</li> </ul>"},{"location":"backend-services-reference/01-overview/#biomedical-annotations","title":"Biomedical Annotations","text":"<ul> <li>BioThings Suite:</li> <li>MyGene.info - Gene annotations</li> <li>MyVariant.info - Variant annotations</li> <li>MyDisease.info - Disease ontology</li> <li>MyChem.info - Drug/chemical data</li> </ul>"},{"location":"backend-services-reference/01-overview/#cancer-genomics","title":"Cancer Genomics","text":"<ul> <li>cBioPortal: Cancer genomics portal with mutation data</li> <li>TCGA: The Cancer Genome Atlas (via MyVariant.info)</li> </ul>"},{"location":"backend-services-reference/01-overview/#variant-effect-prediction","title":"Variant Effect Prediction","text":"<ul> <li>AlphaGenome: Google DeepMind's AI for regulatory predictions</li> </ul>"},{"location":"backend-services-reference/01-overview/#api-authentication","title":"API Authentication","text":"Service Authentication Required Type Rate Limits PubTator3 No Public 3 requests/second ClinicalTrials.gov No Public 50,000 requests/day NCI CTS API Yes API Key 1,000 requests/day BioThings APIs No Public 1,000 requests/hour cBioPortal Optional Token Higher with token AlphaGenome Yes API Key Contact provider"},{"location":"backend-services-reference/01-overview/#data-flow-architecture","title":"Data Flow Architecture","text":"<pre><code>User Query \u2192 BioMCP Tools \u2192 Backend APIs \u2192 Unified Response\n\nExample Flow:\n1. User: \"Find articles about BRAF mutations\"\n2. BioMCP: article_searcher tool\n3. APIs Called:\n   - PubTator3 (articles)\n   - cBioPortal (mutation data)\n   - Europe PMC (preprints)\n4. Response: Integrated results with citations\n</code></pre>"},{"location":"backend-services-reference/01-overview/#service-reliability","title":"Service Reliability","text":""},{"location":"backend-services-reference/01-overview/#primary-services","title":"Primary Services","text":"<ul> <li>PubTator3: 99.9% uptime, updated daily</li> <li>ClinicalTrials.gov: 99.5% uptime, updated daily</li> <li>BioThings APIs: 99.9% uptime, real-time data</li> </ul>"},{"location":"backend-services-reference/01-overview/#fallback-strategies","title":"Fallback Strategies","text":"<ul> <li>Cache frequently accessed data</li> <li>Implement exponential backoff</li> <li>Use alternative endpoints when available</li> </ul>"},{"location":"backend-services-reference/01-overview/#common-integration-patterns","title":"Common Integration Patterns","text":""},{"location":"backend-services-reference/01-overview/#1-entity-recognition-enhancement","title":"1. Entity Recognition Enhancement","text":"<pre><code>PubTator3 \u2192 Extract entities \u2192 BioThings \u2192 Get detailed annotations\n</code></pre>"},{"location":"backend-services-reference/01-overview/#2-variant-to-trial-pipeline","title":"2. Variant to Trial Pipeline","text":"<pre><code>MyVariant.info \u2192 Get gene \u2192 ClinicalTrials.gov \u2192 Find relevant trials\n</code></pre>"},{"location":"backend-services-reference/01-overview/#3-comprehensive-gene-analysis","title":"3. Comprehensive Gene Analysis","text":"<pre><code>MyGene.info \u2192 Basic info\ncBioPortal \u2192 Cancer mutations\nPubTator3 \u2192 Literature\nAlphaGenome \u2192 Predictions\n</code></pre>"},{"location":"backend-services-reference/01-overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"backend-services-reference/01-overview/#response-times-typical","title":"Response Times (typical)","text":"<ul> <li>PubTator3: 200-500ms</li> <li>ClinicalTrials.gov: 300-800ms</li> <li>BioThings APIs: 100-300ms</li> <li>cBioPortal: 200-600ms</li> <li>AlphaGenome: 1-3 seconds</li> </ul>"},{"location":"backend-services-reference/01-overview/#optimization-strategies","title":"Optimization Strategies","text":"<ol> <li>Batch requests when APIs support it</li> <li>Cache static data (gene names, ontologies)</li> <li>Parallelize independent API calls</li> <li>Use pagination for large result sets</li> </ol>"},{"location":"backend-services-reference/01-overview/#error-handling","title":"Error Handling","text":""},{"location":"backend-services-reference/01-overview/#common-error-types","title":"Common Error Types","text":"<ul> <li>Rate Limiting: 429 errors, implement backoff</li> <li>Invalid Parameters: 400 errors, validate inputs</li> <li>Service Unavailable: 503 errors, retry with delay</li> <li>Authentication: 401 errors, check API keys</li> </ul>"},{"location":"backend-services-reference/01-overview/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"API rate limit exceeded\",\n    \"retry_after\": 3600\n  }\n}\n</code></pre>"},{"location":"backend-services-reference/01-overview/#data-formats","title":"Data Formats","text":""},{"location":"backend-services-reference/01-overview/#input-formats","title":"Input Formats","text":"<ul> <li>Identifiers: HGNC symbols, rsIDs, NCT numbers, PMIDs</li> <li>Coordinates: GRCh38 genomic positions</li> <li>Terms: MeSH, MONDO, HPO ontologies</li> </ul>"},{"location":"backend-services-reference/01-overview/#output-formats","title":"Output Formats","text":"<ul> <li>JSON: Primary format for all APIs</li> <li>XML: Available for some services</li> <li>TSV/CSV: Export options for bulk data</li> </ul>"},{"location":"backend-services-reference/01-overview/#update-frequencies","title":"Update Frequencies","text":"Service Update Frequency Data Lag PubTator3 Daily 1-2 days ClinicalTrials.gov Daily Real-time NCI CTS Daily 1 day BioThings Real-time Minutes cBioPortal Quarterly 3-6 months"},{"location":"backend-services-reference/01-overview/#best-practices","title":"Best Practices","text":""},{"location":"backend-services-reference/01-overview/#1-api-key-management","title":"1. API Key Management","text":"<ul> <li>Store keys securely</li> <li>Rotate keys periodically</li> <li>Monitor usage against limits</li> </ul>"},{"location":"backend-services-reference/01-overview/#2-error-recovery","title":"2. Error Recovery","text":"<ul> <li>Implement retry logic</li> <li>Log failed requests</li> <li>Provide fallback data</li> </ul>"},{"location":"backend-services-reference/01-overview/#3-data-validation","title":"3. Data Validation","text":"<ul> <li>Verify gene symbols</li> <li>Validate genomic coordinates</li> <li>Check identifier formats</li> </ul>"},{"location":"backend-services-reference/01-overview/#4-performance","title":"4. Performance","text":"<ul> <li>Cache when appropriate</li> <li>Batch similar requests</li> <li>Use appropriate page sizes</li> </ul>"},{"location":"backend-services-reference/01-overview/#getting-started","title":"Getting Started","text":"<ol> <li>Review individual service documentation</li> <li>Obtain necessary API keys</li> <li>Test endpoints with sample data</li> <li>Implement error handling</li> <li>Monitor usage and performance</li> </ol>"},{"location":"backend-services-reference/01-overview/#support-resources","title":"Support Resources","text":"<ul> <li>PubTator3: Support Forum</li> <li>ClinicalTrials.gov: Help Desk</li> <li>BioThings: Documentation</li> <li>cBioPortal: User Guide</li> <li>NCI: API Support</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/","title":"BioThings Suite API Reference","text":"<p>The BioThings Suite provides unified access to biomedical annotations across genes, variants, diseases, and drugs through a consistent API interface.</p>"},{"location":"backend-services-reference/02-biothings-suite/#usage-examples","title":"Usage Examples","text":"<p>For practical examples using the BioThings APIs, see:</p> <ul> <li>How to Find Trials with NCI and BioThings</li> <li>Get Comprehensive Variant Annotations</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#overview","title":"Overview","text":"<p>BioMCP integrates with four BioThings APIs:</p> <ul> <li>MyGene.info: Gene annotations and functional information</li> <li>MyVariant.info: Genetic variant annotations and clinical significance</li> <li>MyDisease.info: Disease ontology and terminology mappings</li> <li>MyChem.info: Drug/chemical properties and mechanisms</li> </ul> <p>All APIs share:</p> <ul> <li>RESTful JSON interface</li> <li>No authentication required</li> <li>Elasticsearch-based queries</li> <li>Comprehensive data aggregation</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#mygeneinfo","title":"MyGene.info","text":""},{"location":"backend-services-reference/02-biothings-suite/#base-url","title":"Base URL","text":"<p><code>https://mygene.info/v1/</code></p>"},{"location":"backend-services-reference/02-biothings-suite/#key-endpoints","title":"Key Endpoints","text":""},{"location":"backend-services-reference/02-biothings-suite/#gene-query","title":"Gene Query","text":"<pre><code>GET /query?q={query}\n</code></pre> <p>Parameters:</p> <ul> <li><code>q</code>: Query string (gene symbol, name, or ID)</li> <li><code>fields</code>: Specific fields to return</li> <li><code>species</code>: Limit to species (default: human, mouse, rat)</li> <li><code>size</code>: Number of results (default: 10)</li> </ul> <p>Example:</p> <pre><code>curl \"https://mygene.info/v1/query?q=BRAF&amp;fields=symbol,name,summary,type_of_gene\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#gene-annotation","title":"Gene Annotation","text":"<pre><code>GET /gene/{geneid}\n</code></pre> <p>Gene ID formats:</p> <ul> <li>Entrez Gene ID: <code>673</code></li> <li>Ensembl ID: <code>ENSG00000157764</code></li> <li>Gene Symbol: <code>BRAF</code></li> </ul> <p>Example:</p> <pre><code>curl \"https://mygene.info/v1/gene/673?fields=symbol,name,summary,genomic_pos,pathway,go\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#important-fields","title":"Important Fields","text":"Field Description Example <code>symbol</code> Official gene symbol \"BRAF\" <code>name</code> Full gene name \"B-Raf proto-oncogene\" <code>entrezgene</code> NCBI Entrez ID 673 <code>summary</code> Functional description \"This gene encodes...\" <code>genomic_pos</code> Chromosomal location {\"chr\": \"7\", \"start\": 140433812} <code>pathway</code> Pathway memberships {\"kegg\": [...], \"reactome\": [...]} <code>go</code> Gene Ontology terms {\"BP\": [...], \"MF\": [...], \"CC\": [...]}"},{"location":"backend-services-reference/02-biothings-suite/#myvariantinfo","title":"MyVariant.info","text":""},{"location":"backend-services-reference/02-biothings-suite/#base-url_1","title":"Base URL","text":"<p><code>https://myvariant.info/v1/</code></p>"},{"location":"backend-services-reference/02-biothings-suite/#key-endpoints_1","title":"Key Endpoints","text":""},{"location":"backend-services-reference/02-biothings-suite/#variant-query","title":"Variant Query","text":"<pre><code>GET /query?q={query}\n</code></pre> <p>Query syntax:</p> <ul> <li>Gene + variant: <code>dbnsfp.genename:BRAF AND dbnsfp.hgvsp:p.V600E</code></li> <li>rsID: <code>dbsnp.rsid:rs121913529</code></li> <li>Genomic: <code>_id:chr7:g.140453136A&gt;T</code></li> </ul> <p>Example:</p> <pre><code>curl \"https://myvariant.info/v1/query?q=dbnsfp.genename:TP53&amp;fields=_id,clinvar,gnomad_exome\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#variant-annotation","title":"Variant Annotation","text":"<pre><code>GET /variant/{variant_id}\n</code></pre> <p>ID formats:</p> <ul> <li>HGVS genomic: <code>chr7:g.140453136A&gt;T</code></li> <li>dbSNP: <code>rs121913529</code></li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#important-fields_1","title":"Important Fields","text":"Field Description Example <code>clinvar</code> Clinical significance {\"clinical_significance\": \"Pathogenic\"} <code>dbsnp</code> dbSNP annotations {\"rsid\": \"rs121913529\"} <code>cadd</code> CADD scores {\"phred\": 35} <code>gnomad_exome</code> Population frequency {\"af\": {\"af\": 0.00001}} <code>dbnsfp</code> Functional predictions {\"polyphen2\": \"probably_damaging\"}"},{"location":"backend-services-reference/02-biothings-suite/#query-filters","title":"Query Filters","text":"<pre><code># Clinical significance\nq = \"clinvar.clinical_significance:pathogenic\"\n\n# Frequency filters\nq = \"gnomad_exome.af.af:&lt;0.01\"  # Rare variants\n\n# Gene-specific\nq = \"dbnsfp.genename:BRCA1 AND cadd.phred:&gt;20\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#mydiseaseinfo","title":"MyDisease.info","text":""},{"location":"backend-services-reference/02-biothings-suite/#base-url_2","title":"Base URL","text":"<p><code>https://mydisease.info/v1/</code></p>"},{"location":"backend-services-reference/02-biothings-suite/#key-endpoints_2","title":"Key Endpoints","text":""},{"location":"backend-services-reference/02-biothings-suite/#disease-query","title":"Disease Query","text":"<pre><code>GET /query?q={query}\n</code></pre> <p>Example:</p> <pre><code>curl \"https://mydisease.info/v1/query?q=melanoma&amp;fields=mondo,disease_ontology,synonyms\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#disease-annotation","title":"Disease Annotation","text":"<pre><code>GET /disease/{disease_id}\n</code></pre> <p>ID formats:</p> <ul> <li>MONDO: <code>MONDO:0007254</code></li> <li>DOID: <code>DOID:1909</code></li> <li>OMIM: <code>OMIM:155600</code></li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#important-fields_2","title":"Important Fields","text":"Field Description Example <code>mondo</code> MONDO ontology {\"id\": \"MONDO:0007254\", \"label\": \"melanoma\"} <code>disease_ontology</code> Disease Ontology {\"id\": \"DOID:1909\"} <code>synonyms</code> Alternative names [\"malignant melanoma\", \"MM\"] <code>xrefs</code> Cross-references {\"omim\": [\"155600\"], \"mesh\": [\"D008545\"]} <code>phenotypes</code> HPO terms [{\"hpo_id\": \"HP:0002861\"}]"},{"location":"backend-services-reference/02-biothings-suite/#mycheminfo","title":"MyChem.info","text":""},{"location":"backend-services-reference/02-biothings-suite/#base-url_3","title":"Base URL","text":"<p><code>https://mychem.info/v1/</code></p>"},{"location":"backend-services-reference/02-biothings-suite/#key-endpoints_3","title":"Key Endpoints","text":""},{"location":"backend-services-reference/02-biothings-suite/#drug-query","title":"Drug Query","text":"<pre><code>GET /query?q={query}\n</code></pre> <p>Example:</p> <pre><code>curl \"https://mychem.info/v1/query?q=imatinib&amp;fields=drugbank,chembl,chebi\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#drug-annotation","title":"Drug Annotation","text":"<pre><code>GET /drug/{drug_id}\n</code></pre> <p>ID formats:</p> <ul> <li>DrugBank: <code>DB00619</code></li> <li>ChEMBL: <code>CHEMBL941</code></li> <li>Name: <code>imatinib</code></li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#important-fields_3","title":"Important Fields","text":"Field Description Example <code>drugbank</code> DrugBank data {\"id\": \"DB00619\", \"name\": \"Imatinib\"} <code>chembl</code> ChEMBL data {\"molecule_chembl_id\": \"CHEMBL941\"} <code>chebi</code> ChEBI ontology {\"id\": \"CHEBI:45783\"} <code>drugcentral</code> Indications {\"indications\": [...]} <code>pharmacology</code> Mechanism {\"mechanism_of_action\": \"BCR-ABL inhibitor\"}"},{"location":"backend-services-reference/02-biothings-suite/#common-query-patterns","title":"Common Query Patterns","text":""},{"location":"backend-services-reference/02-biothings-suite/#1-gene-to-variant-pipeline","title":"1. Gene to Variant Pipeline","text":"<pre><code># Step 1: Get gene info\ngene_response = requests.get(\n    \"https://mygene.info/v1/gene/BRAF\",\n    params={\"fields\": \"symbol,genomic_pos\"}\n)\n\n# Step 2: Find variants in gene\nvariant_response = requests.get(\n    \"https://myvariant.info/v1/query\",\n    params={\n        \"q\": \"dbnsfp.genename:BRAF\",\n        \"fields\": \"clinvar.clinical_significance,gnomad_exome.af\",\n        \"size\": 100\n    }\n)\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#2-disease-synonym-expansion","title":"2. Disease Synonym Expansion","text":"<pre><code># Get all synonyms for a disease\ndisease_response = requests.get(\n    \"https://mydisease.info/v1/query\",\n    params={\n        \"q\": \"melanoma\",\n        \"fields\": \"mondo,synonyms,xrefs\"\n    }\n)\n\n# Extract all names\nall_names = [\"melanoma\"]\nfor hit in disease_response.json()[\"hits\"]:\n    if \"synonyms\" in hit:\n        all_names.extend(hit[\"synonyms\"])\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#3-drug-target-lookup","title":"3. Drug Target Lookup","text":"<pre><code># Find drugs targeting a gene\ndrug_response = requests.get(\n    \"https://mychem.info/v1/query\",\n    params={\n        \"q\": \"drugcentral.targets.gene_symbol:BRAF\",\n        \"fields\": \"drugbank.name,chembl.pref_name\",\n        \"size\": 50\n    }\n)\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":""},{"location":"backend-services-reference/02-biothings-suite/#rate-limits","title":"Rate Limits","text":"<ul> <li>Default: 1,000 requests/hour per IP</li> <li>Batch queries: Up to 1,000 IDs per request</li> <li>No authentication: Public access</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#best-practices","title":"Best Practices","text":""},{"location":"backend-services-reference/02-biothings-suite/#1-use-field-filtering","title":"1. Use Field Filtering","text":"<pre><code># Good - only request needed fields\nparams = {\"fields\": \"symbol,name,summary\"}\n\n# Bad - returns all fields\nparams = {}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#2-batch-requests","title":"2. Batch Requests","text":"<pre><code># Good - single request for multiple genes\nresponse = requests.post(\n    \"https://mygene.info/v1/gene\",\n    json={\"ids\": [\"BRAF\", \"KRAS\", \"EGFR\"]}\n)\n\n# Bad - multiple individual requests\nfor gene in [\"BRAF\", \"KRAS\", \"EGFR\"]:\n    requests.get(f\"https://mygene.info/v1/gene/{gene}\")\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#3-handle-missing-data","title":"3. Handle Missing Data","text":"<pre><code># Check for field existence\nif \"clinvar\" in variant and \"clinical_significance\" in variant[\"clinvar\"]:\n    significance = variant[\"clinvar\"][\"clinical_significance\"]\nelse:\n    significance = \"Not available\"\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#error-handling","title":"Error Handling","text":""},{"location":"backend-services-reference/02-biothings-suite/#common-errors","title":"Common Errors","text":""},{"location":"backend-services-reference/02-biothings-suite/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"ID not found\"\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"Invalid query syntax\"\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#429-rate-limited","title":"429 Rate Limited","text":"<pre><code>{\n  \"success\": false,\n  \"error\": \"Rate limit exceeded\"\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#error-handling-code","title":"Error Handling Code","text":"<pre><code>def query_biothings(api_url, query_params):\n    try:\n        response = requests.get(api_url, params=query_params)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 404:\n            return {\"error\": \"Not found\", \"query\": query_params}\n        elif e.response.status_code == 429:\n            # Implement exponential backoff\n            time.sleep(60)\n            return query_biothings(api_url, query_params)\n        else:\n            raise\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#data-sources","title":"Data Sources","text":"<p>Each BioThings API aggregates data from multiple sources:</p>"},{"location":"backend-services-reference/02-biothings-suite/#mygeneinfo-sources","title":"MyGene.info Sources","text":"<ul> <li>NCBI Entrez Gene</li> <li>Ensembl</li> <li>UniProt</li> <li>KEGG, Reactome, WikiPathways</li> <li>Gene Ontology</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#myvariantinfo-sources","title":"MyVariant.info Sources","text":"<ul> <li>dbSNP</li> <li>ClinVar</li> <li>gnomAD</li> <li>CADD</li> <li>PolyPhen-2, SIFT</li> <li>COSMIC</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#mydiseaseinfo-sources","title":"MyDisease.info Sources","text":"<ul> <li>MONDO</li> <li>Disease Ontology</li> <li>OMIM</li> <li>MeSH</li> <li>HPO</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#mycheminfo-sources","title":"MyChem.info Sources","text":"<ul> <li>DrugBank</li> <li>ChEMBL</li> <li>ChEBI</li> <li>PubChem</li> <li>DrugCentral</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#advanced-features","title":"Advanced Features","text":""},{"location":"backend-services-reference/02-biothings-suite/#full-text-search","title":"Full-Text Search","text":"<pre><code># Search across all fields\nparams = {\n    \"q\": \"lung cancer EGFR\",  # Searches all text fields\n    \"fields\": \"symbol,name,summary\"\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#faceted-search","title":"Faceted Search","text":"<pre><code># Get aggregations\nparams = {\n    \"q\": \"clinvar.clinical_significance:pathogenic\",\n    \"facets\": \"dbnsfp.genename\",\n    \"size\": 0  # Only return facets\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#scrolling-large-results","title":"Scrolling Large Results","text":"<pre><code># For results &gt; 10,000\nparams = {\n    \"q\": \"dbnsfp.genename:TP53\",\n    \"fetch_all\": True,\n    \"fields\": \"_id\"\n}\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#integration-tips","title":"Integration Tips","text":""},{"location":"backend-services-reference/02-biothings-suite/#1-caching-strategy","title":"1. Caching Strategy","text":"<ul> <li>Cache gene/drug/disease lookups (stable)</li> <li>Don't cache variant queries (frequently updated)</li> <li>Use ETags for conditional requests</li> </ul>"},{"location":"backend-services-reference/02-biothings-suite/#2-parallel-requests","title":"2. Parallel Requests","text":"<pre><code>import asyncio\nimport aiohttp\n\nasync def fetch_all(session, urls):\n    tasks = []\n    for url in urls:\n        tasks.append(session.get(url))\n    return await asyncio.gather(*tasks)\n</code></pre>"},{"location":"backend-services-reference/02-biothings-suite/#3-data-normalization","title":"3. Data Normalization","text":"<pre><code>def normalize_gene_symbol(symbol):\n    # Query MyGene to get official symbol\n    response = requests.get(\n        f\"https://mygene.info/v1/query?q={symbol}\"\n    )\n    if response.json()[\"hits\"]:\n        return response.json()[\"hits\"][0][\"symbol\"]\n    return symbol\n</code></pre>"},{"location":"backend-services-reference/03-cbioportal/","title":"cBioPortal Integration","text":"<p>BioMCP integrates with cBioPortal, a comprehensive cancer genomics portal that provides visualization and analysis tools for large-scale cancer genomics datasets.</p>"},{"location":"backend-services-reference/03-cbioportal/#overview","title":"Overview","text":"<p>The cBioPortal integration enhances article searches by automatically including relevant cancer genomics data when searching for genes. This integration provides:</p> <ol> <li>Gene-level summaries - Mutation frequency and distribution across cancer studies</li> <li>Mutation-specific searches - Find studies containing specific mutations (e.g., BRAF V600E)</li> <li>Cancer type resolution - Accurate cancer type categorization using cBioPortal's API</li> </ol>"},{"location":"backend-services-reference/03-cbioportal/#how-it-works","title":"How It Works","text":""},{"location":"backend-services-reference/03-cbioportal/#automatic-integration","title":"Automatic Integration","text":"<p>When you search for articles with a gene parameter, BioMCP automatically queries cBioPortal to provide additional context:</p> <pre><code># Basic gene search includes cBioPortal summary\nsearch(domain=\"article\", genes=[\"BRAF\"], diseases=[\"melanoma\"])\n</code></pre> <p>This returns:</p> <ul> <li>Standard PubMed/PubTator3 article results</li> <li>cBioPortal summary showing mutation frequency across cancer studies</li> <li>Top cancer types where the gene is mutated</li> </ul>"},{"location":"backend-services-reference/03-cbioportal/#mutation-specific-searches","title":"Mutation-Specific Searches","text":"<p>To search for specific mutations, include the mutation notation in keywords:</p> <pre><code># Search for BRAF V600E mutation\nsearch(domain=\"article\", genes=[\"BRAF\"], keywords=[\"V600E\"])\n\n# Search for SRSF2 F57Y mutation\nsearch(domain=\"article\", genes=[\"SRSF2\"], keywords=[\"F57Y\"])\n\n# Use wildcards for mutation patterns (e.g., any amino acid at position 57)\nsearch(domain=\"article\", genes=[\"SRSF2\"], keywords=[\"F57*\"])\n</code></pre> <p>Mutation-specific searches return:</p> <ul> <li>Total number of studies in cBioPortal</li> <li>Number of studies containing the mutation</li> <li>Top studies ranked by mutation count</li> <li>Cancer type distribution</li> </ul>"},{"location":"backend-services-reference/03-cbioportal/#example-output","title":"Example Output","text":""},{"location":"backend-services-reference/03-cbioportal/#gene-level-summary","title":"Gene-Level Summary","text":"<pre><code>### cBioPortal Summary for BRAF\n- **Mutation Frequency**: 76.7% (368 mutations in 480 samples)\n- **Top Cancer Types**: Melanoma (45%), Thyroid (23%), Colorectal (18%)\n- **Top Mutations**: V600E (89%), V600K (7%), G469A (2%)\n</code></pre>"},{"location":"backend-services-reference/03-cbioportal/#mutation-specific-results","title":"Mutation-Specific Results","text":"<pre><code>### cBioPortal Mutation Search: BRAF\n**Specific Mutation**: V600E\n- **Total Studies**: 2340\n- **Studies with Mutation**: 170\n- **Total Mutations Found**: 5780\n\n**Top Studies by Mutation Count:**\n| Count | Study ID | Cancer Type | Study Name |\n|-------|----------|-------------|------------|\n|   804 | msk_met_2021 | Mixed Cancer Types | MSK MetTropism (MSK, Cell 2021) |\n|   555 | msk_chord_2024 | Mixed Cancer Types | MSK-CHORD (MSK, Nature 2024) |\n|   295 | msk_impact_2017 | Mixed Cancer Types | MSK-IMPACT Clinical Sequencing Cohort |\n</code></pre>"},{"location":"backend-services-reference/03-cbioportal/#supported-mutation-notations","title":"Supported Mutation Notations","text":"<p>The integration recognizes standard protein change notation:</p> <ul> <li>Specific mutations: <code>V600E</code>, <code>F57Y</code>, <code>T790M</code></li> <li>Wildcard patterns: <code>F57*</code> (matches F57Y, F57L, etc.)</li> <li>Multiple mutations: Include multiple keywords for OR search</li> </ul>"},{"location":"backend-services-reference/03-cbioportal/#api-details","title":"API Details","text":""},{"location":"backend-services-reference/03-cbioportal/#endpoints-used","title":"Endpoints Used","text":"<ol> <li>Gene Information: <code>/api/genes/{gene}</code></li> <li>Cancer Types: <code>/api/cancer-types</code></li> <li>Mutation Data: <code>/api/mutations/fetch</code></li> <li>Study Information: <code>/api/studies</code></li> </ol>"},{"location":"backend-services-reference/03-cbioportal/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Conservative rate limit of 5 requests/second</li> <li>Results cached for 15-30 minutes (mutations) or 24 hours (cancer types)</li> </ul>"},{"location":"backend-services-reference/03-cbioportal/#authentication","title":"Authentication","text":"<p>Optional authentication via environment variable:</p> <pre><code>export CBIO_TOKEN=\"your-api-token\"\n</code></pre> <p>Public cBioPortal instance works without authentication but may have rate limits.</p>"},{"location":"backend-services-reference/03-cbioportal/#cli-usage","title":"CLI Usage","text":"<p>For detailed command-line options for searching articles with cBioPortal integration, see the CLI User Guide.</p>"},{"location":"backend-services-reference/03-cbioportal/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Caching: Results are cached to minimize API calls</p> </li> <li> <p>Gene summaries: 15 minutes</p> </li> <li>Mutation searches: 30 minutes</li> <li> <p>Cancer types: 24 hours</p> </li> <li> <p>Graceful Degradation: If cBioPortal is unavailable, searches continue without the additional data</p> </li> <li> <p>Parallel Processing: API calls are made in parallel with article searches for optimal performance</p> </li> </ol>"},{"location":"backend-services-reference/03-cbioportal/#limitations","title":"Limitations","text":"<ol> <li>Only works with valid HUGO gene symbols</li> <li>Mutation searches require exact protein change notation</li> <li>Limited to mutations in cBioPortal's curated studies</li> <li>Rate limits may apply for high-volume usage</li> </ol>"},{"location":"backend-services-reference/03-cbioportal/#error-handling","title":"Error Handling","text":"<p>The integration handles various error scenarios:</p> <ul> <li>Invalid gene symbols are validated before API calls</li> <li>Network timeouts fall back to article-only results</li> <li>API errors are logged but don't block search results</li> </ul>"},{"location":"backend-services-reference/04-clinicaltrials-gov/","title":"ClinicalTrials.gov API","text":"<p>This document outlines the key aspects of the public ClinicalTrials.gov v2 API utilized by BioMCP. Understanding these details can be helpful for advanced users interpreting BioMCP results or for developers extending its capabilities. BioMCP's CLI commands often simplify or combine these parameters for ease of use; refer to the Trials CLI Documentation for specific command options.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#overview","title":"Overview","text":"<p>The ClinicalTrials.gov API provides programmatic access to clinical trial information. This document outlines the API implementation details for searching and retrieving clinical trial data.</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Trials CLI Documentation.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#api-endpoints","title":"API Endpoints","text":""},{"location":"backend-services-reference/04-clinicaltrials-gov/#search-api","title":"Search API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies</code></p> <p>This endpoint allows searching for clinical trials using various parameters.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#key-parameters","title":"Key Parameters","text":"Parameter Description Example Value <code>query.cond</code> \"Conditions or disease\" query <code>lung cancer</code> <code>query.term</code> \"Other terms\" query <code>AREA[LastUpdatePostDate]RANGE[2023-01-15,MAX]</code> <code>query.intr</code> \"Intervention/treatment\" query <code>Vemurafenib</code> <code>query.locn</code> \"Location terms\" query <code>New York</code> <code>query.titles</code> \"Title/acronym\" query <code>BRAF Melanoma</code> <code>query.outc</code> \"Outcome measure\" query <code>overall survival</code> <code>query.spons</code> \"Sponsor/collaborator\" query <code>National Cancer Institute</code> <code>query.lead</code> Searches in \"LeadSponsorName\" field <code>MD Anderson</code> <code>query.id</code> \"Study IDs\" query (OR semantics) <code>NCT04267848</code> <code>filter.overallStatus</code> Comma-separated list of statuses <code>NOT_YET_RECRUITING,RECRUITING</code> <code>filter.geo</code> Geo-location filter <code>distance(39.0035707,-77.1013313,50mi)</code> <code>filter.ids</code> Filter by NCT IDs (AND semantics) <code>NCT04852770,NCT01728545</code> <code>filter.advanced</code> Advanced filter query <code>AREA[StartDate]2022</code> <code>sort</code> Sort order <code>LastUpdatePostDate:desc</code> <code>fields</code> Fields to return <code>NCTId,BriefTitle,OverallStatus,HasResults</code> <p>| <code>countTotal</code> | Count total number of studies | <code>true</code> or <code>false</code> |</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies?query.cond=Melanoma&amp;query.intr=BRAF\"\n</code></pre>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#study-details-api","title":"Study Details API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies/{NCT_ID}</code></p> <p>This endpoint retrieves detailed information about a specific clinical trial.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#example-request_1","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies/NCT04267848\"\n</code></pre>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#response-modules","title":"Response Modules","text":"<p>The API response contains various modules of information:</p> <ul> <li>protocolSection: Basic study information, eligibility criteria, and   design</li> <li>resultsSection: Study outcomes and results (when available)</li> <li>documentSection: Related documents</li> <li>derivedSection: Derived data elements</li> <li>annotationsSection: Additional annotations</li> </ul>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#implementation-details","title":"Implementation Details","text":""},{"location":"backend-services-reference/04-clinicaltrials-gov/#nct-id-filtering-semantics","title":"NCT ID Filtering Semantics","text":"<p>BioMCP uses intelligent filtering when NCT IDs are provided:</p> <ul> <li>ID-only mode: When NCT IDs are the only filter criteria, <code>query.id</code> is used for fast direct lookup</li> <li>Intersection mode: When NCT IDs are combined with other filters (conditions, interventions, etc.), <code>filter.ids</code> is used to ensure results match ALL criteria</li> </ul> <p>This ensures that specifying NCT IDs restricts results rather than expanding them.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#query-building","title":"Query Building","text":"<p>When constructing API queries, parameters must be properly formatted according to the API documentation.</p> <p>For implementation details on query building in BioMCP, see the HTTP Client Developer Guide.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#response-parsing","title":"Response Parsing","text":"<p>The API returns data in JSON format (or CSV if specified). Key sections in the response include:</p> <ul> <li><code>protocolSection</code>: Contains study protocol details</li> <li><code>identificationModule</code>: Basic identifiers including NCT ID and title</li> <li><code>statusModule</code>: Current recruitment status and study dates</li> <li><code>sponsorCollaboratorsModule</code>: Information about sponsors and     collaborators</li> <li><code>designModule</code>: Study design information including interventions</li> <li><code>eligibilityModule</code>: Inclusion/exclusion criteria and eligible population</li> <li><code>contactsLocationsModule</code>: Study sites and contact information</li> <li><code>referencesModule</code>: Related publications</li> </ul>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#error-handling","title":"Error Handling","text":"<p>The API returns standard HTTP status codes. Common error scenarios include:</p> <ul> <li>404: Trial not found</li> <li>429: Rate limit exceeded</li> <li>400: Invalid query parameters</li> </ul> <p>For implementation details on error handling in BioMCP, see the Error Handling Developer Guide.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#authentication","title":"Authentication","text":"<p>The ClinicalTrials.gov API is public and does not require authentication for basic usage. However, there are rate limits in place.</p>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Rate Limit: Approximately 50 requests per minute per IP address</li> <li>Caching: Implement caching to minimize repeated requests</li> <li> <p>Pagination: For large result sets, use the pagination functionality with</p> </li> <li> <p>Focused Queries: Use specific search terms rather than broad queries to   get more relevant results</p> </li> <li>Field Selection: Use the fields parameter to request only the data you   need</li> </ul>"},{"location":"backend-services-reference/04-clinicaltrials-gov/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the ClinicalTrials.gov API Documentation</p>"},{"location":"backend-services-reference/05-nci-cts-api/","title":"NCI Clinical Trials Search API Reference","text":"<p>The National Cancer Institute's Clinical Trials Search (CTS) API provides advanced search capabilities for cancer clinical trials with enhanced filtering options beyond ClinicalTrials.gov.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#overview","title":"Overview","text":"<p>The NCI CTS API offers:</p> <ul> <li>Advanced biomarker and mutation filtering</li> <li>Comprehensive organization database</li> <li>Intervention and drug vocabularies</li> <li>Disease terminology with NCI Thesaurus integration</li> <li>Prior therapy and eligibility criteria</li> </ul> <p>Base URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/</code></p>"},{"location":"backend-services-reference/05-nci-cts-api/#authentication","title":"Authentication","text":"<p>An API key is required for all endpoints.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#obtaining-an-api-key","title":"Obtaining an API Key","text":"<ol> <li>Visit https://clinicaltrialsapi.cancer.gov/</li> <li>Click \"Get API Key\"</li> <li>Complete registration</li> <li>Key is emailed immediately</li> </ol>"},{"location":"backend-services-reference/05-nci-cts-api/#using-the-api-key","title":"Using the API Key","text":"<p>Include in request headers:</p> <pre><code>X-API-KEY: your-api-key-here\n</code></pre> <p>Or as query parameter:</p> <pre><code>?api_key=your-api-key-here\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#core-endpoints","title":"Core Endpoints","text":""},{"location":"backend-services-reference/05-nci-cts-api/#1-trial-search","title":"1. Trial Search","text":"<pre><code>GET /trials\n</code></pre> <p>Search for clinical trials with advanced filtering.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#parameters","title":"Parameters","text":"<p>Basic Search:</p> <ul> <li><code>keyword</code>: General text search</li> <li><code>nct_id</code>: Specific NCT identifiers</li> <li><code>diseases</code>: Disease/condition names</li> <li><code>interventions</code>: Treatment names</li> </ul> <p>Advanced Filters:</p> <ul> <li><code>biomarkers</code>: Required biomarkers/mutations</li> <li><code>prior_therapy_required</code>: true/false</li> <li><code>accepts_brain_mets</code>: true/false</li> <li><code>min_age</code>: Minimum age in years</li> <li><code>max_age</code>: Maximum age in years</li> </ul> <p>Pagination:</p> <ul> <li><code>size</code>: Results per page (max 50)</li> <li><code>from</code>: Starting index (offset)</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrialsapi.cancer.gov/api/v2/trials\" \\\n  -H \"X-API-KEY: your-key\" \\\n  -d \"diseases=melanoma\" \\\n  -d \"biomarkers=BRAF V600E\" \\\n  -d \"accepts_brain_mets=true\" \\\n  -d \"size=10\"\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#response-format","title":"Response Format","text":"<pre><code>{\n  \"total\": 42,\n  \"trials\": [\n    {\n      \"nct_id\": \"NCT04280705\",\n      \"brief_title\": \"BRAF/MEK Inhibitor Combination\",\n      \"current_trial_status\": \"Active\",\n      \"phase\": \"Phase II\",\n      \"biomarker_eligibility\": [\n        {\n          \"gene\": \"BRAF\",\n          \"variant\": \"V600E\",\n          \"required\": true\n        }\n      ],\n      \"sites\": [...]\n    }\n  ]\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#2-trial-details","title":"2. Trial Details","text":"<pre><code>GET /trials/{nct_id}\n</code></pre> <p>Get comprehensive information about a specific trial.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#example-request_1","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrialsapi.cancer.gov/api/v2/trials/NCT04280705\" \\\n  -H \"X-API-KEY: your-key\"\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#3-organization-search","title":"3. Organization Search","text":"<pre><code>GET /organizations\n</code></pre> <p>Search for cancer research organizations and treatment centers.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#parameters_1","title":"Parameters","text":"<ul> <li><code>name</code>: Organization name</li> <li><code>org_city</code>: City location</li> <li><code>org_state_or_province</code>: State/province</li> <li><code>org_country</code>: Country</li> <li><code>org_type</code>: Type (e.g., \"NCI-designated\", \"academic\")</li> </ul> <p>Important: Always use city AND state together to avoid Elasticsearch errors.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#example-request_2","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrialsapi.cancer.gov/api/v2/organizations\" \\\n  -H \"X-API-KEY: your-key\" \\\n  -d \"org_city=Houston\" \\\n  -d \"org_state_or_province=TX\"\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#4-organization-details","title":"4. Organization Details","text":"<pre><code>GET /organizations/{org_id}\n</code></pre> <p>Get details about a specific organization.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#5-intervention-search","title":"5. Intervention Search","text":"<pre><code>GET /interventions\n</code></pre> <p>Search for drugs, devices, and procedures used in trials.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#parameters_2","title":"Parameters","text":"<ul> <li><code>name</code>: Intervention name</li> <li><code>type</code>: Drug, Device, Procedure, etc.</li> <li><code>synonyms</code>: Include synonym matches (default: true)</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#example-request_3","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrialsapi.cancer.gov/api/v2/interventions\" \\\n  -H \"X-API-KEY: your-key\" \\\n  -d \"name=pembrolizumab\" \\\n  -d \"type=Drug\"\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#6-intervention-details","title":"6. Intervention Details","text":"<pre><code>GET /interventions/{intervention_id}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#7-biomarker-search","title":"7. Biomarker Search","text":"<pre><code>GET /biomarkers\n</code></pre> <p>Search for biomarkers used in trial eligibility criteria.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#parameters_3","title":"Parameters","text":"<ul> <li><code>name</code>: Biomarker name</li> <li><code>type</code>: mutation, expression, etc.</li> <li><code>gene</code>: Associated gene symbol</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#8-disease-search","title":"8. Disease Search","text":"<pre><code>GET /diseases\n</code></pre> <p>Search NCI's controlled vocabulary of cancer conditions.</p>"},{"location":"backend-services-reference/05-nci-cts-api/#parameters_4","title":"Parameters","text":"<ul> <li><code>name</code>: Disease name</li> <li><code>include_synonyms</code>: Include synonym matches</li> <li><code>category</code>: Disease category</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#advanced-features","title":"Advanced Features","text":""},{"location":"backend-services-reference/05-nci-cts-api/#biomarker-based-trial-search","title":"Biomarker-Based Trial Search","text":"<p>Find trials requiring specific mutations:</p> <pre><code>params = {\n    \"diseases\": \"non-small cell lung cancer\",\n    \"biomarkers\": [\"EGFR L858R\", \"EGFR exon 19 deletion\"],\n    \"prior_therapy_required\": False,\n    \"accepts_brain_mets\": True\n}\n\nresponse = requests.get(\n    \"https://clinicaltrialsapi.cancer.gov/api/v2/trials\",\n    headers={\"X-API-KEY\": api_key},\n    params=params\n)\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#complex-eligibility-queries","title":"Complex Eligibility Queries","text":"<pre><code># Find trials with specific eligibility\nparams = {\n    \"diseases\": \"melanoma\",\n    \"biomarkers\": \"BRAF V600E\",\n    \"min_age\": 18,\n    \"max_age\": 75,\n    \"prior_therapy\": \"vemurafenib\",  # Exclude if prior vemurafenib\n    \"performance_status\": \"0-1\"       # ECOG 0 or 1\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#organization-network-analysis","title":"Organization Network Analysis","text":"<pre><code># Find all NCI-designated centers in a region\nparams = {\n    \"org_type\": \"NCI-designated\",\n    \"org_state_or_province\": [\"CA\", \"OR\", \"WA\"]  # West Coast\n}\n\norgs = requests.get(\n    \"https://clinicaltrialsapi.cancer.gov/api/v2/organizations\",\n    headers={\"X-API-KEY\": api_key},\n    params=params\n)\n\n# Get trials at each center\nfor org in orgs.json()[\"organizations\"]:\n    trials = requests.get(\n        f\"https://clinicaltrialsapi.cancer.gov/api/v2/trials\",\n        headers={\"X-API-KEY\": api_key},\n        params={\"site_org_id\": org[\"id\"]}\n    )\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#data-models","title":"Data Models","text":""},{"location":"backend-services-reference/05-nci-cts-api/#trial-object","title":"Trial Object","text":"<pre><code>{\n  \"nct_id\": \"NCT04280705\",\n  \"brief_title\": \"Study Title\",\n  \"official_title\": \"Full Protocol Title\",\n  \"current_trial_status\": \"Active\",\n  \"phase\": \"Phase II\",\n  \"study_type\": \"Interventional\",\n  \"primary_purpose\": \"Treatment\",\n  \"diseases\": [\n    {\n      \"name\": \"Melanoma\",\n      \"nci_thesaurus_id\": \"C0025202\"\n    }\n  ],\n  \"biomarker_eligibility\": [\n    {\n      \"gene\": \"BRAF\",\n      \"variant\": \"V600E\",\n      \"required\": true,\n      \"inclusion\": true\n    }\n  ],\n  \"arms\": [...],\n  \"sites\": [...]\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#organization-object","title":"Organization Object","text":"<pre><code>{\n  \"org_id\": \"NCI-2021-00123\",\n  \"name\": \"MD Anderson Cancer Center\",\n  \"type\": \"NCI-designated\",\n  \"address\": {\n    \"city\": \"Houston\",\n    \"state\": \"TX\",\n    \"country\": \"United States\",\n    \"postal_code\": \"77030\"\n  },\n  \"contact\": {\n    \"name\": \"Clinical Trials Office\",\n    \"phone\": \"1-800-392-1611\",\n    \"email\": \"clinical.trials@mdanderson.org\"\n  },\n  \"active_trials_count\": 1250\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#error-handling","title":"Error Handling","text":""},{"location":"backend-services-reference/05-nci-cts-api/#common-errors","title":"Common Errors","text":""},{"location":"backend-services-reference/05-nci-cts-api/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"error\": \"Invalid or missing API key\"\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"error\": \"Invalid parameter combination\",\n  \"details\": \"Must specify both city AND state for location search\"\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#429-rate-limited","title":"429 Rate Limited","text":"<pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"retry_after\": 3600\n}\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#best-practices","title":"Best Practices","text":"<ol> <li>Always use city AND state together for location searches</li> <li>Handle missing totals - the API may not return total counts with size parameter</li> <li>Use specific searches - broad queries may timeout</li> <li>Implement retry logic for rate limits</li> </ol>"},{"location":"backend-services-reference/05-nci-cts-api/#rate-limits","title":"Rate Limits","text":"<ul> <li>With API Key: 1,000 requests/day</li> <li>Burst Rate: 10 requests/second</li> <li>Without Key: Not supported</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#differences-from-clinicaltrialsgov","title":"Differences from ClinicalTrials.gov","text":""},{"location":"backend-services-reference/05-nci-cts-api/#enhanced-features","title":"Enhanced Features","text":"<ul> <li>Biomarker search: Mutation-specific queries</li> <li>Prior therapy: Exclude based on previous treatments</li> <li>Brain metastases: Specific acceptance criteria</li> <li>Performance status: ECOG/Karnofsky filtering</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#limitations","title":"Limitations","text":"<ul> <li>Cancer trials only: Limited to oncology studies</li> <li>No offset pagination: Must use size parameter carefully</li> <li>Location parameters: Different naming (org_ prefix)</li> </ul>"},{"location":"backend-services-reference/05-nci-cts-api/#integration-examples","title":"Integration Examples","text":""},{"location":"backend-services-reference/05-nci-cts-api/#example-1-precision-medicine-search","title":"Example 1: Precision Medicine Search","text":"<pre><code>async def find_precision_trials(mutation, cancer_type, location):\n    \"\"\"Find trials for specific mutation in cancer type near location\"\"\"\n\n    # Search for trials\n    trial_params = {\n        \"diseases\": cancer_type,\n        \"biomarkers\": mutation,\n        \"accepts_brain_mets\": True,\n        \"size\": 50\n    }\n\n    trials = await fetch_nci_api(\"trials\", trial_params)\n\n    # Filter by location if provided\n    if location:\n        nearby_trials = []\n        for trial in trials[\"trials\"]:\n            for site in trial.get(\"sites\", []):\n                distance = calculate_distance(location, site[\"coordinates\"])\n                if distance &lt; 100:  # 100 miles\n                    nearby_trials.append(trial)\n                    break\n\n        return nearby_trials\n\n    return trials[\"trials\"]\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#example-2-biomarker-driven-pipeline","title":"Example 2: Biomarker-Driven Pipeline","text":"<pre><code>def biomarker_trial_pipeline(gene, variant):\n    \"\"\"Complete pipeline from variant to trials\"\"\"\n\n    # 1. Search biomarkers\n    biomarkers = requests.get(\n        \"https://clinicaltrialsapi.cancer.gov/api/v2/biomarkers\",\n        headers={\"X-API-KEY\": api_key},\n        params={\"gene\": gene, \"name\": variant}\n    ).json()\n\n    # 2. Get associated trials\n    all_trials = []\n    for biomarker in biomarkers.get(\"biomarkers\", []):\n        trials = requests.get(\n            \"https://clinicaltrialsapi.cancer.gov/api/v2/trials\",\n            headers={\"X-API-KEY\": api_key},\n            params={\"biomarker_id\": biomarker[\"id\"]}\n        ).json()\n        all_trials.extend(trials.get(\"trials\", []))\n\n    # 3. Deduplicate and sort by phase\n    unique_trials = {t[\"nct_id\"]: t for t in all_trials}.values()\n    return sorted(unique_trials, key=lambda x: x.get(\"phase\", \"\"))\n</code></pre>"},{"location":"backend-services-reference/05-nci-cts-api/#support-resources","title":"Support Resources","text":"<ul> <li>API Documentation: https://clinicaltrialsapi.cancer.gov/</li> <li>Support Email: NCICTSApiSupport@mail.nih.gov</li> <li>Status Page: https://status.cancer.gov/</li> <li>Terms of Use: https://clinicaltrialsapi.cancer.gov/terms</li> </ul>"},{"location":"backend-services-reference/06-pubtator3/","title":"PubTator3 API","text":"<p>This document describes the PubTator3 API used by BioMCP for searching biomedical literature and retrieving article details with annotations. Understanding this API provides context for how BioMCP's article commands function.</p>"},{"location":"backend-services-reference/06-pubtator3/#overview","title":"Overview","text":"<p>The PubTator3 API provides a way to search for and retrieve biomedical articles with entity annotations. This document outlines the API implementation details. PubTator3 is a web-based tool that provides annotations of biomedical entities in PubMed abstracts and PMC full-text articles. BioMCP uses the PubTator3 API to search for and retrieve biomedical articles and their annotated entities ( genes, variants, diseases, chemicals, etc.).</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Articles CLI Documentation.</p>"},{"location":"backend-services-reference/06-pubtator3/#usage-guide","title":"Usage Guide","text":"<p>For practical examples of searching articles with PubTator3, see How to Find Articles and cBioPortal Data.</p>"},{"location":"backend-services-reference/06-pubtator3/#api-workflow","title":"API Workflow","text":"<p>The PubTator3 integration follows a three-step workflow:</p> <ol> <li>Entity Autocomplete: Get standardized entity identifiers</li> <li>Search: Find articles using entity identifiers and keywords</li> <li>Fetch: Retrieve full article details by PMID</li> </ol>"},{"location":"backend-services-reference/06-pubtator3/#api-endpoints","title":"API Endpoints","text":""},{"location":"backend-services-reference/06-pubtator3/#entity-autocomplete-api","title":"Entity Autocomplete API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/</code></p> <p>This endpoint helps normalize entity names to their standard identifiers, improving search precision.</p>"},{"location":"backend-services-reference/06-pubtator3/#parameters","title":"Parameters","text":"Parameter Description Example <code>query</code> Text to autocomplete <code>BRAF</code> <code>concept</code> Entity type <code>GENE</code>, <code>CHEMICAL</code>, <code>DISEASE</code>, etc. <code>limit</code> Number of results to return <code>2</code>"},{"location":"backend-services-reference/06-pubtator3/#example-request-and-response","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/?query=BRAF&amp;concept=GENE&amp;limit=2\"\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"_id\": \"@GENE_BRAF\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAF\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAF&lt;/m&gt;\"\n  },\n  {\n    \"_id\": \"@GENE_BRAFP1\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAFP1\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAFP1&lt;/m&gt;\"\n  }\n]\n</code></pre>"},{"location":"backend-services-reference/06-pubtator3/#entity-search-api","title":"Entity Search API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/</code></p> <p>This endpoint allows searching for PMIDs (PubMed IDs) based on entity identifiers and keywords.</p>"},{"location":"backend-services-reference/06-pubtator3/#parameters_1","title":"Parameters","text":"Parameter Description Example <code>text</code> Entity identifier or text query <code>@CHEMICAL_remdesivir</code>"},{"location":"backend-services-reference/06-pubtator3/#example-request-and-response_1","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/?text=@CHEMICAL_remdesivir\"\n</code></pre> <p>Response (truncated):</p> <pre><code>{\n  \"results\": [\n    {\n      \"_id\": \"37711410\",\n      \"pmid\": 37711410,\n      \"title\": \"Remdesivir.\",\n      \"journal\": \"Hosp Pharm\",\n      \"authors\": [\"Levien TL\", \"Baker DE\"],\n      \"date\": \"2023-10-01T00:00:00Z\",\n      \"doi\": \"10.1177/0018578721999804\",\n      \"meta_date_publication\": \"2023 Oct\",\n      \"meta_volume\": \"58\"\n    }\n    // More results...\n  ]\n}\n</code></pre>"},{"location":"backend-services-reference/06-pubtator3/#article-fetch-api","title":"Article Fetch API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson</code></p> <p>This endpoint retrieves detailed information about specific articles, including annotations.</p>"},{"location":"backend-services-reference/06-pubtator3/#parameters_2","title":"Parameters","text":"Parameter Description Example <code>pmids</code> List of PubMed IDs to retrieve <code>29355051</code> <code>full_text</code> Whether to include full text (when available) <code>true</code>"},{"location":"backend-services-reference/06-pubtator3/#example-request","title":"Example Request","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson?pmids=29355051&amp;full=true\"\n</code></pre> <p>Response format (truncated):</p> <pre><code>{\n  \"PubTator3\": [\n    {\n      \"_id\": \"29355051|PMC6142073\",\n      \"id\": \"6142073\",\n      \"infons\": {},\n      \"passages\": [\n        {\n          \"infons\": {\n            \"name_3\": \"surname:Hu;given-names:Minghua\",\n            \"name_2\": \"surname:Luo;given-names:Xia\",\n            \"name_1\": \"surname:Luo;given-names:Shuang\",\n            \"article-id_pmid\": \"29355051\"\n            // More metadata...\n          }\n        }\n        // More passages...\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"backend-services-reference/06-pubtator3/#entity-types","title":"Entity Types","text":"<p>PubTator3 annotates several types of biomedical entities:</p> <ol> <li>Genes/Proteins: Gene or protein names (e.g., BRAF, TP53)</li> <li>Genetic Variants: Genetic variations (e.g., BRAF V600E)</li> <li>Diseases: Disease names and conditions (e.g., Melanoma)</li> <li>Chemicals/Drugs: Chemical substances or drugs (e.g., Vemurafenib)</li> </ol>"},{"location":"backend-services-reference/06-pubtator3/#integration-strategy-for-biomcp","title":"Integration Strategy for BioMCP","text":"<p>The recommended workflow for integrating with PubTator3 in BioMCP is:</p> <ol> <li>Entity Normalization: Use the autocomplete API to convert user-provided    entity names to standardized identifiers</li> <li>Literature Search: Use the search API with these identifiers to find    relevant PMIDs</li> <li>Data Retrieval: Fetch detailed article data with annotations using the    fetch API</li> </ol> <p>This workflow ensures consistent entity handling and optimal search results.</p>"},{"location":"backend-services-reference/06-pubtator3/#authentication","title":"Authentication","text":"<p>The PubTator3 API is public and does not require authentication for basic usage. However, there are rate limits in place to prevent abuse.</p>"},{"location":"backend-services-reference/06-pubtator3/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Request Limits: Approximately 30 requests per minute</li> <li>Batch Requests: For article retrieval, batch multiple PMIDs in a single   request</li> <li>Caching: Implement caching to minimize repeated requests</li> <li>Specific Queries: Use specific entity names rather than general terms for   better results</li> </ul>"},{"location":"backend-services-reference/06-pubtator3/#error-handling","title":"Error Handling","text":"<p>Common error responses:</p> <ul> <li>400: Invalid parameters</li> <li>404: Articles not found</li> <li>429: Rate limit exceeded</li> <li>500: Server error</li> </ul>"},{"location":"backend-services-reference/06-pubtator3/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the PubTator3 API Documentation.</p>"},{"location":"backend-services-reference/07-alphagenome/","title":"AlphaGenome API Reference","text":"<p>Google DeepMind's AlphaGenome provides AI-powered predictions of variant effects on gene regulation, chromatin accessibility, and splicing.</p>"},{"location":"backend-services-reference/07-alphagenome/#usage-guide","title":"Usage Guide","text":"<p>For a step-by-step tutorial on using AlphaGenome for variant effect prediction, see How to Predict Variant Effects with AlphaGenome.</p>"},{"location":"backend-services-reference/07-alphagenome/#overview","title":"Overview","text":"<p>AlphaGenome predicts regulatory effects of genetic variants by analyzing:</p> <ul> <li>Gene expression changes in nearby genes</li> <li>Chromatin accessibility alterations</li> <li>Splicing pattern modifications</li> <li>Enhancer and promoter activity</li> <li>Transcription factor binding</li> <li>3D chromatin interactions</li> </ul> <p>Note: AlphaGenome is an optional integration requiring separate installation and API key.</p>"},{"location":"backend-services-reference/07-alphagenome/#authentication","title":"Authentication","text":""},{"location":"backend-services-reference/07-alphagenome/#obtaining-an-api-key","title":"Obtaining an API Key","text":"<ol> <li>Visit https://deepmind.google.com/science/alphagenome</li> <li>Register for non-commercial research use</li> <li>Accept terms of service</li> <li>Receive API key via email</li> </ol>"},{"location":"backend-services-reference/07-alphagenome/#api-key-usage","title":"API Key Usage","text":"<p>Environment Variable:</p> <pre><code>export ALPHAGENOME_API_KEY=\"your-key-here\"\n</code></pre> <p>Per-Request:</p> <pre><code>result = alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    api_key=\"your-key-here\"  # Overrides environment\n)\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#installation","title":"Installation","text":"<p>AlphaGenome requires separate installation:</p> <pre><code># Clone and install\ngit clone https://github.com/google-deepmind/alphagenome.git\ncd alphagenome\npip install .\n\n# Verify installation\npython -c \"import alphagenome; print('AlphaGenome installed')\"\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#api-interface","title":"API Interface","text":""},{"location":"backend-services-reference/07-alphagenome/#prediction-endpoint","title":"Prediction Endpoint","text":"<p>The AlphaGenome API is accessed through the BioMCP <code>alphagenome_predictor</code> tool.</p>"},{"location":"backend-services-reference/07-alphagenome/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>chromosome</code> str Yes Chromosome (e.g., \"chr7\") <code>position</code> int Yes 1-based genomic position <code>reference</code> str Yes Reference allele <code>alternate</code> str Yes Alternate allele <code>interval_size</code> int No Analysis window (default: 131072) <code>tissue_types</code> list[str] No UBERON tissue codes <code>significance_threshold</code> float No Log2FC threshold (default: 0.5) <code>api_key</code> str No AlphaGenome API key"},{"location":"backend-services-reference/07-alphagenome/#interval-sizes","title":"Interval Sizes","text":"Size Use Case Description 2,048 Promoter TSS and promoter variants 16,384 Local Proximal regulatory elements 131,072 Standard Enhancer-promoter interactions 524,288 Long-range Distal regulatory elements 1,048,576 TAD-level Topological domain effects"},{"location":"backend-services-reference/07-alphagenome/#tissue-codes","title":"Tissue Codes","text":"<p>AlphaGenome supports tissue-specific predictions using UBERON ontology:</p> Tissue UBERON Code Description Breast UBERON:0000310 Mammary gland tissue Liver UBERON:0002107 Hepatic tissue Prostate UBERON:0002367 Prostate gland Brain UBERON:0000955 Neural tissue Lung UBERON:0002048 Pulmonary tissue Colon UBERON:0001155 Colonic mucosa"},{"location":"backend-services-reference/07-alphagenome/#response-format","title":"Response Format","text":""},{"location":"backend-services-reference/07-alphagenome/#gene-expression-predictions","title":"Gene Expression Predictions","text":"<pre><code>{\n  \"gene_expression\": [\n    {\n      \"gene_name\": \"BRAF\",\n      \"gene_id\": \"ENSG00000157764\",\n      \"distance_to_tss\": 1234,\n      \"log2_fold_change\": 1.25,\n      \"confidence\": 0.89,\n      \"tissue\": \"UBERON:0000310\"\n    }\n  ]\n}\n</code></pre> <p>Interpretation:</p> <ul> <li><code>log2_fold_change &gt; 1.0</code>: Strong increase (2x+)</li> <li><code>log2_fold_change &gt; 0.5</code>: Moderate increase</li> <li><code>log2_fold_change &lt; -1.0</code>: Strong decrease (0.5x)</li> <li><code>log2_fold_change &lt; -0.5</code>: Moderate decrease</li> </ul>"},{"location":"backend-services-reference/07-alphagenome/#chromatin-accessibility","title":"Chromatin Accessibility","text":"<pre><code>{\n  \"chromatin_accessibility\": [\n    {\n      \"region_type\": \"enhancer\",\n      \"coordinates\": \"chr7:140450000-140451000\",\n      \"accessibility_change\": 0.75,\n      \"peak_height_change\": 1.2,\n      \"tissue\": \"UBERON:0000310\"\n    }\n  ]\n}\n</code></pre> <p>Interpretation:</p> <ul> <li>Positive values: Increased accessibility (open chromatin)</li> <li>Negative values: Decreased accessibility (closed chromatin)</li> </ul>"},{"location":"backend-services-reference/07-alphagenome/#splicing-predictions","title":"Splicing Predictions","text":"<pre><code>{\n  \"splicing\": [\n    {\n      \"event_type\": \"exon_skipping\",\n      \"affected_exon\": \"ENST00000288602.6:exon14\",\n      \"delta_psi\": -0.35,\n      \"splice_site_strength_change\": -2.1\n    }\n  ]\n}\n</code></pre> <p>PSI (Percent Spliced In):</p> <ul> <li><code>delta_psi &gt; 0</code>: Increased exon inclusion</li> <li><code>delta_psi &lt; 0</code>: Increased exon skipping</li> <li><code>|delta_psi| &gt; 0.1</code>: Biologically significant</li> </ul>"},{"location":"backend-services-reference/07-alphagenome/#usage-examples","title":"Usage Examples","text":""},{"location":"backend-services-reference/07-alphagenome/#basic-prediction","title":"Basic Prediction","text":"<pre><code># Predict BRAF V600E effects\nresult = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\"\n)\n\n# Process results\nfor gene in result.gene_expression:\n    if abs(gene.log2_fold_change) &gt; 1.0:\n        print(f\"{gene.gene_name}: {gene.log2_fold_change:.2f} log2FC\")\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#tissue-specific-analysis","title":"Tissue-Specific Analysis","text":"<pre><code># Compare effects across tissues\ntissues = {\n    \"breast\": \"UBERON:0000310\",\n    \"lung\": \"UBERON:0002048\",\n    \"brain\": \"UBERON:0000955\"\n}\n\nresults = {}\nfor tissue_name, tissue_code in tissues.items():\n    results[tissue_name] = await alphagenome_predictor(\n        chromosome=\"chr17\",\n        position=7577120,\n        reference=\"G\",\n        alternate=\"A\",\n        tissue_types=[tissue_code]\n    )\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#promoter-variant-analysis","title":"Promoter Variant Analysis","text":"<pre><code># Use small window for promoter variants\nresult = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=5569100,  # Near ACTB promoter\n    reference=\"C\",\n    alternate=\"T\",\n    interval_size=2048  # 2kb window\n)\n\n# Check for promoter effects\npromoter_effects = [\n    g for g in result.gene_expression\n    if abs(g.distance_to_tss) &lt; 1000\n]\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#enhancer-variant-analysis","title":"Enhancer Variant Analysis","text":"<pre><code># Use larger window for enhancer variants\nresult = await alphagenome_predictor(\n    chromosome=\"chr8\",\n    position=128748315,  # MYC enhancer region\n    reference=\"G\",\n    alternate=\"A\",\n    interval_size=524288  # 512kb window\n)\n\n# Analyze chromatin changes\nenhancer_changes = [\n    c for c in result.chromatin_accessibility\n    if c.region_type == \"enhancer\" and abs(c.accessibility_change) &gt; 0.5\n]\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#best-practices","title":"Best Practices","text":""},{"location":"backend-services-reference/07-alphagenome/#1-choose-appropriate-interval-size","title":"1. Choose Appropriate Interval Size","text":"<pre><code>def select_interval_size(variant_type):\n    \"\"\"Select interval based on variant type\"\"\"\n    intervals = {\n        \"promoter\": 2048,\n        \"splice_site\": 16384,\n        \"enhancer\": 131072,\n        \"intergenic\": 524288,\n        \"structural\": 1048576\n    }\n    return intervals.get(variant_type, 131072)\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#2-handle-missing-predictions","title":"2. Handle Missing Predictions","text":"<pre><code># Not all variants affect gene expression\nif not result.gene_expression:\n    print(\"No gene expression changes predicted\")\n    # Check chromatin or splicing effects instead\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#3-filter-by-significance","title":"3. Filter by Significance","text":"<pre><code># Focus on significant changes\nsignificant_genes = [\n    g for g in result.gene_expression\n    if abs(g.log2_fold_change) &gt; significance_threshold\n    and g.confidence &gt; 0.8\n]\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#4-validate-input","title":"4. Validate Input","text":"<pre><code>def validate_variant(chr, pos, ref, alt):\n    \"\"\"Validate variant format\"\"\"\n    # Check chromosome format\n    if not chr.startswith(\"chr\"):\n        raise ValueError(\"Chromosome must start with 'chr'\")\n\n    # Check alleles\n    valid_bases = set(\"ACGT\")\n    if ref not in valid_bases or alt not in valid_bases:\n        raise ValueError(\"Invalid nucleotide\")\n\n    # Check position\n    if pos &lt; 1:\n        raise ValueError(\"Position must be 1-based\")\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#integration-patterns","title":"Integration Patterns","text":""},{"location":"backend-services-reference/07-alphagenome/#vus-classification-pipeline","title":"VUS Classification Pipeline","text":"<pre><code>async def classify_vus(variant):\n    \"\"\"Classify variant of unknown significance\"\"\"\n\n    # 1. Predict regulatory effects\n    predictions = await alphagenome_predictor(\n        chromosome=variant.chr,\n        position=variant.pos,\n        reference=variant.ref,\n        alternate=variant.alt\n    )\n\n    # 2. Score impact\n    max_expression = max(\n        abs(g.log2_fold_change) for g in predictions.gene_expression\n    ) if predictions.gene_expression else 0\n\n    max_chromatin = max(\n        abs(c.accessibility_change) for c in predictions.chromatin_accessibility\n    ) if predictions.chromatin_accessibility else 0\n\n    # 3. Classify\n    if max_expression &gt; 2.0 or max_chromatin &gt; 1.5:\n        return \"High regulatory impact\"\n    elif max_expression &gt; 1.0 or max_chromatin &gt; 0.75:\n        return \"Moderate regulatory impact\"\n    else:\n        return \"Low regulatory impact\"\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#multi-variant-analysis","title":"Multi-Variant Analysis","text":"<pre><code>async def analyze_variant_set(variants, target_gene):\n    \"\"\"Analyze multiple variants affecting a gene\"\"\"\n\n    results = []\n    for variant in variants:\n        prediction = await alphagenome_predictor(\n            chromosome=variant[\"chr\"],\n            position=variant[\"pos\"],\n            reference=variant[\"ref\"],\n            alternate=variant[\"alt\"]\n        )\n\n        # Find target gene effect\n        for gene in prediction.gene_expression:\n            if gene.gene_name == target_gene:\n                results.append({\n                    \"variant\": f\"{variant['chr']}:{variant['pos']}\",\n                    \"effect\": gene.log2_fold_change,\n                    \"confidence\": gene.confidence\n                })\n                break\n\n    # Sort by effect size\n    return sorted(results, key=lambda x: abs(x[\"effect\"]), reverse=True)\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#limitations","title":"Limitations","text":""},{"location":"backend-services-reference/07-alphagenome/#technical-limitations","title":"Technical Limitations","text":"<ul> <li>Species: Human only (GRCh38)</li> <li>Variant Types: SNVs only (no indels/SVs)</li> <li>Sequence Context: Requires reference match</li> <li>Computation Time: 1-3 seconds per variant</li> </ul>"},{"location":"backend-services-reference/07-alphagenome/#biological-limitations","title":"Biological Limitations","text":"<ul> <li>Cell Type: Predictions are tissue-specific approximations</li> <li>Environmental Factors: Does not account for conditions</li> <li>Epistasis: Single variant effects only</li> <li>Temporal: No developmental stage consideration</li> </ul>"},{"location":"backend-services-reference/07-alphagenome/#error-handling","title":"Error Handling","text":""},{"location":"backend-services-reference/07-alphagenome/#common-errors","title":"Common Errors","text":"<pre><code>try:\n    result = await alphagenome_predictor(...)\nexcept AlphaGenomeError as e:\n    if \"API key\" in str(e):\n        # Handle missing/invalid key\n        pass\n    elif \"Invalid sequence\" in str(e):\n        # Handle sequence errors\n        pass\n    elif \"Rate limit\" in str(e):\n        # Handle rate limiting\n        pass\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#retry-logic","title":"Retry Logic","text":"<pre><code>async def predict_with_retry(params, max_retries=3):\n    \"\"\"Retry on transient failures\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return await alphagenome_predictor(**params)\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            await asyncio.sleep(2 ** attempt)  # Exponential backoff\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#performance-optimization","title":"Performance Optimization","text":""},{"location":"backend-services-reference/07-alphagenome/#batch-processing","title":"Batch Processing","text":"<pre><code>async def batch_predict(variants, batch_size=10):\n    \"\"\"Process variants in batches\"\"\"\n    results = []\n\n    for i in range(0, len(variants), batch_size):\n        batch = variants[i:i + batch_size]\n        batch_results = await asyncio.gather(*[\n            alphagenome_predictor(**v) for v in batch\n        ])\n        results.extend(batch_results)\n\n        # Rate limiting\n        if i + batch_size &lt; len(variants):\n            await asyncio.sleep(1)\n\n    return results\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#caching-strategy","title":"Caching Strategy","text":"<pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=1000)\ndef get_cached_prediction(chr, pos, ref, alt, interval):\n    \"\"\"Cache predictions for repeated queries\"\"\"\n    return alphagenome_predictor(\n        chromosome=chr,\n        position=pos,\n        reference=ref,\n        alternate=alt,\n        interval_size=interval\n    )\n</code></pre>"},{"location":"backend-services-reference/07-alphagenome/#support-resources","title":"Support Resources","text":"<ul> <li>Documentation: AlphaGenome GitHub</li> <li>Paper: Nature Publication</li> <li>Support: Via GitHub issues</li> <li>Terms: Non-commercial research use only</li> </ul>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/","title":"AI-Assisted Clinical Trial Search: How BioMCP Transforms Research","text":"<p>Finding the right clinical trial for a research project has traditionally been a complex process requiring specialized knowledge of database syntax and medical terminology. BioMCP is changing this landscape by making clinical trial data accessible through natural language conversation.</p> <p>Video Link: </p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#breaking-down-the-barriers-to-clinical-trial-information","title":"Breaking Down the Barriers to Clinical Trial Information","text":"<p>BioMCP serves as a specialized Model Context Protocol (MCP) server that empowers AI assistants and agents with tools to interact with critical biomedical resources. For clinical trials specifically, BioMCP connects to the ClinicalTrials.gov API, allowing researchers and clinicians to search and retrieve trial information through simple conversational queries.</p> <p>The power of this approach becomes apparent when we look at how it transforms a complex search requirement. Imagine needing to find active clinical trials for pembrolizumab (a cancer immunotherapy drug) specifically for non-small cell lung carcinoma near Cleveland, Ohio. Traditionally, this would require:</p> <ol> <li>Navigating to ClinicalTrials.gov</li> <li>Understanding the proper search fields and syntax</li> <li>Creating multiple filters for intervention (pembrolizumab), condition (    non-small cell lung carcinoma), status (recruiting), and location (Cleveland    area)</li> <li>Interpreting the results</li> </ol>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#from-natural-language-to-precise-database-queries","title":"From Natural Language to Precise Database Queries","text":"<p>With BioMCP, this entire process is streamlined into a simple natural language request. The underlying large language model (LLM) interprets the query, identifies the key entities (drug name, cancer type, location), and translates these into the precise parameters needed for the ClinicalTrials.gov API.</p> <p>The system returns relevant trials that match all criteria, presenting them in an easy-to-understand format. But the interaction doesn't end there\u2014BioMCP maintains context throughout the conversation, enabling follow-up questions like:</p> <ul> <li>Where exactly are these trials located and how far are they from downtown   Cleveland?</li> <li>What biomarker eligibility criteria do these trials require?</li> <li>Are there exclusion criteria I should be aware of?</li> </ul> <p>For each of these questions, BioMCP calls the appropriate tool (trial locations, trial protocols) and processes the information to provide meaningful answers without requiring the user to navigate different interfaces or learn new query languages.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#beyond-basic-search-understanding-trial-details","title":"Beyond Basic Search: Understanding Trial Details","text":"<p>What truly sets BioMCP apart is its ability to go beyond simple listings. When asked about biomarker eligibility criteria, the system can extract this information from the full trial protocol, synthesize it, and present a clear summary of requirements. This capability transforms what would typically be hours of reading dense clinical documentation into a conversational exchange that delivers precisely what the researcher needs.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#transforming-clinical-research-workflows","title":"Transforming Clinical Research Workflows","text":"<p>The implications for clinical research are significant. By lowering the technical barriers to accessing trial information, BioMCP can help:</p> <ul> <li>Researchers understand the landscape of current research in their field</li> <li>Research teams identify promising studies more efficiently</li> <li>Clinical research organizations track competing or complementary trials</li> <li>Research coordinators identify potential recruitment sites based on location</li> </ul> <p>As part of the broader BioMCP ecosystem\u2014which also includes access to genomic variant information and PubMed literature\u2014this clinical trial search capability represents a fundamental shift in how we interact with biomedical information. By bringing the power of natural language processing to specialized databases, BioMCP is helping to democratize access to critical health information and accelerate the research process.</p>"},{"location":"blog/researcher-persona-resource/","title":"BioMCP Deep Researcher Persona","text":"<p>With the release of BioMCP v0.1.2, users can now access a specialized Researcher Persona that transforms Claude into a rigorous biomedical research assistant using BioMCP's built-in sequential thinking capabilities.</p> <p>This persona is designed to leverage BioMCP's suite of tools for accessing PubMed articles, ClinicalTrials.gov data, and genomic variant information, while incorporating Claude's web search capabilities to produce comprehensive, thoroughly-researched reports.</p>"},{"location":"blog/researcher-persona-resource/#how-to-use-the-researcher-persona","title":"How to Use the Researcher Persona","text":"<p>Getting started with the BioMCP Researcher Persona is straightforward:</p> <ol> <li>Configure Claude Desktop by updating your configuration JSON with:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python&gt;=0.1.2\", \"biomcp\", \"run\"]\n    }\n  }\n}\n</code></pre> <ol> <li> <p>Restart Claude Desktop (the <code>&gt;=0.1.2</code> ensures the latest version is used, which includes the built-in think tool)</p> </li> <li> <p>Select the \"Researcher\" persona from the dropdown menu    </p> </li> <li> <p>Ask your biomedical research question</p> </li> </ol> <p>The Researcher Persona will then work through its 10-step process, keeping you updated on its progress and ultimately producing a comprehensive research brief.</p>"},{"location":"blog/researcher-persona-resource/#video-demonstration","title":"Video Demonstration","text":"<p>Below is a video demonstrating the Researcher Persona in action:</p> <p></p>"},{"location":"blog/researcher-persona-resource/#sequential-thinking-a-rigorous-10-step-research-process","title":"Sequential Thinking: A Rigorous 10-Step Research Process","text":"<p>What makes the Researcher Persona so powerful is its integration with BioMCP's built-in 'think' tool, which guides the AI through a comprehensive 10-step research methodology:</p> <ol> <li>Topic Scoping &amp; Domain Framework: Creating a comprehensive structure to    ensure complete coverage</li> <li>Initial Information Gathering: Establishing baseline terminology and    recent developments</li> <li>Focused &amp; Frontier Retrieval: Filling knowledge gaps and identifying    cutting-edge developments</li> <li>Primary Trials Analysis: Identifying and analyzing key clinical trials</li> <li>Primary Literature Analysis: Identifying and analyzing pivotal    publications</li> <li>Initial Evidence Synthesis: Creating a preliminary framework of findings</li> <li>Integrated Gap-Filling: Addressing identified knowledge gaps</li> <li>Comprehensive Evidence Synthesis: Creating a final integrated framework    with quality assessment</li> <li>Self-Critique and Verification: Rigorously assessing the quality and    comprehensiveness</li> <li>Research Brief Creation: Producing the final deliverable with all     required elements</li> </ol> <p></p> <p>This structured approach ensures that no important aspects of the research question are overlooked and that the final output is comprehensive, well-organized, and backed by current evidence.</p>"},{"location":"blog/researcher-persona-resource/#put-to-the-test-emerging-treatment-strategies-for-head-and-neck-cancer","title":"Put to the Test: Emerging Treatment Strategies for Head and Neck Cancer","text":"<p>To evaluate the effectiveness of the Researcher Persona, we conducted a head-to-head comparison with other AI research approaches. We asked the same question to five different systems: \"What are the emerging treatment strategies for head and neck cancer?\"</p> <p>The results were impressive. The BioMCP-powered Researcher Persona, combined with Claude's web search capabilities and the built-in think tool, produced the highest-rated research brief among all approaches tested.</p> <p></p> <p>The research brief produced by the BioMCP Researcher Persona stood out for several reasons:</p> <ol> <li>Comprehensive domain coverage: The report covered all relevant treatment    modalities (immunotherapy, targeted therapy, radiation techniques, surgery,    combination approaches)</li> <li>Structured evidence categorization: Findings were clearly organized by    level of evidence (Established, Emerging, Experimental, Theoretical)</li> <li>Evidence quality assessment: The brief included critical evaluation of    source quality and evidence strength</li> <li>Thorough citation: All claims were backed by specific references to    scientific literature or clinical trials</li> <li>Self-critique: The report included transparent limitations and    identified areas requiring further research</li> </ol>"},{"location":"blog/researcher-persona-resource/#explore-the-example-and-evaluations","title":"Explore the Example and Evaluations","text":"<p>We've documented this comparison in detail in the biomcp-examples repository, where you can find:</p> <ul> <li>The full research briefs produced by each approach</li> <li>Independent evaluations by three different AI judges (Claude 3.7, Gemini 2.5   Pro, and OpenAI o3)</li> <li>Detailed scoring against a rubric that prioritizes accuracy, clarity, and   comprehensiveness</li> <li>Analysis of strengths and weaknesses of each approach</li> </ul> <p>The consensus among the judges placed the BioMCP-powered brief at the top, highlighting its exceptional structure, evidence-based approach, and comprehensive coverage.</p>"},{"location":"blog/researcher-persona-resource/#beyond-the-example-wide-ranging-applications","title":"Beyond the Example: Wide-Ranging Applications","text":"<p>While our example focused on head and neck cancer treatments, the BioMCP Researcher Persona can tackle a wide range of biomedical research questions:</p> <ul> <li>Therapeutic comparisons: \"Compare the efficacy and safety profiles of JAK   inhibitors versus biologics for treating rheumatoid arthritis\"</li> <li>Disease mechanisms: \"What is the current understanding of gut microbiome   dysbiosis in inflammatory bowel disease?\"</li> <li>Biomarker investigations: \"What emerging biomarkers show promise for   early detection of pancreatic cancer?\"</li> <li>Treatment protocols: \"What are the latest guidelines for managing   anticoagulation in patients with atrial fibrillation and chronic kidney   disease?\"</li> </ul>"},{"location":"blog/researcher-persona-resource/#join-the-biomcp-community","title":"Join the BioMCP Community","text":"<p>The Researcher Persona is just one example of how BioMCP is transforming AI-assisted biomedical research. We invite you to:</p> <ol> <li>Try the Researcher Persona with your own research questions</li> <li>Contribute to    the biomcp-examples repository    with your experiments</li> <li>Share your feedback and suggestions for future improvements</li> </ol> <p>By combining specialized biomedical data access with structured research methodologies, BioMCP is helping researchers produce more comprehensive, accurate, and useful biomedical research briefs than ever before.</p> <p>Have a complex biomedical research question? Give the BioMCP Researcher Persona a try and experience the difference a structured, tool-powered approach can make!</p>"},{"location":"concepts/01-what-is-biomcp/","title":"What is BioMCP?","text":"<p>BioMCP is an open-source implementation of the Model Context Protocol (MCP) designed for biomedical research. It connects AI assistants to specialized biomedical databases, enabling natural language access to complex scientific data.</p> <p></p>"},{"location":"concepts/01-what-is-biomcp/#the-bridge-to-biomedical-data","title":"The Bridge to Biomedical Data","text":"<p>BioMCP provides AI assistants with direct access to specialized biomedical databases that aren't available through general web search. Built on Anthropic's Model Context Protocol standard, it creates a toolbox that enables natural language queries across multiple scientific data sources.</p>"},{"location":"concepts/01-what-is-biomcp/#connected-data-sources","title":"Connected Data Sources","text":"<ul> <li>PubMed/PubTator3: 30M+ research articles with entity recognition for genes, diseases, drugs, and variants</li> <li>ClinicalTrials.gov: 400K+ clinical trials searchable by condition, location, phase, and eligibility</li> <li>MyVariant.info: Comprehensive variant annotations with clinical significance</li> <li>cBioPortal: Cancer genomics data automatically integrated with searches</li> <li>BioThings APIs: Real-time gene, drug, and disease information</li> <li>NCI CTS API: Enhanced cancer trial search with biomarker filtering</li> <li>AlphaGenome: Variant effect predictions using Google DeepMind's AI</li> </ul>"},{"location":"concepts/01-what-is-biomcp/#how-does-it-transform-research","title":"How Does It Transform Research?","text":"<p>What makes BioMCP particularly powerful is its conversational nature. A researcher might begin with a simple question about a disease, then naturally progress to exploring related clinical trials, and finally investigate genetic variants that affect treatment efficacy\u2014all within a single, flowing conversation.</p> <p>The system remembers context throughout the interaction, allowing for natural follow-up questions and a research experience that mirrors how scientists actually work. Instead of requiring researchers to master complex query languages for each database, BioMCP translates natural language into the precise syntax each system requires.</p>"},{"location":"concepts/01-what-is-biomcp/#why-this-matters","title":"Why This Matters","text":"<p>BioMCP represents a significant advancement in making specialized biomedical knowledge accessible. For researchers and clinicians, it means spending less time wrestling with complex database interfaces and more time advancing their work. For the broader field of AI in healthcare, it demonstrates how specialized knowledge domains can be made accessible through conversation.</p> <p>As both AI assistants (synchronous conversation partners) and AI agents ( autonomous systems working toward goals over time) continue to evolve, tools like BioMCP will be essential in connecting these systems to the specialized knowledge they need to deliver meaningful insights in complex domains.</p> <p>By open-sourcing BioMCP, we're inviting the community to build upon this foundation, creating more powerful and accessible tools for biomedical research and ultimately accelerating the pace of scientific discovery.</p>"},{"location":"concepts/02-the-deep-researcher-persona/","title":"The Deep Researcher Persona","text":""},{"location":"concepts/02-the-deep-researcher-persona/#overview","title":"Overview","text":"<p>The Deep Researcher Persona is a core philosophy of BioMCP that transforms AI assistants into systematic biomedical research partners. This persona embodies the methodical approach of a dedicated biomedical researcher, enabling AI agents to conduct thorough literature reviews, analyze complex datasets, and synthesize findings into actionable insights.</p>"},{"location":"concepts/02-the-deep-researcher-persona/#why-the-deep-researcher-persona","title":"Why the Deep Researcher Persona?","text":"<p>Traditional AI interactions often result in surface-level responses. The Deep Researcher Persona addresses this by:</p> <ul> <li>Enforcing Systematic Thinking: Requiring the use of the <code>think</code> tool before any research operation</li> <li>Preventing Premature Conclusions: Breaking complex queries into manageable research steps</li> <li>Ensuring Comprehensive Analysis: Following a proven 10-step methodology</li> <li>Maintaining Research Rigor: Documenting thought processes and decision rationale</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#core-traits-and-personality","title":"Core Traits and Personality","text":"<p>The Deep Researcher embodies these characteristics:</p> <ul> <li>Curious and Methodical: Always seeking deeper understanding through systematic investigation</li> <li>Evidence-Based: Grounding all conclusions in concrete data from multiple sources</li> <li>Professional Voice: Clear, concise scientific communication</li> <li>Collaborative: Working as a research partner, not just an information retriever</li> <li>Objective: Presenting balanced findings including contradictory evidence</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#the-10-step-sequential-thinking-process","title":"The 10-Step Sequential Thinking Process","text":"<p>This methodology ensures comprehensive research coverage:</p>"},{"location":"concepts/02-the-deep-researcher-persona/#1-problem-definition-and-scope","title":"1. Problem Definition and Scope","text":"<ul> <li>Parse the research question to identify key concepts</li> <li>Define clear objectives and expected deliverables</li> <li>Establish research boundaries and constraints</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#2-initial-knowledge-assessment","title":"2. Initial Knowledge Assessment","text":"<ul> <li>Evaluate existing knowledge on the topic</li> <li>Identify knowledge gaps requiring investigation</li> <li>Form initial hypotheses to guide research</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#3-search-strategy-development","title":"3. Search Strategy Development","text":"<ul> <li>Design comprehensive search queries</li> <li>Select appropriate databases and tools</li> <li>Plan iterative search refinements</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#4-data-collection-and-retrieval","title":"4. Data Collection and Retrieval","text":"<ul> <li>Execute searches across multiple sources (PubTator3, ClinicalTrials.gov, variant databases)</li> <li>Collect relevant articles, trials, and annotations</li> <li>Document search parameters and results</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#5-quality-assessment-and-filtering","title":"5. Quality Assessment and Filtering","text":"<ul> <li>Evaluate source credibility and relevance</li> <li>Apply inclusion/exclusion criteria</li> <li>Prioritize high-impact findings</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#6-information-extraction","title":"6. Information Extraction","text":"<ul> <li>Extract key findings, methodologies, and conclusions</li> <li>Identify patterns and relationships</li> <li>Note contradictions and uncertainties</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#7-synthesis-and-integration","title":"7. Synthesis and Integration","text":"<ul> <li>Combine findings from multiple sources</li> <li>Resolve contradictions when possible</li> <li>Build coherent narrative from evidence</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#8-critical-analysis","title":"8. Critical Analysis","text":"<ul> <li>Evaluate strength of evidence</li> <li>Identify limitations and biases</li> <li>Consider alternative interpretations</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#9-knowledge-synthesis","title":"9. Knowledge Synthesis","text":"<ul> <li>Create structured summary of findings</li> <li>Highlight key insights and implications</li> <li>Prepare actionable recommendations</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#10-communication-and-reporting","title":"10. Communication and Reporting","text":"<ul> <li>Format findings for target audience</li> <li>Include proper citations and references</li> <li>Provide clear next steps</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#mandatory-think-tool-usage","title":"Mandatory Think Tool Usage","text":"<p>CRITICAL: The <code>think</code> tool must ALWAYS be used first before any BioMCP operation. This is not optional.</p> <pre><code># Correct pattern - ALWAYS start with think\nthink(thought=\"Breaking down the research question...\", thoughtNumber=1)\n# Then proceed with searches\narticle_searcher(genes=[\"BRAF\"], diseases=[\"melanoma\"])\n\n# INCORRECT - Never skip the think step\narticle_searcher(genes=[\"BRAF\"])  # \u274c Will produce suboptimal results\n</code></pre>"},{"location":"concepts/02-the-deep-researcher-persona/#implementation-in-practice","title":"Implementation in Practice","text":""},{"location":"concepts/02-the-deep-researcher-persona/#example-research-flow","title":"Example Research Flow","text":"<ol> <li> <p>User Query: \"What are the treatment options for BRAF V600E melanoma?\"</p> </li> <li> <p>Think Step 1: Problem decomposition</p> </li> </ol> <pre><code>think(thought=\"Breaking down query: Need to find 1) BRAF V600E mutation significance, 2) current treatments, 3) clinical trials\", thoughtNumber=1)\n</code></pre> <ol> <li>Think Step 2: Search strategy</li> </ol> <pre><code>think(thought=\"Will search articles for BRAF inhibitors, then trials for V600E-specific treatments\", thoughtNumber=2)\n</code></pre> <ol> <li>Execute Searches: Following the planned strategy</li> <li>Synthesize: Combine findings into comprehensive brief</li> </ol>"},{"location":"concepts/02-the-deep-researcher-persona/#research-brief-format","title":"Research Brief Format","text":"<p>Every research session concludes with a structured brief:</p> <pre><code>## Research Brief: [Topic]\n\n### Executive Summary\n\n- 3-5 bullet points of key findings\n- Clear, actionable insights\n\n### Detailed Findings\n\n1. **Literature Review** (X papers analyzed)\n\n   - Key discoveries\n   - Consensus findings\n   - Contradictions noted\n\n2. **Clinical Evidence** (Y trials reviewed)\n\n   - Current treatment landscape\n   - Emerging therapies\n   - Trial enrollment opportunities\n\n3. **Molecular Insights**\n   - Variant annotations\n   - Pathway implications\n   - Biomarker relevance\n\n### Recommendations\n\n- Evidence-based suggestions\n- Areas for further investigation\n- Clinical considerations\n\n### References\n\n- Full citations for all sources\n- Direct links to primary data\n</code></pre>"},{"location":"concepts/02-the-deep-researcher-persona/#tool-inventory-and-usage","title":"Tool Inventory and Usage","text":"<p>The Deep Researcher has access to 24 specialized tools:</p>"},{"location":"concepts/02-the-deep-researcher-persona/#core-research-tools","title":"Core Research Tools","text":"<ul> <li>think: Sequential reasoning and planning</li> <li>article_searcher: PubMed/PubTator3 literature search</li> <li>trial_searcher: Clinical trials discovery</li> <li>variant_searcher: Genetic variant annotations</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#specialized-analysis-tools","title":"Specialized Analysis Tools","text":"<ul> <li>gene_getter: Gene function and pathway data</li> <li>drug_getter: Medication information</li> <li>disease_getter: Disease ontology and synonyms</li> <li>alphagenome_predictor: Variant effect prediction</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#integration-features","title":"Integration Features","text":"<ul> <li>Automatic cBioPortal Integration: Cancer genomics context for all gene searches</li> <li>BioThings Suite Access: Real-time biomedical annotations</li> <li>NCI Database Integration: Comprehensive cancer trial data</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#best-practices","title":"Best Practices","text":"<ol> <li>Always Think First: Never skip the sequential thinking process</li> <li>Use Multiple Sources: Cross-reference findings across databases</li> <li>Document Reasoning: Explain why certain searches or filters were chosen</li> <li>Consider Context: Account for disease stage, prior treatments, and patient factors</li> <li>Stay Current: Leverage preprint integration for latest findings</li> </ol>"},{"location":"concepts/02-the-deep-researcher-persona/#community-impact","title":"Community Impact","text":"<p>The Deep Researcher Persona has transformed how researchers interact with biomedical data:</p> <ul> <li>Reduced Research Time: From days to minutes for comprehensive reviews</li> <li>Improved Accuracy: Systematic approach reduces missed connections</li> <li>Enhanced Collaboration: Consistent methodology enables team research</li> <li>Democratized Access: Complex research capabilities available to all</li> </ul>"},{"location":"concepts/02-the-deep-researcher-persona/#getting-started","title":"Getting Started","text":"<p>To use the Deep Researcher Persona:</p> <ol> <li>Ensure BioMCP is installed and configured</li> <li>Load the persona resource when starting your AI session</li> <li>Always begin research queries with the think tool</li> <li>Follow the 10-step methodology for comprehensive results</li> </ol> <p>Remember: The Deep Researcher Persona is not just a tool configuration\u2014it's a systematic approach to biomedical research that ensures thorough, evidence-based insights every time.</p>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/","title":"Sequential Thinking with the Think Tool","text":""},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#critical-the-think-tool-is-mandatory","title":"CRITICAL: The Think Tool is MANDATORY","text":"<p>The 'think' tool must be your FIRST action when using BioMCP. This is not optional.</p> <p>For detailed technical documentation on the think tool parameters and usage, see the MCP Tools Reference - Think Tool.</p>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#why-sequential-thinking","title":"Why Sequential Thinking?","text":"<p>Biomedical research is inherently complex, requiring systematic analysis of interconnected data from multiple sources. The think tool enforces a structured approach that:</p> <ul> <li>Prevents Information Overload: Breaks complex queries into manageable steps</li> <li>Ensures Comprehensive Coverage: Systematic thinking catches details that might be missed</li> <li>Documents Reasoning: Creates an audit trail of research decisions</li> <li>Improves Accuracy: Thoughtful planning leads to better search strategies</li> </ul>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#mandatory-usage-requirements","title":"Mandatory Usage Requirements","text":"<p>\ud83d\udea8 REQUIRED USAGE:</p> <ul> <li>You MUST call 'think' BEFORE any search or fetch operations</li> <li>EVERY biomedical research query requires thinking first</li> <li>ALL multi-step analyses must begin with the think tool</li> <li>ANY task using BioMCP tools requires prior planning with think</li> </ul> <p>\u26a0\ufe0f WARNING - Skipping the think tool will result in:</p> <ul> <li>Incomplete analysis</li> <li>Poor search strategies</li> <li>Missing critical connections</li> <li>Suboptimal results</li> <li>Frustrated users</li> </ul>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#how-to-use-the-think-tool","title":"How to Use the Think Tool","text":"<p>The think tool accepts these parameters:</p> <pre><code>think(\n    thought=\"Your reasoning about the current step\",\n    thoughtNumber=1,  # Sequential number starting from 1\n    totalThoughts=5,  # Optional: estimated total thoughts needed\n    nextThoughtNeeded=True  # Set to False only when analysis is complete\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#sequential-thinking-patterns","title":"Sequential Thinking Patterns","text":""},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#pattern-1-initial-query-decomposition","title":"Pattern 1: Initial Query Decomposition","text":"<p>Always start by breaking down the user's query:</p> <pre><code># User asks: \"What are the treatment options for BRAF V600E melanoma?\"\n\nthink(\n    thought=\"Breaking down query: Need to find 1) BRAF V600E mutation significance in melanoma, 2) approved treatments for BRAF-mutant melanoma, 3) clinical trials for new therapies, 4) resistance mechanisms and combination strategies\",\n    thoughtNumber=1,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#pattern-2-search-strategy-planning","title":"Pattern 2: Search Strategy Planning","text":"<p>Plan your data collection approach:</p> <pre><code>think(\n    thought=\"Search strategy: First use gene_getter for BRAF context, then article_searcher for BRAF V600E melanoma treatments focusing on FDA-approved drugs, followed by trial_searcher for ongoing studies with BRAF inhibitors\",\n    thoughtNumber=2,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#pattern-3-progressive-refinement","title":"Pattern 3: Progressive Refinement","text":"<p>Document findings and adjust strategy:</p> <pre><code>think(\n    thought=\"Found 3 FDA-approved BRAF inhibitors (vemurafenib, dabrafenib, encorafenib). Need to search for combination therapies with MEK inhibitors based on resistance patterns identified in literature\",\n    thoughtNumber=3,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#pattern-4-synthesis-planning","title":"Pattern 4: Synthesis Planning","text":"<p>Before creating final output:</p> <pre><code>think(\n    thought=\"Ready to synthesize: Will organize findings into 1) First-line treatments (BRAF+MEK combos), 2) Second-line options (immunotherapy), 3) Emerging therapies from trials, 4) Resistance mechanisms to consider\",\n    thoughtNumber=4,\n    nextThoughtNeeded=False  # Analysis complete\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#common-think-tool-workflows","title":"Common Think Tool Workflows","text":""},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#literature-review-workflow","title":"Literature Review Workflow","text":"<pre><code># Step 1: Problem definition\nthink(thought=\"User wants comprehensive review of CDK4/6 inhibitors in breast cancer...\", thoughtNumber=1)\n\n# Step 2: Search parameters\nthink(thought=\"Will search for palbociclib, ribociclib, abemaciclib in HR+/HER2- breast cancer...\", thoughtNumber=2)\n\n# Step 3: Quality filtering\nthink(thought=\"Found 47 articles, filtering for Phase III trials and meta-analyses...\", thoughtNumber=3)\n\n# Step 4: Evidence synthesis\nthink(thought=\"Identified consistent PFS benefit across trials, now analyzing OS data...\", thoughtNumber=4)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#clinical-trial-analysis-workflow","title":"Clinical Trial Analysis Workflow","text":"<pre><code># Step 1: Criteria identification\nthink(thought=\"Patient has EGFR L858R lung cancer, progressed on osimertinib...\", thoughtNumber=1)\n\n# Step 2: Trial search strategy\nthink(thought=\"Searching for trials accepting EGFR-mutant NSCLC after TKI resistance...\", thoughtNumber=2)\n\n# Step 3: Eligibility assessment\nthink(thought=\"Found 12 trials, checking for brain metastases eligibility...\", thoughtNumber=3)\n\n# Step 4: Prioritization\nthink(thought=\"Ranking trials by proximity, novel mechanisms, and enrollment status...\", thoughtNumber=4)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#variant-interpretation-workflow","title":"Variant Interpretation Workflow","text":"<pre><code># Step 1: Variant identification\nthink(thought=\"Analyzing TP53 R248Q mutation found in patient's tumor...\", thoughtNumber=1)\n\n# Step 2: Database queries\nthink(thought=\"Will check MyVariant for population frequency, cBioPortal for cancer prevalence...\", thoughtNumber=2)\n\n# Step 3: Functional assessment\nthink(thought=\"Variant is pathogenic, affects DNA binding domain, common in multiple cancers...\", thoughtNumber=3)\n\n# Step 4: Clinical implications\nthink(thought=\"Synthesizing prognostic impact and potential therapeutic vulnerabilities...\", thoughtNumber=4)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#think-tool-best-practices","title":"Think Tool Best Practices","text":""},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#do","title":"DO:","text":"<ul> <li>Start EVERY BioMCP session with think</li> <li>Use sequential numbering (1, 2, 3...)</li> <li>Document key findings in each thought</li> <li>Adjust strategy based on intermediate results</li> <li>Use think to track progress through complex analyses</li> </ul>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#dont","title":"DON'T:","text":"<ul> <li>Skip think and jump to searches</li> <li>Use think only at the beginning</li> <li>Set nextThoughtNeeded=false prematurely</li> <li>Use generic thoughts without specific content</li> <li>Forget to document decision rationale</li> </ul>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#integration-with-other-tools","title":"Integration with Other Tools","text":"<p>The think tool should wrap around other tool usage:</p> <pre><code># CORRECT PATTERN\nthink(thought=\"Planning BRAF melanoma research...\", thoughtNumber=1)\ngene_info = gene_getter(\"BRAF\")\n\nthink(thought=\"BRAF is a serine/threonine kinase, V600E creates constitutive activation. Searching for targeted therapies...\", thoughtNumber=2)\narticles = article_searcher(genes=[\"BRAF\"], diseases=[\"melanoma\"], keywords=[\"vemurafenib\", \"dabrafenib\"])\n\nthink(thought=\"Found key trials showing BRAF+MEK combination superiority. Checking for active trials...\", thoughtNumber=3)\ntrials = trial_searcher(conditions=[\"melanoma\"], interventions=[\"BRAF inhibitor\"])\n\n# INCORRECT PATTERN - NO THINKING\ngene_info = gene_getter(\"BRAF\")  # \u274c Started without thinking\narticles = article_searcher(...)  # \u274c No strategy planning\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#reminder-system","title":"Reminder System","text":"<p>BioMCP includes automatic reminders if you forget to use think:</p> <ul> <li>Search results will include a reminder message</li> <li>The reminder appears as a system message</li> <li>It prompts you to use think for better results</li> <li>This ensures consistent methodology</li> </ul>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#advanced-sequential-thinking","title":"Advanced Sequential Thinking","text":""},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#branching-logic","title":"Branching Logic","text":"<p>Use think to handle conditional paths:</p> <pre><code>think(\n    thought=\"No direct trials found for this rare mutation. Pivoting to search for basket trials and mutation-agnostic approaches...\",\n    thoughtNumber=5,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#error-recovery","title":"Error Recovery","text":"<p>Document and adjust when searches fail:</p> <pre><code>think(\n    thought=\"MyVariant query failed for this structural variant. Will use article search to find functional studies instead...\",\n    thoughtNumber=6,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#complex-integration","title":"Complex Integration","text":"<p>Coordinate multiple data sources:</p> <pre><code>think(\n    thought=\"Integrating findings: cBioPortal shows 15% frequency in lung adenocarcinoma, articles describe resistance mechanisms, trials testing combination strategies...\",\n    thoughtNumber=7,\n    nextThoughtNeeded=True\n)\n</code></pre>"},{"location":"concepts/03-sequential-thinking-with-the-think-tool/#conclusion","title":"Conclusion","text":"<p>The think tool is not just a requirement\u2014it's your research companion that ensures systematic, thorough, and reproducible biomedical research. By following sequential thinking patterns, you'll deliver comprehensive insights that address all aspects of complex biomedical queries.</p> <p>Remember: Always think first, then search. Document your reasoning. Only mark thinking complete when your analysis is truly finished.</p>"},{"location":"developer-guides/01-server-deployment/","title":"Server Deployment Guide","text":"<p>This guide covers various deployment options for BioMCP, from local development to production cloud deployments with authentication.</p>"},{"location":"developer-guides/01-server-deployment/#deployment-options-overview","title":"Deployment Options Overview","text":"Mode Use Case Transport Authentication Scalability Local STDIO Development STDIO None Single user HTTP Server Small teams Streamable HTTP Optional Moderate Docker Containerized Streamable HTTP Optional Moderate Cloudflare Worker Production SSE/HTTP OAuth optional High"},{"location":"developer-guides/01-server-deployment/#local-development-stdio","title":"Local Development (STDIO)","text":"<p>The simplest deployment for development and testing.</p>"},{"location":"developer-guides/01-server-deployment/#setup","title":"Setup","text":"<pre><code># Install BioMCP\nuv tool install biomcp\n\n# Run in STDIO mode (default)\nbiomcp run\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#configuration","title":"Configuration","text":"<p>For Claude Desktop integration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"biomcp\",\n      \"args\": [\"run\"]\n    }\n  }\n}\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#use-cases","title":"Use Cases","text":"<ul> <li>Local development</li> <li>Single-user research</li> <li>Testing new features</li> </ul>"},{"location":"developer-guides/01-server-deployment/#http-server-deployment","title":"HTTP Server Deployment","text":"<p>Modern deployment using Streamable HTTP transport.</p>"},{"location":"developer-guides/01-server-deployment/#basic-setup","title":"Basic Setup","text":"<pre><code># Run HTTP server\nbiomcp run --mode http --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#with-environment-variables","title":"With Environment Variables","text":"<pre><code># Create .env file\ncat &gt; .env &lt;&lt; EOF\nBIOMCP_HOST=0.0.0.0\nBIOMCP_PORT=8000\nNCI_API_KEY=your-key\nALPHAGENOME_API_KEY=your-key\nEOF\n\n# Run with env file\nbiomcp run --mode http\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#systemd-service-linux","title":"Systemd Service (Linux)","text":"<p>Create <code>/etc/systemd/system/biomcp.service</code>:</p> <pre><code>[Unit]\nDescription=BioMCP Server\nAfter=network.target\n\n[Service]\nType=simple\nUser=biomcp\nWorkingDirectory=/opt/biomcp\nEnvironment=\"PATH=/usr/local/bin:/usr/bin\"\nEnvironmentFile=/opt/biomcp/.env\nExecStart=/usr/local/bin/biomcp run --mode http\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Enable and start:</p> <pre><code>sudo systemctl enable biomcp\nsudo systemctl start biomcp\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#nginx-reverse-proxy","title":"Nginx Reverse Proxy","text":"<pre><code>server {\n    listen 443 ssl;\n    server_name biomcp.example.com;\n\n    ssl_certificate /etc/ssl/certs/biomcp.crt;\n    ssl_certificate_key /etc/ssl/private/biomcp.key;\n\n    location /mcp {\n        proxy_pass http://localhost:8000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_buffering off;\n    }\n}\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#docker-deployment","title":"Docker Deployment","text":"<p>Containerized deployment for consistency and portability.</p>"},{"location":"developer-guides/01-server-deployment/#basic-dockerfile","title":"Basic Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\n# Install BioMCP\nRUN pip install biomcp-python\n\n# Add API keys (use secrets in production!)\nENV NCI_API_KEY=\"\"\nENV ALPHAGENOME_API_KEY=\"\"\n\n# Expose port\nEXPOSE 8000\n\n# Run server\nCMD [\"biomcp\", \"run\", \"--mode\", \"http\", \"--host\", \"0.0.0.0\"]\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#with-alphagenome-support","title":"With AlphaGenome Support","text":"<pre><code>FROM python:3.11-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y git\n\n# Install BioMCP\nRUN pip install biomcp-python\n\n# Install AlphaGenome\nRUN git clone https://github.com/google-deepmind/alphagenome.git &amp;&amp; \\\n    cd alphagenome &amp;&amp; \\\n    pip install .\n\n# Configure\nENV MCP_MODE=http\nENV BIOMCP_HOST=0.0.0.0\nENV BIOMCP_PORT=8000\n\nEXPOSE 8000\n\nCMD [\"biomcp\", \"run\"]\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#docker-compose","title":"Docker Compose","text":"<pre><code>version: \"3.8\"\n\nservices:\n  biomcp:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - MCP_MODE=http\n      - NCI_API_KEY=${NCI_API_KEY}\n      - ALPHAGENOME_API_KEY=${ALPHAGENOME_API_KEY}\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#running","title":"Running","text":"<pre><code># Build and run\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Scale horizontally\ndocker-compose up -d --scale biomcp=3\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#cloudflare-worker-deployment","title":"Cloudflare Worker Deployment","text":"<p>Enterprise-grade deployment with global edge distribution.</p>"},{"location":"developer-guides/01-server-deployment/#prerequisites","title":"Prerequisites","text":"<ol> <li>Cloudflare account</li> <li>Wrangler CLI installed</li> <li>Remote BioMCP server running</li> </ol>"},{"location":"developer-guides/01-server-deployment/#architecture","title":"Architecture","text":"<pre><code>Claude Desktop \u2192 Cloudflare Worker (Edge) \u2192 BioMCP Server (Origin)\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#setup-worker","title":"Setup Worker","text":"<ol> <li>Install dependencies:</li> </ol> <pre><code>npm install @modelcontextprotocol/sdk itty-router\n</code></pre> <ol> <li>Create <code>wrangler.toml</code>:</li> </ol> <pre><code>name = \"biomcp-worker\"\nmain = \"src/index.js\"\ncompatibility_date = \"2024-01-01\"\n\n[vars]\nREMOTE_MCP_SERVER_URL = \"https://your-biomcp-server.com/mcp\"\nMCP_SERVER_API_KEY = \"your-secret-key\"\n\n[[kv_namespaces]]\nbinding = \"AUTH_TOKENS\"\nid = \"your-kv-namespace-id\"\n</code></pre> <ol> <li>Deploy:</li> </ol> <pre><code>wrangler deploy\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#with-oauth-authentication-stytch","title":"With OAuth Authentication (Stytch)","text":"<ol> <li>Configure Stytch:</li> </ol> <pre><code>[vars]\nSTYTCH_PROJECT_ID = \"project-test-...\"\nSTYTCH_SECRET = \"secret-test-...\"\nSTYTCH_PUBLIC_TOKEN = \"public-token-test-...\"\nJWT_SECRET = \"your-jwt-secret\"\n</code></pre> <ol> <li> <p>OAuth Endpoints:    The worker automatically provides:</p> </li> <li> <p><code>/.well-known/oauth-authorization-server</code></p> </li> <li><code>/authorize</code></li> <li><code>/callback</code></li> <li> <p><code>/token</code></p> </li> <li> <p>Client Configuration:</p> </li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"transport\": {\n        \"type\": \"sse\",\n        \"url\": \"https://your-worker.workers.dev\"\n      },\n      \"auth\": {\n        \"type\": \"oauth\",\n        \"client_id\": \"mcp-client\",\n        \"authorization_endpoint\": \"https://your-worker.workers.dev/authorize\",\n        \"token_endpoint\": \"https://your-worker.workers.dev/token\",\n        \"scope\": \"mcp:access\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#production-considerations","title":"Production Considerations","text":""},{"location":"developer-guides/01-server-deployment/#security","title":"Security","text":"<ol> <li>API Key Management:</li> </ol> <pre><code># Use environment variables\nexport NCI_API_KEY=\"$(vault kv get -field=key secret/biomcp/nci)\"\n\n# Or use secrets management\ndocker run --secret biomcp_keys biomcp:latest\n</code></pre> <ol> <li> <p>Network Security:</p> </li> <li> <p>Use HTTPS everywhere</p> </li> <li>Implement rate limiting</li> <li>Set up CORS properly</li> <li> <p>Use authentication for public endpoints</p> </li> <li> <p>Access Control:</p> </li> </ol> <pre><code># Example middleware\nasync def auth_middleware(request, call_next):\n    token = request.headers.get(\"Authorization\")\n    if not validate_token(token):\n        return JSONResponse({\"error\": \"Unauthorized\"}, status_code=401)\n    return await call_next(request)\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#monitoring","title":"Monitoring","text":"<ol> <li>Health Checks:</li> </ol> <pre><code># Built-in health endpoint\nGET /health\n\n# Custom health check\n@app.get(\"/health/detailed\")\nasync def health_detailed():\n    return {\n        \"status\": \"healthy\",\n        \"version\": __version__,\n        \"apis\": check_api_status(),\n        \"timestamp\": datetime.utcnow()\n    }\n</code></pre> <ol> <li>Metrics:</li> </ol> <pre><code># Prometheus metrics\nfrom prometheus_client import Counter, Histogram\n\nrequest_count = Counter('biomcp_requests_total', 'Total requests')\nrequest_duration = Histogram('biomcp_request_duration_seconds', 'Request duration')\n</code></pre> <ol> <li>Logging:</li> </ol> <pre><code># Structured logging\nimport structlog\n\nlogger = structlog.get_logger()\nlogger.info(\"request_processed\",\n    tool=\"article_searcher\",\n    duration=0.234,\n    user_id=\"user123\"\n)\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#scaling","title":"Scaling","text":"<ol> <li>Horizontal Scaling:</li> </ol> <pre><code># Kubernetes deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: biomcp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: biomcp\n  template:\n    metadata:\n      labels:\n        app: biomcp\n    spec:\n      containers:\n        - name: biomcp\n          image: biomcp:latest\n          ports:\n            - containerPort: 8000\n          resources:\n            requests:\n              memory: \"512Mi\"\n              cpu: \"500m\"\n            limits:\n              memory: \"1Gi\"\n              cpu: \"1000m\"\n</code></pre> <ol> <li>Caching:</li> </ol> <pre><code># Redis caching\nimport redis\nfrom functools import wraps\n\nredis_client = redis.Redis()\n\ndef cache_result(ttl=3600):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            key = f\"{func.__name__}:{str(args)}:{str(kwargs)}\"\n            cached = redis_client.get(key)\n            if cached:\n                return json.loads(cached)\n            result = await func(*args, **kwargs)\n            redis_client.setex(key, ttl, json.dumps(result))\n            return result\n        return wrapper\n    return decorator\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Connection Pooling:</li> </ol> <pre><code># Reuse HTTP connections\nimport httpx\n\nclient = httpx.AsyncClient(\n    limits=httpx.Limits(max_keepalive_connections=20),\n    timeout=httpx.Timeout(30.0)\n)\n</code></pre> <ol> <li>Async Processing:</li> </ol> <pre><code># Process requests concurrently\nasync def handle_batch(requests):\n    tasks = [process_request(req) for req in requests]\n    return await asyncio.gather(*tasks)\n</code></pre> <ol> <li>Response Compression:</li> </ol> <pre><code># Enable gzip compression\nfrom fastapi.middleware.gzip import GZipMiddleware\n\napp.add_middleware(GZipMiddleware, minimum_size=1000)\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#migration-path","title":"Migration Path","text":""},{"location":"developer-guides/01-server-deployment/#from-stdio-to-http","title":"From STDIO to HTTP","text":"<ol> <li>Update server startup:</li> </ol> <pre><code># Old\nbiomcp run\n\n# New\nbiomcp run --mode http\n</code></pre> <ol> <li>Update client configuration:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#from-sse-to-streamable-http","title":"From SSE to Streamable HTTP","text":"<ol> <li>Update worker code to use <code>/mcp</code> endpoint</li> <li>Update client to use new transport:</li> </ol> <pre><code>{\n  \"transport\": {\n    \"type\": \"http\",\n    \"url\": \"https://biomcp.example.com/mcp\"\n  }\n}\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guides/01-server-deployment/#common-issues","title":"Common Issues","text":"<ol> <li>Port Already in Use:</li> </ol> <pre><code># Find process using port\nlsof -i :8000\n\n# Kill process\nkill -9 &lt;PID&gt;\n</code></pre> <ol> <li>API Key Errors:</li> </ol> <pre><code># Verify environment variables\nenv | grep -E \"(NCI|ALPHAGENOME|CBIO)\"\n\n# Test API key\ncurl -H \"X-API-KEY: $NCI_API_KEY\" https://api.cancer.gov/v2/trials\n</code></pre> <ol> <li> <p>Connection Timeouts:</p> </li> <li> <p>Increase timeout values</p> </li> <li>Check firewall rules</li> <li>Verify network connectivity</li> </ol>"},{"location":"developer-guides/01-server-deployment/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nBIOMCP_LOG_LEVEL=DEBUG biomcp run --mode http\n\n# Or in Docker\ndocker run -e BIOMCP_LOG_LEVEL=DEBUG biomcp:latest\n</code></pre>"},{"location":"developer-guides/01-server-deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Set up monitoring</li> <li>Configure authentication</li> <li>Review security policies</li> <li>Implement CI/CD pipeline</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/","title":"Contributing and Testing Guide","text":"<p>This guide covers how to contribute to BioMCP and run the comprehensive test suite.</p>"},{"location":"developer-guides/02-contributing-and-testing/#getting-started","title":"Getting Started","text":""},{"location":"developer-guides/02-contributing-and-testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>uv package manager</li> <li>Git</li> <li>Node.js (for MCP Inspector)</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#initial-setup","title":"Initial Setup","text":"<ol> <li>Fork and clone the repository:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/biomcp.git\ncd biomcp\n</code></pre> <ol> <li>Install dependencies and setup:</li> </ol> <pre><code># Recommended: Use make for complete setup\nmake install\n\n# Alternative: Manual setup\nuv sync --all-extras\nuv run pre-commit install\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code># Run server\nbiomcp run\n\n# Run tests\nmake test-offline\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer-guides/02-contributing-and-testing/#1-create-feature-branch","title":"1. Create Feature Branch","text":"<pre><code>git checkout -b feature/your-feature-name\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#2-make-changes","title":"2. Make Changes","text":"<p>Follow these principles:</p> <ul> <li>Keep changes minimal and focused</li> <li>Follow existing code patterns</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#3-quality-checks","title":"3. Quality Checks","text":"<p>MANDATORY: Run these before considering work complete:</p> <pre><code># Step 1: Code quality checks\nmake check\n\n# This runs:\n# - ruff check (linting)\n# - ruff format (code formatting)\n# - mypy (type checking)\n# - pre-commit hooks\n# - deptry (dependency analysis)\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#4-run-tests","title":"4. Run Tests","text":"<pre><code># Step 2: Run appropriate test suite\nmake test          # Full suite (requires network)\n# OR\nmake test-offline  # Unit tests only (no network)\n</code></pre> <p>Both quality checks and tests MUST pass before submitting changes.</p>"},{"location":"developer-guides/02-contributing-and-testing/#testing-strategy","title":"Testing Strategy","text":""},{"location":"developer-guides/02-contributing-and-testing/#test-categories","title":"Test Categories","text":""},{"location":"developer-guides/02-contributing-and-testing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Fast, reliable tests without external dependencies</li> <li>Mock all external API calls</li> <li>Always run in CI/CD</li> </ul> <pre><code># Example unit test\n@patch('httpx.AsyncClient.get')\nasync def test_article_search(mock_get):\n    mock_get.return_value.json.return_value = {\"results\": [...]}\n    result = await article_searcher(genes=[\"BRAF\"])\n    assert len(result) &gt; 0\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test real API interactions</li> <li>May fail due to network/API issues</li> <li>Run separately in CI with <code>continue-on-error</code></li> </ul> <pre><code># Example integration test\n@pytest.mark.integration\nasync def test_real_pubmed_search():\n    result = await article_searcher(genes=[\"TP53\"], limit=5)\n    assert len(result) == 5\n    assert all(\"TP53\" in r.text for r in result)\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#running-tests","title":"Running Tests","text":""},{"location":"developer-guides/02-contributing-and-testing/#command-options","title":"Command Options","text":"<pre><code># Run all tests\nmake test\nuv run python -m pytest\n\n# Run only unit tests (fast, offline)\nmake test-offline\nuv run python -m pytest -m \"not integration\"\n\n# Run only integration tests\nuv run python -m pytest -m \"integration\"\n\n# Run specific test file\nuv run python -m pytest tests/tdd/test_article_search.py\n\n# Run with coverage\nmake cov\nuv run python -m pytest --cov --cov-report=html\n\n# Run tests verbosely\nuv run python -m pytest -v\n\n# Run tests and stop on first failure\nuv run python -m pytest -x\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#test-discovery","title":"Test Discovery","text":"<p>Tests are organized in:</p> <ul> <li><code>tests/tdd/</code> - Unit and integration tests</li> <li><code>tests/bdd/</code> - Behavior-driven development tests</li> <li><code>tests/data/</code> - Test fixtures and sample data</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#writing-tests","title":"Writing Tests","text":""},{"location":"developer-guides/02-contributing-and-testing/#test-structure","title":"Test Structure","text":"<pre><code>import pytest\nfrom unittest.mock import patch, AsyncMock\nfrom biomcp.articles import article_searcher\n\nclass TestArticleSearch:\n    \"\"\"Test article search functionality\"\"\"\n\n    @pytest.fixture\n    def mock_response(self):\n        \"\"\"Sample API response\"\"\"\n        return {\n            \"results\": [\n                {\"pmid\": \"12345\", \"title\": \"BRAF in melanoma\"}\n            ]\n        }\n\n    @patch('httpx.AsyncClient.get')\n    async def test_basic_search(self, mock_get, mock_response):\n        \"\"\"Test basic article search\"\"\"\n        # Setup\n        mock_get.return_value = AsyncMock()\n        mock_get.return_value.json.return_value = mock_response\n\n        # Execute\n        result = await article_searcher(genes=[\"BRAF\"])\n\n        # Assert\n        assert len(result) == 1\n        assert \"BRAF\" in result[0].title\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#async-testing","title":"Async Testing","text":"<pre><code>import pytest\nimport asyncio\n\n@pytest.mark.asyncio\nasync def test_async_function():\n    \"\"\"Test async functionality\"\"\"\n    result = await some_async_function()\n    assert result is not None\n\n# Or use pytest-asyncio fixtures\n@pytest.fixture\nasync def async_client():\n    async with AsyncClient() as client:\n        yield client\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#mocking-external-apis","title":"Mocking External APIs","text":"<pre><code>from unittest.mock import patch, MagicMock\n\n@patch('biomcp.integrations.pubmed.search')\ndef test_with_mock(mock_search):\n    # Configure mock\n    mock_search.return_value = [{\n        \"pmid\": \"12345\",\n        \"title\": \"Test Article\"\n    }]\n\n    # Test code that uses the mocked function\n    result = search_articles(\"BRAF\")\n\n    # Verify mock was called correctly\n    mock_search.assert_called_once_with(\"BRAF\")\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#mcp-inspector-testing","title":"MCP Inspector Testing","text":"<p>The MCP Inspector provides an interactive way to test MCP tools.</p>"},{"location":"developer-guides/02-contributing-and-testing/#setup","title":"Setup","text":"<pre><code># Install inspector\nnpm install -g @modelcontextprotocol/inspector\n\n# Run BioMCP with inspector\nmake inspector\n# OR\nnpx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#testing-tools","title":"Testing Tools","text":"<ol> <li>Connect to server in the inspector UI</li> <li>View available tools in the tools panel</li> <li>Test individual tools with sample inputs</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#example-tool-tests","title":"Example Tool Tests","text":"<pre><code>// Test article search\n{\n  \"tool\": \"article_searcher\",\n  \"arguments\": {\n    \"genes\": [\"BRAF\"],\n    \"diseases\": [\"melanoma\"],\n    \"limit\": 5\n  }\n}\n\n// Test trial search\n{\n  \"tool\": \"trial_searcher\",\n  \"arguments\": {\n    \"conditions\": [\"lung cancer\"],\n    \"recruiting_status\": \"OPEN\",\n    \"limit\": 10\n  }\n}\n\n// Test think tool (ALWAYS first!)\n{\n  \"tool\": \"think\",\n  \"arguments\": {\n    \"thought\": \"Planning to search for BRAF mutations\",\n    \"thoughtNumber\": 1,\n    \"nextThoughtNeeded\": true\n  }\n}\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#debugging-with-inspector","title":"Debugging with Inspector","text":"<ol> <li>Check request/response: View raw MCP messages</li> <li>Verify parameters: Ensure correct argument format</li> <li>Test error handling: Try invalid inputs</li> <li>Monitor performance: Check response times</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#code-style-and-standards","title":"Code Style and Standards","text":""},{"location":"developer-guides/02-contributing-and-testing/#python-style","title":"Python Style","text":"<ul> <li>Formatter: ruff (line length: 79)</li> <li>Type hints: Required for all functions</li> <li>Docstrings: Google style for all public functions</li> </ul> <pre><code>def search_articles(\n    genes: list[str],\n    limit: int = 10\n) -&gt; list[Article]:\n    \"\"\"Search for articles by gene names.\n\n    Args:\n        genes: List of gene symbols to search\n        limit: Maximum number of results\n\n    Returns:\n        List of Article objects\n\n    Raises:\n        ValueError: If genes list is empty\n    \"\"\"\n    if not genes:\n        raise ValueError(\"Genes list cannot be empty\")\n    # Implementation...\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Automatically run on commit:</p> <ul> <li>ruff formatting</li> <li>ruff linting</li> <li>mypy type checking</li> <li>File checks (YAML, TOML, merge conflicts)</li> </ul> <p>Manual run:</p> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"developer-guides/02-contributing-and-testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The CI pipeline runs:</p> <ol> <li>Linting and Formatting</li> <li>Type Checking</li> <li>Unit Tests (required to pass)</li> <li>Integration Tests (allowed to fail)</li> <li>Coverage Report</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#ci-configuration","title":"CI Configuration","text":"<pre><code># .github/workflows/test.yml structure\njobs:\n  test:\n    strategy:\n      matrix:\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n    steps:\n      - uses: actions/checkout@v4\n      - uses: astral-sh/setup-uv@v2\n      - run: make check\n      - run: make test-offline\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#debugging-and-troubleshooting","title":"Debugging and Troubleshooting","text":""},{"location":"developer-guides/02-contributing-and-testing/#common-issues","title":"Common Issues","text":""},{"location":"developer-guides/02-contributing-and-testing/#test-failures","title":"Test Failures","text":"<pre><code># Run failed test with more details\nuv run python -m pytest -vvs tests/path/to/test.py::test_name\n\n# Debug with print statements\nuv run python -m pytest -s  # Don't capture stdout\n\n# Use debugger\nuv run python -m pytest --pdb  # Drop to debugger on failure\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#integration-test-issues","title":"Integration Test Issues","text":"<p>Common causes:</p> <ul> <li>Rate limiting: Add delays or use mocks</li> <li>API changes: Update test expectations</li> <li>Network issues: Check connectivity</li> <li>API keys: Ensure valid keys for NCI tests</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#integration-testing","title":"Integration Testing","text":""},{"location":"developer-guides/02-contributing-and-testing/#overview","title":"Overview","text":"<p>BioMCP includes integration tests that make real API calls to external services. These tests verify that our integrations work correctly with live data but can be affected by API availability, rate limits, and data changes.</p>"},{"location":"developer-guides/02-contributing-and-testing/#running-integration-tests","title":"Running Integration Tests","text":"<pre><code># Run all tests including integration\nmake test\n\n# Run only integration tests\npytest -m integration\n\n# Skip integration tests\npytest -m \"not integration\"\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#handling-flaky-tests","title":"Handling Flaky Tests","text":"<p>Integration tests may fail or skip for various reasons:</p> <ol> <li> <p>API Unavailability</p> </li> <li> <p>Symptom: Tests skip with \"API returned no data\" message</p> </li> <li>Cause: The external service is down or experiencing issues</li> <li> <p>Action: Re-run tests later or check service status</p> </li> <li> <p>Rate Limiting</p> </li> <li> <p>Symptom: Multiple test failures after initial successes</p> </li> <li>Cause: Too many requests in a short time</li> <li> <p>Action: Run tests with delays between them or use API tokens</p> </li> <li> <p>Data Changes</p> </li> <li>Symptom: Assertions about specific data fail</li> <li>Cause: The external data has changed (e.g., new mutations discovered)</li> <li>Action: Update tests to use more flexible assertions</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#integration-test-design-principles","title":"Integration Test Design Principles","text":""},{"location":"developer-guides/02-contributing-and-testing/#1-graceful-skipping","title":"1. Graceful Skipping","text":"<p>Tests should skip rather than fail when:</p> <ul> <li>API returns no data</li> <li>Service is unavailable</li> <li>Rate limits are hit</li> </ul> <pre><code>if not data or data.total_count == 0:\n    pytest.skip(\"API returned no data - possible service issue\")\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#2-flexible-assertions","title":"2. Flexible Assertions","text":"<p>Avoid assertions on specific data values that might change:</p> <p>\u274c Bad: Expecting exact mutation counts</p> <pre><code>assert summary.total_mutations == 1234\n</code></pre> <p>\u2705 Good: Checking data exists and has reasonable structure</p> <pre><code>assert summary.total_mutations &gt; 0\nassert hasattr(summary, 'hotspots')\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#3-retry-logic","title":"3. Retry Logic","text":"<p>For critical tests, implement retry with delay:</p> <pre><code>async def fetch_with_retry(client, resource, max_attempts=2, delay=1.0):\n    for attempt in range(max_attempts):\n        result = await client.get(resource)\n        if result and result.data:\n            return result\n        if attempt &lt; max_attempts - 1:\n            await asyncio.sleep(delay)\n    return None\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#4-cache-management","title":"4. Cache Management","text":"<p>Clear caches before tests to ensure fresh data:</p> <pre><code>from biomcp.utils.request_cache import clear_cache\nawait clear_cache()\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#common-integration-test-patterns","title":"Common Integration Test Patterns","text":""},{"location":"developer-guides/02-contributing-and-testing/#testing-search-functionality","title":"Testing Search Functionality","text":"<pre><code>@pytest.mark.integration\nasync def test_gene_search(self):\n    client = SearchClient()\n    results = await client.search(\"BRAF\")\n\n    # Flexible assertions\n    assert results is not None\n    if results.count &gt; 0:\n        assert results.items[0].gene_symbol == \"BRAF\"\n    else:\n        pytest.skip(\"No results returned - API may be unavailable\")\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#testing-data-retrieval","title":"Testing Data Retrieval","text":"<pre><code>@pytest.mark.integration\nasync def test_variant_details(self):\n    client = VariantClient()\n    variant = await client.get_variant(\"rs121913529\")\n\n    if not variant:\n        pytest.skip(\"Variant not found - may have been removed from database\")\n\n    # Check structure, not specific values\n    assert hasattr(variant, 'chromosome')\n    assert hasattr(variant, 'position')\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#debugging-failed-integration-tests","title":"Debugging Failed Integration Tests","text":"<ol> <li>Enable Debug Logging</li> </ol> <pre><code>BIOMCP_LOG_LEVEL=DEBUG pytest tests/integration/test_failing.py -v\n</code></pre> <ol> <li> <p>Check API Status</p> </li> <li> <p>PubMed: https://www.ncbi.nlm.nih.gov/home/about/website-updates/</p> </li> <li>ClinicalTrials.gov: https://clinicaltrials.gov/about/announcements</li> <li> <p>cBioPortal: https://www.cbioportal.org/</p> </li> <li> <p>Inspect Response Data <pre><code>if not expected_data:\n    print(f\"Unexpected response: {response}\")\n    pytest.skip(\"Data structure changed\")\n</code></pre></p> </li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#environment-variables-for-testing","title":"Environment Variables for Testing","text":""},{"location":"developer-guides/02-contributing-and-testing/#api-tokens","title":"API Tokens","text":"<p>Some services provide higher rate limits with authentication:</p> <pre><code>export CBIO_TOKEN=\"your-token-here\"\nexport PUBMED_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#offline-mode","title":"Offline Mode","text":"<p>Test offline behavior:</p> <pre><code>export BIOMCP_OFFLINE=true\npytest tests/\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#custom-timeouts","title":"Custom Timeouts","text":"<p>Adjust timeouts for slow connections:</p> <pre><code>export BIOMCP_REQUEST_TIMEOUT=60\npytest tests/integration/\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#cicd-considerations","title":"CI/CD Considerations","text":"<ol> <li>Separate Test Runs</li> </ol> <pre><code>- name: Unit Tests\n  run: pytest -m \"not integration\"\n\n- name: Integration Tests\n  run: pytest -m integration\n  continue-on-error: true\n</code></pre> <ol> <li>Scheduled Runs</li> </ol> <pre><code>on:\n  schedule:\n    - cron: \"0 6 * * *\" # Daily at 6 AM\n</code></pre> <ol> <li>Result Monitoring: Track integration test success rates over time to identify patterns.</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#integration-testing-best-practices","title":"Integration Testing Best Practices","text":"<ol> <li>Keep integration tests focused - Test integration points, not business logic</li> <li>Use reasonable timeouts - Don't wait forever for slow APIs</li> <li>Document expected failures - Add comments explaining why tests might skip</li> <li>Monitor external changes - Subscribe to API change notifications</li> <li>Provide escape hatches - Allow skipping integration tests when needed</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#type-checking-errors","title":"Type Checking Errors","text":"<pre><code># Check specific file\nuv run mypy src/biomcp/specific_file.py\n\n# Ignore specific error\n# type: ignore[error-code]\n\n# Show error codes\nuv run mypy --show-error-codes\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#performance-testing","title":"Performance Testing","text":"<pre><code>import time\nimport pytest\n\n@pytest.mark.performance\ndef test_search_performance():\n    \"\"\"Ensure search completes within time limit\"\"\"\n    start = time.time()\n    result = search_articles(\"TP53\", limit=100)\n    duration = time.time() - start\n\n    assert duration &lt; 5.0  # Should complete in 5 seconds\n    assert len(result) == 100\n</code></pre>"},{"location":"developer-guides/02-contributing-and-testing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"developer-guides/02-contributing-and-testing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all checks pass:</li> </ol> <pre><code>make check &amp;&amp; make test\n</code></pre> <ol> <li> <p>Update documentation if needed</p> </li> <li> <p>Commit with clear message:</p> </li> </ol> <pre><code>git add .\ngit commit -m \"feat: add support for variant batch queries\n\n- Add batch_variant_search function\n- Update tests for batch functionality\n- Document batch size limits\"\n</code></pre> <ol> <li>Push to your fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Create Pull Request with:</li> <li>Clear description of changes</li> <li>Link to related issues</li> <li>Test results summary</li> </ol>"},{"location":"developer-guides/02-contributing-and-testing/#code-review-guidelines","title":"Code Review Guidelines","text":"<p>Your PR will be reviewed for:</p> <ul> <li>Code quality and style consistency</li> <li>Test coverage for new features</li> <li>Documentation updates</li> <li>Performance impact</li> <li>Security considerations</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#best-practices","title":"Best Practices","text":""},{"location":"developer-guides/02-contributing-and-testing/#do","title":"DO:","text":"<ul> <li>Write tests for new functionality</li> <li>Follow existing patterns</li> <li>Keep PRs focused and small</li> <li>Update documentation</li> <li>Run full test suite locally</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#dont","title":"DON'T:","text":"<ul> <li>Skip tests to \"save time\"</li> <li>Mix unrelated changes in one PR</li> <li>Ignore linting warnings</li> <li>Commit sensitive data</li> <li>Break existing functionality</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#additional-resources","title":"Additional Resources","text":"<ul> <li>MCP Documentation</li> <li>pytest Documentation</li> <li>Type Hints Guide</li> <li>Ruff Documentation</li> </ul>"},{"location":"developer-guides/02-contributing-and-testing/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>Issues: Ask questions or share ideas</li> <li>Pull Requests: Submit contributions</li> <li>Documentation: Check existing docs first</li> </ul> <p>Remember: Quality over speed. Take time to write good tests and clean code!</p>"},{"location":"developer-guides/03-third-party-endpoints/","title":"Third-Party Endpoints Used by BioMCP","text":"<p>This file is auto-generated from the endpoint registry.</p>"},{"location":"developer-guides/03-third-party-endpoints/#overview","title":"Overview","text":"<p>BioMCP connects to 14 external domains across 35 endpoints.</p>"},{"location":"developer-guides/03-third-party-endpoints/#endpoints-by-category","title":"Endpoints by Category","text":""},{"location":"developer-guides/03-third-party-endpoints/#biomedical-literature","title":"Biomedical Literature","text":""},{"location":"developer-guides/03-third-party-endpoints/#biorxiv_api","title":"biorxiv_api","text":"<ul> <li>URL: <code>https://api.biorxiv.org/details/biorxiv</code></li> <li>Description: bioRxiv API for searching biology preprints</li> <li>Data Types: research_articles</li> <li>Rate Limit: Not specified</li> <li>Compliance Notes: Public preprint server, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#europe_pmc","title":"europe_pmc","text":"<ul> <li>URL: <code>https://www.ebi.ac.uk/europepmc/webservices/rest/search</code></li> <li>Description: Europe PMC REST API for searching biomedical literature</li> <li>Data Types: research_articles</li> <li>Rate Limit: Not specified</li> <li>Compliance Notes: Public EMBL-EBI service, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#medrxiv_api","title":"medrxiv_api","text":"<ul> <li>URL: <code>https://api.biorxiv.org/details/medrxiv</code></li> <li>Description: medRxiv API for searching medical preprints</li> <li>Data Types: research_articles</li> <li>Rate Limit: Not specified</li> <li>Compliance Notes: Public preprint server, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#pubtator3_autocomplete","title":"pubtator3_autocomplete","text":"<ul> <li>URL: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/</code></li> <li>Description: PubTator3 API for entity name autocomplete suggestions</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 20 requests/second</li> <li>Compliance Notes: Public NIH/NCBI service, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#pubtator3_export","title":"pubtator3_export","text":"<ul> <li>URL: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson</code></li> <li>Description: PubTator3 API for fetching full article annotations in BioC-JSON format</li> <li>Data Types: research_articles</li> <li>Rate Limit: 20 requests/second</li> <li>Compliance Notes: Public NIH/NCBI service, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#pubtator3_search","title":"pubtator3_search","text":"<ul> <li>URL: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/</code></li> <li>Description: PubTator3 API for searching biomedical literature with entity annotations</li> <li>Data Types: research_articles</li> <li>Rate Limit: 20 requests/second</li> <li>Compliance Notes: Public NIH/NCBI service, no PII transmitted</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#clinical-trials","title":"Clinical Trials","text":""},{"location":"developer-guides/03-third-party-endpoints/#clinicaltrials_search","title":"clinicaltrials_search","text":"<ul> <li>URL: <code>https://clinicaltrials.gov/api/v2/studies</code></li> <li>Description: ClinicalTrials.gov API v2 for searching clinical trials</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public NIH service, may contain trial participant criteria</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#nci_biomarkers","title":"nci_biomarkers","text":"<ul> <li>URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/biomarkers</code></li> <li>Description: NCI API for biomarkers used in clinical trials</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: Not specified</li> <li>Authentication: Optional NCI_API_KEY for increased access</li> <li>Compliance Notes: Public NCI service, biomarker metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#nci_diseases","title":"nci_diseases","text":"<ul> <li>URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/diseases</code></li> <li>Description: NCI API for cancer disease vocabulary</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: Not specified</li> <li>Authentication: Optional NCI_API_KEY for increased access</li> <li>Compliance Notes: Public NCI service, disease ontology</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#nci_interventions","title":"nci_interventions","text":"<ul> <li>URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/interventions</code></li> <li>Description: NCI API for cancer treatment interventions</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: Not specified</li> <li>Authentication: Optional NCI_API_KEY for increased access</li> <li>Compliance Notes: Public NCI service, intervention metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#nci_organizations","title":"nci_organizations","text":"<ul> <li>URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/organizations</code></li> <li>Description: NCI API for cancer research organizations</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: Not specified</li> <li>Authentication: Optional NCI_API_KEY for increased access</li> <li>Compliance Notes: Public NCI service, organization metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#nci_trials","title":"nci_trials","text":"<ul> <li>URL: <code>https://clinicaltrialsapi.cancer.gov/api/v2/trials</code></li> <li>Description: NCI Clinical Trials Search API for cancer trials</li> <li>Data Types: clinical_trial_data</li> <li>Rate Limit: Not specified</li> <li>Authentication: Optional NCI_API_KEY for increased access</li> <li>Compliance Notes: Public NCI service, cancer trial data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#variant-databases","title":"Variant Databases","text":""},{"location":"developer-guides/03-third-party-endpoints/#ensembl_variation","title":"ensembl_variation","text":"<ul> <li>URL: <code>https://rest.ensembl.org/variation/human</code></li> <li>Description: Ensembl REST API for human genetic variation data</li> <li>Data Types: genetic_variants</li> <li>Rate Limit: 15 requests/second</li> <li>Compliance Notes: Public EMBL-EBI service, population genetics data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#gdc_ssm_occurrences","title":"gdc_ssm_occurrences","text":"<ul> <li>URL: <code>https://api.gdc.cancer.gov/ssm_occurrences</code></li> <li>Description: NCI GDC API for mutation occurrences in cancer samples</li> <li>Data Types: cancer_mutations</li> <li>Rate Limit: Not specified</li> <li>Compliance Notes: Public NCI service, aggregate cancer genomics data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#gdc_ssms","title":"gdc_ssms","text":"<ul> <li>URL: <code>https://api.gdc.cancer.gov/ssms</code></li> <li>Description: NCI GDC API for somatic mutations</li> <li>Data Types: cancer_mutations</li> <li>Rate Limit: Not specified</li> <li>Compliance Notes: Public NCI service, aggregate cancer genomics data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mychem_chem","title":"mychem_chem","text":"<ul> <li>URL: <code>https://mychem.info/v1/chem</code></li> <li>Description: MyChem.info API for fetching specific drug/chemical details</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, drug/chemical annotation data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mychem_query","title":"mychem_query","text":"<ul> <li>URL: <code>https://mychem.info/v1/query</code></li> <li>Description: MyChem.info API for querying drug/chemical information</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, drug/chemical annotation data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mydisease_disease","title":"mydisease_disease","text":"<ul> <li>URL: <code>https://mydisease.info/v1/disease</code></li> <li>Description: MyDisease.info API for fetching specific disease details</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, disease ontology data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mydisease_query","title":"mydisease_query","text":"<ul> <li>URL: <code>https://mydisease.info/v1/query</code></li> <li>Description: MyDisease.info API for querying disease information</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, disease ontology data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mygene_gene","title":"mygene_gene","text":"<ul> <li>URL: <code>https://mygene.info/v3/gene</code></li> <li>Description: MyGene.info API for fetching specific gene details</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, gene annotation data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#mygene_query","title":"mygene_query","text":"<ul> <li>URL: <code>https://mygene.info/v3/query</code></li> <li>Description: MyGene.info API for querying gene information</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 10 requests/second</li> <li>Compliance Notes: Public BioThings service, gene annotation data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#myvariant_query","title":"myvariant_query","text":"<ul> <li>URL: <code>https://myvariant.info/v1/query</code></li> <li>Description: MyVariant.info API for querying genetic variants</li> <li>Data Types: genetic_variants</li> <li>Rate Limit: 1000 requests/hour (anonymous)</li> <li>Compliance Notes: Public service aggregating variant databases, no patient data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#myvariant_variant","title":"myvariant_variant","text":"<ul> <li>URL: <code>https://myvariant.info/v1/variant</code></li> <li>Description: MyVariant.info API for fetching specific variant details</li> <li>Data Types: genetic_variants</li> <li>Rate Limit: 1000 requests/hour (anonymous)</li> <li>Compliance Notes: Public service aggregating variant databases, no patient data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cancer-genomics","title":"Cancer Genomics","text":""},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_api","title":"cbioportal_api","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api</code></li> <li>Description: cBioPortal API for cancer genomics data</li> <li>Data Types: cancer_mutations, clinical_trial_data</li> <li>Rate Limit: 5 requests/second</li> <li>Authentication: Optional API token for increased rate limits</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, aggregate cancer genomics</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_cancer_types","title":"cbioportal_cancer_types","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api/cancer-types</code></li> <li>Description: cBioPortal API for cancer type hierarchy</li> <li>Data Types: cancer_mutations</li> <li>Rate Limit: 5 requests/second</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, cancer type metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_genes","title":"cbioportal_genes","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api/genes</code></li> <li>Description: cBioPortal API for gene information</li> <li>Data Types: gene_annotations</li> <li>Rate Limit: 5 requests/second</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, gene metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_molecular_profiles","title":"cbioportal_molecular_profiles","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api/molecular-profiles</code></li> <li>Description: cBioPortal API for molecular profiles</li> <li>Data Types: cancer_mutations</li> <li>Rate Limit: 5 requests/second</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, study metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_mutations","title":"cbioportal_mutations","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api/mutations</code></li> <li>Description: cBioPortal API for mutation data</li> <li>Data Types: cancer_mutations</li> <li>Rate Limit: 5 requests/second</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, aggregate mutation data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#cbioportal_studies","title":"cbioportal_studies","text":"<ul> <li>URL: <code>https://www.cbioportal.org/api/studies</code></li> <li>Description: cBioPortal API for cancer studies</li> <li>Data Types: clinical_trial_data, cancer_mutations</li> <li>Rate Limit: 5 requests/second</li> <li>Compliance Notes: Public MSKCC/Dana-Farber service, study metadata</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#regulatory-data","title":"Regulatory Data","text":""},{"location":"developer-guides/03-third-party-endpoints/#fda_drug_shortages","title":"fda_drug_shortages","text":"<ul> <li>URL: <code>https://www.fda.gov/media/169066/download</code></li> <li>Description: FDA Drug Shortages database (cached locally)</li> <li>Data Types: drug_labels</li> <li>Rate Limit: Cached with 24-hour TTL</li> <li>Authentication: None required</li> <li>Compliance Notes: Public FDA service, drug shortage status information</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#openfda_device_events","title":"openfda_device_events","text":"<ul> <li>URL: <code>https://api.fda.gov/device/event.json</code></li> <li>Description: FDA MAUDE database for medical device adverse events</li> <li>Data Types: device_events</li> <li>Rate Limit: 40 requests/minute (240 with API key)</li> <li>Authentication: Optional OPENFDA_API_KEY for increased rate limits</li> <li>Compliance Notes: Public FDA service, device malfunction and adverse event reports</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#openfda_drug_enforcement","title":"openfda_drug_enforcement","text":"<ul> <li>URL: <code>https://api.fda.gov/drug/enforcement.json</code></li> <li>Description: FDA Enforcement database for drug recall information</li> <li>Data Types: adverse_events</li> <li>Rate Limit: 40 requests/minute (240 with API key)</li> <li>Authentication: Optional OPENFDA_API_KEY for increased rate limits</li> <li>Compliance Notes: Public FDA service, drug recall and enforcement actions</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#openfda_drug_events","title":"openfda_drug_events","text":"<ul> <li>URL: <code>https://api.fda.gov/drug/event.json</code></li> <li>Description: FDA Adverse Event Reporting System (FAERS) for drug safety data</li> <li>Data Types: adverse_events</li> <li>Rate Limit: 40 requests/minute (240 with API key)</li> <li>Authentication: Optional OPENFDA_API_KEY for increased rate limits</li> <li>Compliance Notes: Public FDA service, voluntary adverse event reports, no PII</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#openfda_drug_labels","title":"openfda_drug_labels","text":"<ul> <li>URL: <code>https://api.fda.gov/drug/label.json</code></li> <li>Description: FDA Structured Product Labeling (SPL) for drug prescribing information</li> <li>Data Types: drug_labels</li> <li>Rate Limit: 40 requests/minute (240 with API key)</li> <li>Authentication: Optional OPENFDA_API_KEY for increased rate limits</li> <li>Compliance Notes: Public FDA service, official drug labeling data</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#openfda_drugsfda","title":"openfda_drugsfda","text":"<ul> <li>URL: <code>https://api.fda.gov/drug/drugsfda.json</code></li> <li>Description: FDA Drugs@FDA database for drug approval information</li> <li>Data Types: drug_labels</li> <li>Rate Limit: 40 requests/minute (240 with API key)</li> <li>Authentication: Optional OPENFDA_API_KEY for increased rate limits</li> <li>Compliance Notes: Public FDA service, official drug approval records</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#domain-summary","title":"Domain Summary","text":"Domain Category Endpoints api.biorxiv.org biomedical_literature 2 api.fda.gov regulatory_data 5 api.gdc.cancer.gov variant_databases 2 clinicaltrials.gov clinical_trials 1 clinicaltrialsapi.cancer.gov clinical_trials 5 mychem.info variant_databases 2 mydisease.info variant_databases 2 mygene.info variant_databases 2 myvariant.info variant_databases 2 rest.ensembl.org variant_databases 1 www.cbioportal.org cancer_genomics 6 www.ebi.ac.uk biomedical_literature 1 www.fda.gov regulatory_data 1 www.ncbi.nlm.nih.gov biomedical_literature 3"},{"location":"developer-guides/03-third-party-endpoints/#compliance-and-privacy","title":"Compliance and Privacy","text":"<p>All endpoints accessed by BioMCP:</p> <ul> <li>Use publicly available APIs</li> <li>Do not transmit personally identifiable information (PII)</li> <li>Access only aggregate or de-identified data</li> <li>Comply with respective terms of service</li> </ul>"},{"location":"developer-guides/03-third-party-endpoints/#network-control","title":"Network Control","text":"<p>For air-gapped or restricted environments, BioMCP supports:</p> <ul> <li>Offline mode via <code>BIOMCP_OFFLINE=true</code> environment variable</li> <li>Custom proxy configuration via standard HTTP(S)_PROXY variables</li> <li>SSL certificate pinning for enhanced security</li> </ul>"},{"location":"developer-guides/04-transport-protocol/","title":"Transport Protocol Guide","text":"<p>This guide explains BioMCP's transport protocol options, with a focus on the new Streamable HTTP transport that provides better scalability and reliability for production deployments.</p>"},{"location":"developer-guides/04-transport-protocol/#overview","title":"Overview","text":"<p>BioMCP supports multiple transport protocols to accommodate different deployment scenarios:</p> Transport Use Case Endpoint Protocol Version STDIO Local development, direct Claude integration N/A All Worker/SSE Legacy cloud deployments <code>/sse</code> Pre-2025 Streamable HTTP Modern cloud deployments <code>/mcp</code> 2025-03-26+"},{"location":"developer-guides/04-transport-protocol/#streamable-http-transport","title":"Streamable HTTP Transport","text":""},{"location":"developer-guides/04-transport-protocol/#what-is-streamable-http","title":"What is Streamable HTTP?","text":"<p>Streamable HTTP is the latest MCP transport protocol (specification version 2025-03-26) that provides:</p> <ul> <li>Single endpoint (<code>/mcp</code>) for all operations</li> <li>Dynamic response modes: JSON for quick operations, SSE for long-running tasks</li> <li>Session management via <code>session_id</code> query parameter</li> <li>Better scalability: No permanent connections required</li> <li>Automatic reconnection and session recovery</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#architecture","title":"Architecture","text":"<p>The Streamable HTTP transport follows this flow:</p> <ol> <li>MCP Client sends POST request to <code>/mcp</code> endpoint</li> <li>BioMCP Server processes the request</li> <li>Response Type determined by operation:</li> <li>Quick operations return JSON response</li> <li>Long operations return SSE stream</li> <li>Session Management maintains state via session_id parameter</li> </ol>"},{"location":"developer-guides/04-transport-protocol/#implementation-details","title":"Implementation Details","text":"<p>BioMCP leverages FastMCP's native streamable HTTP support:</p> <pre><code># In core.py\nmcp_app = FastMCP(\n    name=\"BioMCP\",\n    stateless_http=True,  # Enables streamable HTTP\n)\n</code></pre> <p>The transport is automatically handled by FastMCP 1.12.3+, providing:</p> <ul> <li>Request routing</li> <li>Session management</li> <li>Response type negotiation</li> <li>Error handling</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#migration-guide","title":"Migration Guide","text":""},{"location":"developer-guides/04-transport-protocol/#from-sse-to-streamable-http","title":"From SSE to Streamable HTTP","text":"<p>If you're currently using the legacy SSE transport, migrate to streamable HTTP:</p>"},{"location":"developer-guides/04-transport-protocol/#1-update-server-configuration","title":"1. Update Server Configuration","text":"<p>Before (SSE/Worker mode):</p> <pre><code>biomcp run --mode worker\n</code></pre> <p>After (Streamable HTTP):</p> <pre><code>biomcp run --mode streamable_http\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#2-update-client-configuration","title":"2. Update Client Configuration","text":"<p>MCP Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with . biomcp run --mode streamable_http\n</code></pre> <p>Claude Desktop Configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-p\",\n        \"8000:8000\",\n        \"biomcp:latest\",\n        \"biomcp\",\n        \"run\",\n        \"--mode\",\n        \"streamable_http\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#3-update-cloudflare-worker","title":"3. Update Cloudflare Worker","text":"<p>The worker now supports both GET (legacy SSE) and POST (streamable HTTP) on the <code>/mcp</code> endpoint:</p> <pre><code>// Automatically routes based on method\n.get(\"/mcp\", async (c) =&gt; {\n  // Legacy SSE transport\n})\n.post(\"/mcp\", async (c) =&gt; {\n  // Streamable HTTP transport\n})\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#backward-compatibility","title":"Backward Compatibility","text":"<p>All legacy endpoints remain functional:</p> <ul> <li><code>/sse</code> - Server-sent events transport</li> <li><code>/health</code> - Health check endpoint</li> <li><code>/events</code> - Event streaming endpoint</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#configuration-options","title":"Configuration Options","text":""},{"location":"developer-guides/04-transport-protocol/#server-modes","title":"Server Modes","text":"<pre><code># Local development (STDIO)\nbiomcp run\n\n# Legacy SSE transport\nbiomcp run --mode worker\n\n# Modern streamable HTTP\nbiomcp run --mode streamable_http --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>MCP_TRANSPORT</code> Override transport mode None <code>MCP_HOST</code> Server bind address 0.0.0.0 <code>MCP_PORT</code> Server port 8000"},{"location":"developer-guides/04-transport-protocol/#session-management","title":"Session Management","text":"<p>Streamable HTTP uses session IDs to maintain state across requests:</p> <pre><code>POST /mcp?session_id=abc123 HTTP/1.1\nContent-Type: application/json\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {...}\n}\n</code></pre> <p>Sessions are:</p> <ul> <li>Created automatically on first request</li> <li>Maintained in server memory</li> <li>Cleaned up after inactivity timeout</li> <li>Isolated between different clients</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#performance-considerations","title":"Performance Considerations","text":""},{"location":"developer-guides/04-transport-protocol/#response-mode-selection","title":"Response Mode Selection","text":"<p>The server automatically selects the optimal response mode:</p> Operation Type Response Mode Example Quick queries JSON <code>search(limit=10)</code> Large results SSE <code>search(limit=1000)</code> Real-time updates SSE Thinking tool progress"},{"location":"developer-guides/04-transport-protocol/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use session IDs for related requests to avoid re-initialization</li> <li>Batch operations when possible to reduce round trips</li> <li>Set appropriate timeouts for long-running operations</li> <li>Monitor response times to identify bottlenecks</li> </ol>"},{"location":"developer-guides/04-transport-protocol/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guides/04-transport-protocol/#common-issues","title":"Common Issues","text":""},{"location":"developer-guides/04-transport-protocol/#1-connection-refused","title":"1. Connection Refused","text":"<pre><code>Error: connect ECONNREFUSED 127.0.0.1:8000\n</code></pre> <p>Solution: Ensure server is running with <code>--host 0.0.0.0</code> for Docker deployments.</p>"},{"location":"developer-guides/04-transport-protocol/#2-session-not-found","title":"2. Session Not Found","text":"<pre><code>Error: Session 'xyz' not found\n</code></pre> <p>Solution: Session may have expired. Omit session_id to create new session.</p>"},{"location":"developer-guides/04-transport-protocol/#3-timeout-on-large-results","title":"3. Timeout on Large Results","text":"<pre><code>Error: Request timeout after 30s\n</code></pre> <p>Solution: Increase client timeout or reduce result size with <code>limit</code> parameter.</p>"},{"location":"developer-guides/04-transport-protocol/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot transport issues:</p> <pre><code>LOG_LEVEL=debug biomcp run --mode streamable_http\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#security-considerations","title":"Security Considerations","text":""},{"location":"developer-guides/04-transport-protocol/#authentication","title":"Authentication","text":"<p>BioMCP does not implement authentication at the transport layer. Secure your deployment using:</p> <ul> <li>API Gateway: AWS API Gateway, Kong, etc.</li> <li>Reverse Proxy: Nginx with auth modules</li> <li>Cloud IAM: Platform-specific access controls</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#rate-limiting","title":"Rate Limiting","text":"<p>Implement rate limiting at the infrastructure layer:</p> <pre><code># Nginx example\nlimit_req_zone $binary_remote_addr zone=mcp:10m rate=10r/s;\n\nlocation /mcp {\n    limit_req zone=mcp burst=20;\n    proxy_pass http://biomcp:8000;\n}\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#cors-configuration","title":"CORS Configuration","text":"<p>For browser-based clients, configure CORS headers:</p> <pre><code># Handled automatically by FastMCP when stateless_http=True\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#monitoring","title":"Monitoring","text":""},{"location":"developer-guides/04-transport-protocol/#health-checks","title":"Health Checks","text":"<pre><code># Check server health\ncurl http://localhost:8000/health\n\n# Response\n{\"status\": \"ok\", \"transport\": \"streamable_http\"}\n</code></pre>"},{"location":"developer-guides/04-transport-protocol/#metrics","title":"Metrics","text":"<p>Monitor these key metrics:</p> <ul> <li>Request rate on <code>/mcp</code> endpoint</li> <li>Response time percentiles (p50, p95, p99)</li> <li>Session count and duration</li> <li>Error rate by error type</li> </ul>"},{"location":"developer-guides/04-transport-protocol/#next-steps","title":"Next Steps","text":"<ul> <li>Review MCP Specification for protocol details</li> </ul> <p>For questions or issues, please visit our GitHub repository.</p>"},{"location":"developer-guides/05-error-handling/","title":"Error Handling Guide","text":""},{"location":"developer-guides/05-error-handling/#overview","title":"Overview","text":"<p>BioMCP uses a consistent error handling pattern across all HTTP operations. This guide explains the error types, when they occur, and how to handle them.</p>"},{"location":"developer-guides/05-error-handling/#error-structure","title":"Error Structure","text":"<p>All HTTP operations return a tuple: <code>(data, error)</code> where one is always <code>None</code>.</p> <pre><code>data, error = await http_client.request_api(...)\nif error:\n    # Handle error\n    logger.error(f\"Request failed: {error.code} - {error.message}\")\nelse:\n    # Process data\n    process_result(data)\n</code></pre>"},{"location":"developer-guides/05-error-handling/#error-types","title":"Error Types","text":""},{"location":"developer-guides/05-error-handling/#network-errors","title":"Network Errors","text":"<ul> <li>When: Connection timeout, DNS resolution failure, network unreachable</li> <li>Error Code: Various HTTP client exceptions</li> <li>Handling: Retry with exponential backoff or fail gracefully</li> </ul>"},{"location":"developer-guides/05-error-handling/#http-status-errors","title":"HTTP Status Errors","text":"<ul> <li>When: Server returns 4xx or 5xx status codes</li> <li>Error Codes:</li> <li><code>400-499</code>: Client errors (bad request, unauthorized, not found)</li> <li><code>500-599</code>: Server errors (internal error, service unavailable)</li> <li>Handling:</li> <li>4xx: Fix request parameters or authentication</li> <li>5xx: Retry with backoff or use cached data</li> </ul>"},{"location":"developer-guides/05-error-handling/#circuit-breaker-errors","title":"Circuit Breaker Errors","text":"<ul> <li>When: Too many consecutive failures to a domain</li> <li>Error: Circuit breaker opens to prevent cascading failures</li> <li>Handling: Wait for recovery timeout or use alternative data source</li> </ul>"},{"location":"developer-guides/05-error-handling/#offline-mode-errors","title":"Offline Mode Errors","text":"<ul> <li>When: <code>BIOMCP_OFFLINE=true</code> and no cached data available</li> <li>Error: Request blocked in offline mode</li> <li>Handling: Use cached data only or inform user about offline status</li> </ul>"},{"location":"developer-guides/05-error-handling/#parse-errors","title":"Parse Errors","text":"<ul> <li>When: Response is not valid JSON or doesn't match expected schema</li> <li>Error: JSON decode error or validation error</li> <li>Handling: Log error and treat as service issue</li> </ul>"},{"location":"developer-guides/05-error-handling/#best-practices","title":"Best Practices","text":""},{"location":"developer-guides/05-error-handling/#1-always-check-errors","title":"1. Always Check Errors","text":"<pre><code># \u274c Bad - ignoring error\ndata, _ = await http_client.request_api(...)\nprocess(data)  # data might be None!\n\n# \u2705 Good - checking error\ndata, error = await http_client.request_api(...)\nif error:\n    logger.warning(f\"Failed to fetch data: {error}\")\n    return None\nprocess(data)\n</code></pre>"},{"location":"developer-guides/05-error-handling/#2-provide-context-in-error-messages","title":"2. Provide Context in Error Messages","text":"<pre><code># \u274c Bad - generic error\nif error:\n    logger.error(\"Request failed\")\n\n# \u2705 Good - contextual error\nif error:\n    logger.error(f\"Failed to fetch gene {gene_id} from cBioPortal: {error.message}\")\n</code></pre>"},{"location":"developer-guides/05-error-handling/#3-graceful-degradation","title":"3. Graceful Degradation","text":"<pre><code>async def get_variant_with_fallback(variant_id: str):\n    # Try primary source\n    data, error = await primary_source.get_variant(variant_id)\n    if not error:\n        return data\n\n    logger.warning(f\"Primary source failed: {error}, trying secondary\")\n\n    # Try secondary source\n    data, error = await secondary_source.get_variant(variant_id)\n    if not error:\n        return data\n\n    # Use cached data as last resort\n    return get_cached_variant(variant_id)\n</code></pre>"},{"location":"developer-guides/05-error-handling/#4-user-friendly-error-messages","title":"4. User-Friendly Error Messages","text":"<pre><code>def format_error_for_user(error: RequestError) -&gt; str:\n    if error.code &gt;= 500:\n        return \"The service is temporarily unavailable. Please try again later.\"\n    elif error.code == 404:\n        return \"The requested data was not found.\"\n    elif error.code == 401:\n        return \"Authentication required. Please check your credentials.\"\n    elif \"OFFLINE\" in str(error):\n        return \"You are in offline mode. Only cached data is available.\"\n    else:\n        return \"An error occurred while fetching data. Please try again.\"\n</code></pre>"},{"location":"developer-guides/05-error-handling/#testing-error-conditions","title":"Testing Error Conditions","text":""},{"location":"developer-guides/05-error-handling/#1-simulate-network-errors","title":"1. Simulate Network Errors","text":"<pre><code>with patch(\"biomcp.http_client.call_http\") as mock:\n    mock.side_effect = Exception(\"Network error\")\n    data, error = await client.fetch_data()\n    assert error is not None\n    assert data is None\n</code></pre>"},{"location":"developer-guides/05-error-handling/#2-test-circuit-breaker","title":"2. Test Circuit Breaker","text":"<pre><code># Simulate multiple failures\nfor _ in range(5):\n    with patch(\"biomcp.http_client.call_http\") as mock:\n        mock.return_value = (500, \"Server Error\")\n        await client.fetch_data()\n\n# Circuit should be open\ndata, error = await client.fetch_data()\nassert error is not None\nassert \"circuit\" in error.message.lower()\n</code></pre>"},{"location":"developer-guides/05-error-handling/#3-test-offline-mode","title":"3. Test Offline Mode","text":"<pre><code>with patch.dict(os.environ, {\"BIOMCP_OFFLINE\": \"true\"}):\n    data, error = await client.fetch_data()\n    # Should only return cached data or error\n</code></pre>"},{"location":"developer-guides/05-error-handling/#common-patterns","title":"Common Patterns","text":""},{"location":"developer-guides/05-error-handling/#retry-with-backoff","title":"Retry with Backoff","text":"<p>The centralized HTTP client automatically retries with exponential backoff for:</p> <ul> <li>Network errors</li> <li>5xx server errors</li> <li>Rate limit errors (429)</li> </ul>"},{"location":"developer-guides/05-error-handling/#caching","title":"Caching","text":"<p>Failed requests don't overwrite cached data, ensuring availability during outages.</p>"},{"location":"developer-guides/05-error-handling/#rate-limiting","title":"Rate Limiting","text":"<p>Requests are automatically rate-limited per domain to prevent overwhelming services.</p>"},{"location":"developer-guides/05-error-handling/#debugging","title":"Debugging","text":"<p>Enable debug logging to see all HTTP requests and errors:</p> <pre><code>import logging\nlogging.getLogger(\"biomcp.http_client\").setLevel(logging.DEBUG)\n</code></pre> <p>This will show:</p> <ul> <li>All HTTP requests with URLs and methods</li> <li>Response status codes and times</li> <li>Error details and retry attempts</li> <li>Circuit breaker state changes</li> </ul>"},{"location":"developer-guides/06-http-client-and-caching/","title":"BioMCP HTTP Client Guide","text":""},{"location":"developer-guides/06-http-client-and-caching/#overview","title":"Overview","text":"<p>BioMCP uses a centralized HTTP client for all external API calls. This provides:</p> <ul> <li>Consistent error handling and retry logic</li> <li>Request/response caching</li> <li>Rate limiting per domain</li> <li>Circuit breaker for fault tolerance</li> <li>Offline mode support</li> <li>Comprehensive endpoint tracking</li> </ul>"},{"location":"developer-guides/06-http-client-and-caching/#migration-from-direct-http-libraries","title":"Migration from Direct HTTP Libraries","text":""},{"location":"developer-guides/06-http-client-and-caching/#before-direct-httpx-usage","title":"Before (Direct httpx usage):","text":"<pre><code>import httpx\n\nasync def fetch_gene(gene: str):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.example.com/genes/{gene}\")\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#after-centralized-client","title":"After (Centralized client):","text":"<pre><code>from biomcp import http_client\n\nasync def fetch_gene(gene: str):\n    data, error = await http_client.request_api(\n        url=f\"https://api.example.com/genes/{gene}\",\n        request={},\n        domain=\"example\"\n    )\n    if error:\n        # Handle error consistently\n        return None\n    return data\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#error-handling","title":"Error Handling","text":"<p>The centralized client uses a consistent error handling pattern:</p> <pre><code>result, error = await http_client.request_api(...)\n\nif error:\n    # error is a RequestError object with:\n    # - error.code: HTTP status code or error type\n    # - error.message: Human-readable error message\n    # - error.details: Additional context\n    logger.error(f\"Request failed: {error.message}\")\n    return None  # or handle appropriately\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#error-handling-guidelines","title":"Error Handling Guidelines","text":"<ol> <li>For optional data: Return <code>None</code> when the data is not critical</li> <li>For required data: Raise an exception or return an error to the caller</li> <li>For batch operations: Collect errors and report at the end</li> <li>For user-facing operations: Provide clear, actionable error messages</li> </ol>"},{"location":"developer-guides/06-http-client-and-caching/#creating-domain-specific-adapters","title":"Creating Domain-Specific Adapters","text":"<p>For complex APIs, create an adapter class:</p> <pre><code>from biomcp import http_client\nfrom biomcp.http_client import RequestError\n\nclass MyAPIAdapter:\n    \"\"\"Adapter for MyAPI using centralized HTTP client.\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://api.example.com\"\n\n    async def get_resource(self, resource_id: str) -&gt; tuple[dict | None, RequestError | None]:\n        \"\"\"Fetch a resource by ID.\n\n        Returns:\n            Tuple of (data, error) where one is always None\n        \"\"\"\n        return await http_client.request_api(\n            url=f\"{self.base_url}/resources/{resource_id}\",\n            request={},\n            domain=\"example\",\n            endpoint_key=\"example_resources\"\n        )\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#configuration","title":"Configuration","text":""},{"location":"developer-guides/06-http-client-and-caching/#cache-ttl-time-to-live","title":"Cache TTL (Time To Live)","text":"<pre><code># Cache for 1 hour (3600 seconds)\ndata, error = await http_client.request_api(\n    url=url,\n    request=request,\n    cache_ttl=3600\n)\n\n# Disable caching for this request\ndata, error = await http_client.request_api(\n    url=url,\n    request=request,\n    cache_ttl=0\n)\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#rate-limiting","title":"Rate Limiting","text":"<p>Rate limits are configured per domain in <code>http_client.py</code>:</p> <pre><code># Default rate limits\nrate_limits = {\n    \"ncbi.nlm.nih.gov\": 20,  # 20 requests/second\n    \"clinicaltrials.gov\": 10,  # 10 requests/second\n    \"myvariant.info\": 1000/3600,  # 1000 requests/hour\n}\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#circuit-breaker","title":"Circuit Breaker","text":"<p>The circuit breaker prevents cascading failures:</p> <ul> <li>Closed: Normal operation</li> <li>Open: Failing fast after threshold exceeded</li> <li>Half-Open: Testing if service recovered</li> </ul> <p>Configure thresholds:</p> <pre><code>CIRCUIT_BREAKER_FAILURE_THRESHOLD = 5  # Open after 5 failures\nCIRCUIT_BREAKER_RECOVERY_TIMEOUT = 60  # Try again after 60 seconds\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#offline-mode","title":"Offline Mode","text":"<p>Enable offline mode to only serve cached responses:</p> <pre><code>export BIOMCP_OFFLINE=true\nbiomcp run\n</code></pre> <p>In offline mode:</p> <ul> <li>Only cached responses are returned</li> <li>No external HTTP requests are made</li> <li>Missing cache entries return None with appropriate error</li> </ul>"},{"location":"developer-guides/06-http-client-and-caching/#performance-tuning","title":"Performance Tuning","text":""},{"location":"developer-guides/06-http-client-and-caching/#connection-pooling","title":"Connection Pooling","text":"<p>The HTTP client maintains connection pools per domain:</p> <pre><code># Configure in http_client_simple.py\nlimits = httpx.Limits(\n    max_keepalive_connections=20,\n    max_connections=100,\n    keepalive_expiry=30\n)\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#concurrent-requests","title":"Concurrent Requests","text":"<p>For parallel requests to the same API:</p> <pre><code>import asyncio\n\n# Fetch multiple resources concurrently\ntasks = [\n    http_client.request_api(f\"/resource/{i}\", {}, domain=\"example\")\n    for i in range(10)\n]\nresults = await asyncio.gather(*tasks)\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"developer-guides/06-http-client-and-caching/#request-metrics","title":"Request Metrics","text":"<p>The client tracks metrics per endpoint:</p> <ul> <li>Request count</li> <li>Error count</li> <li>Cache hit/miss ratio</li> <li>Average response time</li> </ul> <p>Access metrics:</p> <pre><code>from biomcp.http_client import get_metrics\nmetrics = get_metrics()\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#debug-logging","title":"Debug Logging","text":"<p>Enable debug logging to see all HTTP requests:</p> <pre><code>import logging\nlogging.getLogger(\"biomcp.http_client\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"developer-guides/06-http-client-and-caching/#best-practices","title":"Best Practices","text":"<ol> <li>Always use the centralized client for external HTTP calls</li> <li>Register new endpoints in the endpoint registry</li> <li>Set appropriate cache TTLs based on data volatility</li> <li>Handle errors gracefully with user-friendly messages</li> <li>Test with offline mode to ensure cache coverage</li> <li>Monitor rate limits to avoid API throttling</li> <li>Use domain-specific adapters for complex APIs</li> </ol>"},{"location":"developer-guides/06-http-client-and-caching/#endpoint-registration","title":"Endpoint Registration","text":"<p>Register new endpoints in <code>endpoint_registry.py</code>:</p> <pre><code>registry.register(\n    \"my_api_endpoint\",\n    EndpointInfo(\n        url=\"https://api.example.com/v1/data\",\n        category=EndpointCategory.BIOMEDICAL_LITERATURE,\n        data_types=[DataType.RESEARCH_ARTICLES],\n        description=\"My API for fetching data\",\n        compliance_notes=\"Public API, no PII\",\n        rate_limit=\"100 requests/minute\"\n    )\n)\n</code></pre> <p>This ensures the endpoint is documented and tracked properly.</p>"},{"location":"developer-guides/07-performance-optimizations/","title":"Performance Optimizations","text":"<p>This document describes the performance optimizations implemented in BioMCP to improve response times and throughput.</p>"},{"location":"developer-guides/07-performance-optimizations/#overview","title":"Overview","text":"<p>BioMCP has been optimized for high-performance biomedical data retrieval through several key improvements:</p> <ul> <li>65% faster test execution (from ~120s to ~42s)</li> <li>Reduced API calls through intelligent caching and batching</li> <li>Lower latency via connection pooling and prefetching</li> <li>Better resource utilization with parallel processing</li> </ul>"},{"location":"developer-guides/07-performance-optimizations/#key-optimizations","title":"Key Optimizations","text":""},{"location":"developer-guides/07-performance-optimizations/#1-connection-pooling","title":"1. Connection Pooling","text":"<p>HTTP connections are now reused across requests, eliminating connection establishment overhead.</p> <p>Configuration:</p> <ul> <li><code>BIOMCP_USE_CONNECTION_POOL</code> - Enable/disable pooling (default: \"true\")</li> <li>Automatically manages pools per event loop</li> <li>Graceful cleanup on shutdown</li> </ul> <p>Impact: ~30% reduction in request latency for sequential operations</p>"},{"location":"developer-guides/07-performance-optimizations/#2-parallel-test-execution","title":"2. Parallel Test Execution","text":"<p>Tests now run in parallel using pytest-xdist, dramatically reducing test suite execution time.</p> <p>Usage:</p> <pre><code>make test  # Automatically uses parallel execution\n</code></pre> <p>Impact: ~5x faster test execution</p>"},{"location":"developer-guides/07-performance-optimizations/#3-request-batching","title":"3. Request Batching","text":"<p>Multiple API requests are batched together when possible, particularly for cBioPortal queries.</p> <p>Features:</p> <ul> <li>Automatic batching based on size/time thresholds</li> <li>Configurable batch size (default: 5 for cBioPortal)</li> <li>Error isolation per request</li> </ul> <p>Impact: Up to 80% reduction in API calls for bulk operations</p>"},{"location":"developer-guides/07-performance-optimizations/#4-smart-caching","title":"4. Smart Caching","text":"<p>Multiple caching layers optimize repeated queries:</p> <ul> <li>LRU Cache: Memory-bounded caching for recent requests</li> <li>Hash-based keys: 10x faster cache key generation</li> <li>Shared validation context: Eliminates redundant gene/entity validations</li> </ul> <p>Configuration:</p> <ul> <li>Cache size: 1000 entries (configurable)</li> <li>TTL: 5-30 minutes depending on data type</li> </ul>"},{"location":"developer-guides/07-performance-optimizations/#5-prefetching","title":"5. Prefetching","text":"<p>Common entities are prefetched on startup to warm caches:</p> <ul> <li>Top genes: BRAF, EGFR, TP53, KRAS, etc.</li> <li>Common diseases: lung cancer, breast cancer, etc.</li> <li>Frequent chemicals: osimertinib, pembrolizumab, etc.</li> </ul> <p>Impact: First queries for common entities are instant</p>"},{"location":"developer-guides/07-performance-optimizations/#6-pagination-support","title":"6. Pagination Support","text":"<p>Europe PMC searches now use pagination for large result sets:</p> <ul> <li>Optimal page size: 25 results</li> <li>Progressive loading</li> <li>Memory-efficient processing</li> </ul>"},{"location":"developer-guides/07-performance-optimizations/#7-conditional-metrics","title":"7. Conditional Metrics","text":"<p>Performance metrics are only collected when explicitly enabled, reducing overhead.</p> <p>Configuration:</p> <ul> <li><code>BIOMCP_METRICS_ENABLED</code> - Enable metrics (default: \"false\")</li> </ul>"},{"location":"developer-guides/07-performance-optimizations/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"developer-guides/07-performance-optimizations/#api-response-times","title":"API Response Times","text":"Operation Before After Improvement Single gene search 850ms 320ms 62% Bulk variant lookup 4.2s 1.1s 74% Article search with cBioPortal 2.1s 780ms 63%"},{"location":"developer-guides/07-performance-optimizations/#resource-usage","title":"Resource Usage","text":"Metric Before After Improvement Memory (idle) 145MB 152MB +5% Memory (peak) 512MB 385MB -25% CPU (avg) 35% 28% -20%"},{"location":"developer-guides/07-performance-optimizations/#best-practices","title":"Best Practices","text":"<ol> <li>Keep connection pooling enabled unless experiencing issues</li> <li>Use the unified search methods to benefit from parallel execution</li> <li>Batch operations when performing multiple lookups</li> <li>Monitor cache hit rates in production environments</li> </ol>"},{"location":"developer-guides/07-performance-optimizations/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer-guides/07-performance-optimizations/#connection-pool-issues","title":"Connection Pool Issues","text":"<p>If experiencing connection errors:</p> <ol> <li>Disable pooling: <code>export BIOMCP_USE_CONNECTION_POOL=false</code></li> <li>Check for firewall/proxy issues</li> <li>Verify SSL certificates</li> </ol>"},{"location":"developer-guides/07-performance-optimizations/#memory-usage","title":"Memory Usage","text":"<p>If memory usage is high:</p> <ol> <li>Reduce cache size in <code>request_cache.py</code></li> <li>Lower connection pool limits</li> <li>Disable prefetching by removing the lifespan hook</li> </ol>"},{"location":"developer-guides/07-performance-optimizations/#performance-regression","title":"Performance Regression","text":"<p>To identify performance issues:</p> <ol> <li>Enable metrics: <code>export BIOMCP_METRICS_ENABLED=true</code></li> <li>Check slow operations in logs</li> <li>Profile with <code>py-spy</code> or similar tools</li> </ol>"},{"location":"developer-guides/07-performance-optimizations/#future-optimizations","title":"Future Optimizations","text":"<p>Planned improvements include:</p> <ul> <li>GraphQL batching for complex queries</li> <li>Redis integration for distributed caching</li> <li>WebSocket support for real-time updates</li> <li>GPU acceleration for variant analysis</li> </ul>"},{"location":"getting-started/01-quickstart-cli/","title":"Quickstart: BioMCP CLI","text":"<p>Get started with BioMCP in under 5 minutes! This guide walks you through installation and your first biomedical search.</p>"},{"location":"getting-started/01-quickstart-cli/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>uv package manager (recommended) or pip</li> </ul>"},{"location":"getting-started/01-quickstart-cli/#installation","title":"Installation","text":""},{"location":"getting-started/01-quickstart-cli/#option-1-using-uv-recommended","title":"Option 1: Using uv (Recommended)","text":"<pre><code># Install uv if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install BioMCP\nuv tool install biomcp\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#option-2-using-pip","title":"Option 2: Using pip","text":"<pre><code>pip install biomcp\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#your-first-search","title":"Your First Search","text":"<p>Let's search for recent articles about BRAF mutations in melanoma:</p> <pre><code>biomcp article search \\\n  --gene BRAF --disease melanoma --limit 5\n</code></pre> <p>This command:</p> <ul> <li>Searches PubMed/PubTator3 for articles</li> <li>Filters by BRAF gene and melanoma disease</li> <li>Returns the 5 most recent results</li> <li>Automatically includes cBioPortal cancer genomics data</li> <li>Includes preprints from bioRxiv/medRxiv by default</li> </ul>"},{"location":"getting-started/01-quickstart-cli/#understanding-the-output","title":"Understanding the Output","text":"<p>The search returns:</p> <ol> <li>cBioPortal Summary (if gene specified): Cancer genomics data showing mutation frequencies and hotspots</li> <li>Article Results: Each result includes:</li> <li>Title and authors</li> <li>Journal and publication date</li> <li>PubMed ID and direct link</li> <li>Abstract snippet</li> <li>Annotated entities (genes, diseases, chemicals)</li> </ol>"},{"location":"getting-started/01-quickstart-cli/#essential-commands","title":"Essential Commands","text":""},{"location":"getting-started/01-quickstart-cli/#search-clinical-trials","title":"Search Clinical Trials","text":"<p>Find active trials for lung cancer:</p> <pre><code>biomcp trial search \\\n  --condition \"lung cancer\" \\\n  --status RECRUITING --limit 5\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#get-gene-information","title":"Get Gene Information","text":"<p>Retrieve details about the TP53 tumor suppressor:</p> <pre><code>biomcp gene get TP53\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#look-up-drug-information","title":"Look Up Drug Information","text":"<p>Get details about imatinib (Gleevec):</p> <pre><code>biomcp drug get imatinib\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#search-for-genetic-variants","title":"Search for Genetic Variants","text":"<p>Find pathogenic variants in the BRCA1 gene:</p> <pre><code>biomcp variant search \\\n  --gene BRCA1 --significance pathogenic \\\n  --limit 5\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#analyze-a-clinically-actionable-variant","title":"Analyze a Clinically Actionable Variant","text":"<p>Get OncoKB clinical interpretations for known cancer variants. BioMCP uses a demo server for key genes like BRAF out-of-the-box, no setup required!</p> <pre><code># Get clinical actionability for BRAF V600E\nbiomcp variant search --gene BRAF\n</code></pre> <p>This will automatically prepend an \"OncoKB Gene Summary\" table to the search results.</p>"},{"location":"getting-started/01-quickstart-cli/#next-steps","title":"Next Steps","text":""},{"location":"getting-started/01-quickstart-cli/#set-up-api-keys-optional-but-recommended","title":"Set Up API Keys (Optional but Recommended)","text":"<p>Some features require API keys for enhanced functionality:</p> <pre><code># For NCI clinical trials database\nexport NCI_API_KEY=\"your-key-here\"\n\n# For AlphaGenome variant predictions\nexport ALPHAGENOME_API_KEY=\"your-key-here\"\n\n# For additional cBioPortal features\nexport CBIO_TOKEN=\"your-token-here\"\n</code></pre> <p>See Authentication and API Keys for detailed setup.</p>"},{"location":"getting-started/01-quickstart-cli/#explore-advanced-features","title":"Explore Advanced Features","text":"<ul> <li>Combine Multiple Filters:</li> </ul> <pre><code>biomcp article search \\\n  --gene EGFR --disease \"lung cancer\" \\\n  --chemical erlotinib\n</code></pre> <ul> <li>Use OR Logic in Keywords:</li> </ul> <pre><code>biomcp article search --gene BRAF --keyword \"V600E|p.V600E|c.1799T&gt;A\"\n</code></pre> <ul> <li>Exclude Preprints:   <pre><code>biomcp article search --gene TP53 --no-preprints\n</code></pre></li> </ul>"},{"location":"getting-started/01-quickstart-cli/#get-help","title":"Get Help","text":"<p>View all available commands:</p> <pre><code>biomcp --help\n</code></pre> <p>Get help for a specific command:</p> <pre><code>biomcp article search --help\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/01-quickstart-cli/#1-research-a-specific-mutation","title":"1. Research a Specific Mutation","text":"<pre><code># Find articles about EGFR T790M resistance mutation\nbiomcp article search --gene EGFR \\\n  --keyword \"T790M|p.T790M\" \\\n  --disease \"lung cancer\"\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#2-find-trials-for-a-patient","title":"2. Find Trials for a Patient","text":"<pre><code># Active trials for HER2-positive breast cancer\nbiomcp trial search \\\n  --condition \"breast cancer\" \\\n  --keyword \"HER2 positive\" \\\n  --status RECRUITING\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#3-investigate-drug-mechanisms","title":"3. Investigate Drug Mechanisms","text":"<pre><code># Get information about pembrolizumab\nbiomcp drug get pembrolizumab\n\n# Find articles about its use in melanoma\nbiomcp article search --chemical pembrolizumab --disease melanoma\n</code></pre>"},{"location":"getting-started/01-quickstart-cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/01-quickstart-cli/#command-not-found","title":"Command Not Found","text":"<p>If <code>biomcp</code> is not recognized:</p> <ul> <li>Ensure your PATH includes the installation directory</li> <li>Try running with full path: <code>~/.local/bin/biomcp</code></li> <li>Restart your terminal after installation</li> </ul>"},{"location":"getting-started/01-quickstart-cli/#no-results-found","title":"No Results Found","text":"<p>If searches return no results:</p> <ul> <li>Check spelling of gene names (use official symbols)</li> <li>Try broader search terms</li> <li>Remove filters one by one to identify the constraint</li> </ul>"},{"location":"getting-started/01-quickstart-cli/#api-rate-limits","title":"API Rate Limits","text":"<p>If you encounter rate limit errors:</p> <ul> <li>Add delays between requests</li> <li>Consider setting up API keys for higher limits</li> <li>Use the <code>--limit</code> parameter to reduce result count</li> </ul>"},{"location":"getting-started/01-quickstart-cli/#next-steps_1","title":"Next Steps","text":"<p>Now that you've run your first searches, explore these resources:</p> <ol> <li>Complete CLI Reference - Comprehensive documentation for all commands and options</li> <li>Claude Desktop Integration - Use BioMCP with AI assistants</li> <li>Set up API Keys - Enable advanced features with NCI, AlphaGenome, and cBioPortal</li> <li>How-to Guides - Step-by-step tutorials for complex research workflows</li> <li>Deep Researcher Persona - Learn about BioMCP's philosophy and methodology</li> </ol> <p>Happy researching! \ud83e\uddec\ud83d\udd2c</p>"},{"location":"getting-started/02-claude-desktop-integration/","title":"Claude Desktop Integration","text":"<p>This guide covers how to integrate BioMCP with Claude Desktop, enabling AI-powered biomedical research directly in your Claude conversations.</p>"},{"location":"getting-started/02-claude-desktop-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop application</li> <li>One of the following:</li> <li>Option A: Python 3.10+ and uv (recommended)</li> <li>Option B: Docker</li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/02-claude-desktop-integration/#option-a-using-uv-recommended","title":"Option A: Using uv (Recommended)","text":"<p>This method is fastest and easiest for most users.</p>"},{"location":"getting-started/02-claude-desktop-integration/#1-install-uv","title":"1. Install uv","text":"<pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#2-configure-claude-desktop","title":"2. Configure Claude Desktop","text":"<p>Add BioMCP to your Claude Desktop configuration file:</p> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"],\n      \"env\": {\n        \"NCI_API_KEY\": \"your-nci-api-key-here\",\n        \"ALPHAGENOME_API_KEY\": \"your-alphagenome-key-here\",\n        \"CBIO_TOKEN\": \"your-cbioportal-token-here\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#option-b-using-docker","title":"Option B: Using Docker","text":"<p>This method provides better isolation and consistency across systems.</p>"},{"location":"getting-started/02-claude-desktop-integration/#1-create-a-dockerfile","title":"1. Create a Dockerfile","text":"<p>Create a file named <code>Dockerfile</code>:</p> <pre><code>FROM python:3.11-slim\n\n# Install BioMCP\nRUN pip install biomcp-python\n\n# Set the entrypoint\nENTRYPOINT [\"biomcp\", \"run\"]\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#2-build-the-docker-image","title":"2. Build the Docker Image","text":"<pre><code>docker build -t biomcp:latest .\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#3-configure-claude-desktop","title":"3. Configure Claude Desktop","text":"<p>Add BioMCP to your configuration file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"biomcp:latest\"],\n      \"env\": {\n        \"NCI_API_KEY\": \"your-nci-api-key-here\",\n        \"ALPHAGENOME_API_KEY\": \"your-alphagenome-key-here\",\n        \"CBIO_TOKEN\": \"your-cbioportal-token-here\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#verification","title":"Verification","text":"<ol> <li>Restart Claude Desktop after updating the configuration</li> <li>Start a new conversation</li> <li>Look for the \ud83d\udd0c icon indicating MCP is connected</li> <li>Test with: \"Can you search for articles about BRAF mutations in melanoma?\"</li> </ol>"},{"location":"getting-started/02-claude-desktop-integration/#setting-up-api-keys","title":"Setting Up API Keys","text":"<p>While BioMCP works without API keys, some features require them for full functionality:</p>"},{"location":"getting-started/02-claude-desktop-integration/#nci-api-key-optional","title":"NCI API Key (Optional)","text":"<p>Enables access to NCI's clinical trials database with advanced filters:</p> <ul> <li>Get your key from NCI API Portal</li> <li>Add to configuration as <code>NCI_API_KEY</code></li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#alphagenome-api-key-optional","title":"AlphaGenome API Key (Optional)","text":"<p>Enables variant effect predictions using Google DeepMind's AlphaGenome:</p> <ul> <li>Register at AlphaGenome Portal</li> <li>Add to configuration as <code>ALPHAGENOME_API_KEY</code></li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#cbioportal-token-optional","title":"cBioPortal Token (Optional)","text":"<p>Enables enhanced cancer genomics queries:</p> <ul> <li>Get token from cBioPortal</li> <li>Add to configuration as <code>CBIO_TOKEN</code></li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#usage-examples","title":"Usage Examples","text":"<p>Once configured, you can ask Claude to perform various biomedical research tasks:</p>"},{"location":"getting-started/02-claude-desktop-integration/#literature-search","title":"Literature Search","text":"<pre><code>\"Find recent articles about CAR-T therapy for B-cell lymphomas\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#clinical-trials","title":"Clinical Trials","text":"<pre><code>\"Search for actively recruiting trials for EGFR-mutant lung cancer\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#variant-analysis","title":"Variant Analysis","text":"<pre><code>\"What is known about the pathogenicity of BRCA1 c.5266dupC?\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#drug-information","title":"Drug Information","text":"<pre><code>\"Tell me about the mechanism of action and indications for pembrolizumab\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#complex-research","title":"Complex Research","text":"<pre><code>\"I need a comprehensive analysis of treatment options for a patient with\nBRAF V600E melanoma who has progressed on dabrafenib/trametinib\"\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#the-deep-researcher-persona","title":"The Deep Researcher Persona","text":"<p>BioMCP includes a specialized \"Deep Researcher\" persona that enhances Claude's biomedical research capabilities:</p> <ul> <li>Sequential Thinking: Automatically uses the <code>think</code> tool for systematic analysis</li> <li>Comprehensive Coverage: Searches multiple databases and synthesizes findings</li> <li>Evidence-Based: Provides citations and links to primary sources</li> <li>Clinical Focus: Understands medical context and terminology</li> </ul> <p>To activate, simply ask biomedical questions naturally. The persona automatically engages for research tasks.</p>"},{"location":"getting-started/02-claude-desktop-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/02-claude-desktop-integration/#mcp-connection-failed","title":"\"MCP Connection Failed\"","text":"<ol> <li>Verify the configuration file path is correct</li> <li>Check JSON syntax (no trailing commas)</li> <li>Ensure Claude Desktop has been restarted</li> <li>Check that uv or Docker is properly installed</li> </ol>"},{"location":"getting-started/02-claude-desktop-integration/#command-not-found","title":"\"Command Not Found\"","text":"<p>For uv:</p> <pre><code># Verify uv installation\nuv --version\n\n# Ensure PATH includes uv\necho $PATH | grep -q \"\\.local/bin\" || echo \"PATH needs updating\"\n</code></pre> <p>For Docker:</p> <pre><code># Verify Docker is running\ndocker ps\n\n# Test BioMCP container\ndocker run -it --rm biomcp:latest --help\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#no-results-found","title":"\"No Results Found\"","text":"<ul> <li>Check your internet connection</li> <li>Verify API keys are correctly set (if using optional features)</li> <li>Try simpler queries first</li> <li>Use official gene symbols (e.g., \"TP53\" not \"p53\")</li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#performance-issues","title":"Performance Issues","text":"<p>For uv:</p> <ul> <li>First run may be slow due to package downloads</li> <li>Subsequent runs use cached environments</li> </ul> <p>For Docker:</p> <ul> <li>Ensure Docker has sufficient memory allocated</li> <li>Consider building with <code>--platform</code> flag for Apple Silicon</li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/02-claude-desktop-integration/#custom-environment-variables","title":"Custom Environment Variables","text":"<p>Add any additional environment variables your research requires:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"],\n      \"env\": {\n        \"BIOMCP_LOG_LEVEL\": \"DEBUG\",\n        \"BIOMCP_CACHE_DIR\": \"/path/to/cache\",\n        \"HTTP_PROXY\": \"http://your-proxy:8080\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#multiple-configurations","title":"Multiple Configurations","text":"<p>You can run multiple BioMCP instances with different settings:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp-prod\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"],\n      \"env\": {\n        \"BIOMCP_ENV\": \"production\"\n      }\n    },\n    \"biomcp-dev\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python@latest\", \"biomcp\", \"run\"],\n      \"env\": {\n        \"BIOMCP_ENV\": \"development\",\n        \"BIOMCP_LOG_LEVEL\": \"DEBUG\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/02-claude-desktop-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Test with basic queries before complex research tasks</li> <li>Be Specific: Use official gene symbols and disease names</li> <li>Iterate: Refine queries based on initial results</li> <li>Verify Sources: Always check the provided citations</li> <li>Save Important Findings: Export conversation or copy key results</li> </ol>"},{"location":"getting-started/02-claude-desktop-integration/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: BioMCP Docs</li> <li>Issues: GitHub Issues</li> <li>Community: Discussions</li> </ul>"},{"location":"getting-started/02-claude-desktop-integration/#next-steps","title":"Next Steps","text":"<p>Now that BioMCP is integrated with Claude Desktop:</p> <ol> <li>Try the example queries above</li> <li>Explore How-to Guides for specific research workflows</li> <li>Learn about Sequential Thinking for complex analyses</li> <li>Set up additional API keys for enhanced features</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/","title":"Authentication and API Keys","text":"<p>BioMCP integrates with multiple biomedical databases. While many features work without authentication, some advanced capabilities require API keys for enhanced functionality.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#overview-of-api-keys","title":"Overview of API Keys","text":"Service Required? Features Enabled Get Key NCI API Optional Advanced clinical trial filters, biomarker search api.cancer.gov AlphaGenome Required* Variant effect predictions deepmind.google.com cBioPortal Optional Enhanced cancer genomics queries cbioportal.org OncoKB Optional Clinical actionability for all genes oncokb.org <p>*Required only when using AlphaGenome features</p>"},{"location":"getting-started/03-authentication-and-api-keys/#setting-up-api-keys","title":"Setting Up API Keys","text":""},{"location":"getting-started/03-authentication-and-api-keys/#method-1-environment-variables-recommended-for-personal-use","title":"Method 1: Environment Variables (Recommended for Personal Use)","text":"<p>Set environment variables in your shell configuration:</p> <pre><code># Add to ~/.bashrc, ~/.zshrc, or equivalent\nexport NCI_API_KEY=\"your-nci-api-key\"\nexport ALPHAGENOME_API_KEY=\"your-alphagenome-key\"\nexport CBIO_TOKEN=\"your-cbioportal-token\"\nexport ONCOKB_TOKEN=\"your-oncokb-api-token\"\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#method-2-configuration-files","title":"Method 2: Configuration Files","text":""},{"location":"getting-started/03-authentication-and-api-keys/#for-claude-desktop","title":"For Claude Desktop","text":"<p>Add keys to your Claude Desktop configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"],\n      \"env\": {\n        \"NCI_API_KEY\": \"your-nci-api-key\",\n        \"ALPHAGENOME_API_KEY\": \"your-alphagenome-key\",\n        \"CBIO_TOKEN\": \"your-cbioportal-token\",\n        \"ONCOKB_TOKEN\": \"your-oncokb-api-token\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#for-docker-deployments","title":"For Docker Deployments","text":"<p>Include in your Docker run command:</p> <pre><code>docker run -e NCI_API_KEY=\"your-key\" \\\n           -e ALPHAGENOME_API_KEY=\"your-key\" \\\n           -e CBIO_TOKEN=\"your-token\" \\\n           -e ONCOKB_TOKEN=\"your-token\" \\\n           biomcp:latest\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#method-3-per-request-keys-for-hosted-environments","title":"Method 3: Per-Request Keys (For Hosted Environments)","text":"<p>When using BioMCP through AI assistants or hosted services, provide keys in your request:</p> <pre><code>\"Predict effects of BRAF V600E mutation. My AlphaGenome API key is YOUR_KEY_HERE\"\n</code></pre> <p>The AI will recognize patterns like \"My [service] API key is...\" and use the key for that request only.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#individual-service-setup","title":"Individual Service Setup","text":""},{"location":"getting-started/03-authentication-and-api-keys/#nci-clinical-trials-api","title":"NCI Clinical Trials API","text":"<p>The National Cancer Institute API provides advanced clinical trial search capabilities.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#getting-your-key","title":"Getting Your Key","text":"<ol> <li>Visit api.cancer.gov</li> <li>Click \"Get API Key\"</li> <li>Complete registration</li> <li>Key is emailed immediately</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/#features-enabled","title":"Features Enabled","text":"<ul> <li>Advanced biomarker-based trial search</li> <li>Organization and investigator lookups</li> <li>Intervention and disease vocabularies</li> <li>Higher rate limits (1000 requests/day vs 100)</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#usage-example","title":"Usage Example","text":"<pre><code># With API key set\nexport NCI_API_KEY=\"your-key\"\n\n# Search trials with biomarker criteria\nbiomcp trial search --condition melanoma --source nci \\\n  --required-mutations \"BRAF V600E\" --allow-brain-mets true\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#alphagenome","title":"AlphaGenome","text":"<p>Google DeepMind's AlphaGenome predicts variant effects on gene expression and chromatin accessibility.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#getting-your-key_1","title":"Getting Your Key","text":"<ol> <li>Visit AlphaGenome Portal</li> <li>Register for non-commercial use</li> <li>Receive API key via email</li> <li>Accept terms of service</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/#features-enabled_1","title":"Features Enabled","text":"<ul> <li>Gene expression predictions</li> <li>Chromatin accessibility analysis</li> <li>Splicing effect predictions</li> <li>Tissue-specific analyses</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#usage-examples","title":"Usage Examples","text":"<p>CLI with environment variable:</p> <pre><code>export ALPHAGENOME_API_KEY=\"your-key\"\nbiomcp variant predict chr7 140753336 A T\n</code></pre> <p>CLI with per-request key:</p> <pre><code>biomcp variant predict chr7 140753336 A T --api-key YOUR_KEY\n</code></pre> <p>Through AI assistant:</p> <pre><code>\"Predict regulatory effects of BRAF V600E (chr7:140753336 A&gt;T).\nMy AlphaGenome API key is YOUR_KEY_HERE\"\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#cbioportal","title":"cBioPortal","text":"<p>The cBioPortal token enables enhanced cancer genomics queries.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#getting-your-token","title":"Getting Your Token","text":"<ol> <li>Create account at cbioportal.org</li> <li>Navigate to \"Web API\" section</li> <li>Generate a personal access token</li> <li>Copy the token (shown only once)</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/#features-enabled_2","title":"Features Enabled","text":"<ul> <li>Higher API rate limits</li> <li>Access to private studies (if authorized)</li> <li>Batch query capabilities</li> <li>Extended timeout limits</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#usage","title":"Usage","text":"<p>cBioPortal integration is automatic when searching for genes. The token enables:</p> <pre><code># Enhanced gene search with cancer genomics\nexport CBIO_TOKEN=\"your-token\"\nbiomcp article search --gene BRAF --disease melanoma\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#oncokb-optional-for-full-access","title":"OncoKB (Optional for Full Access)","text":"<p>BioMCP integrates with OncoKB, a precision oncology knowledge base, to provide clinical interpretations of cancer variants.</p> <ul> <li>Default (No Key Needed): By default, BioMCP uses a public demo server that provides data for three key genes: BRAF, ROS1, and TP53. This works immediately without any configuration.</li> <li>Full Access: To access OncoKB's complete knowledge base for all genes, you need a license from OncoKB and an API token.</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#getting-your-token_1","title":"Getting Your Token","text":"<ol> <li>Obtain a license from OncoKB.</li> <li>Find your token in your account settings: www.oncokb.org/account/settings.</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/#setting-the-token","title":"Setting the Token","text":"<p>Set the <code>ONCOKB_TOKEN</code> environment variable:</p> <pre><code>export ONCOKB_TOKEN=\"your-oncokb-api-token\"\n</code></pre> <p>Once set, BioMCP will automatically switch from the demo server to the full production API.</p>"},{"location":"getting-started/03-authentication-and-api-keys/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/03-authentication-and-api-keys/#do","title":"DO:","text":"<ul> <li>Store keys in environment variables or secure config files</li> <li>Use per-request keys in shared/hosted environments</li> <li>Rotate keys periodically</li> <li>Use separate keys for development/production</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#dont","title":"DON'T:","text":"<ul> <li>Commit keys to version control</li> <li>Share keys with others</li> <li>Include keys in code or documentation</li> <li>Store keys in plain text files</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#git-security","title":"Git Security","text":"<p>Add to <code>.gitignore</code>:</p> <pre><code>.env\n.env.local\n*.key\nconfig/secrets/\n</code></pre> <p>Use git-secrets to prevent accidental commits:</p> <pre><code># Install git-secrets\nbrew install git-secrets  # macOS\n# or follow instructions at github.com/awslabs/git-secrets\n\n# Set up in your repo\ngit secrets --install\ngit secrets --register-aws  # Detects common key patterns\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/03-authentication-and-api-keys/#api-key-required-errors","title":"\"API Key Required\" Errors","text":"<p>For AlphaGenome:</p> <ul> <li>This service always requires a key</li> <li>Provide it via environment variable or per-request</li> <li>Check key spelling and format</li> </ul> <p>For NCI:</p> <ul> <li>Basic search works without key</li> <li>Advanced features require authentication</li> <li>Verify key is active at api.cancer.gov</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#invalid-api-key-errors","title":"\"Invalid API Key\" Errors","text":"<ol> <li>Check for extra spaces or quotes</li> <li>Ensure key hasn't expired</li> <li>Verify you're using the correct service's key</li> <li>Test key directly with the service's API</li> </ol>"},{"location":"getting-started/03-authentication-and-api-keys/#rate-limit-errors","title":"Rate Limit Errors","text":"<p>Without API keys:</p> <ul> <li>Public limits are restrictive (e.g., 100 requests/day)</li> <li>Add delays between requests</li> <li>Consider getting API keys</li> </ul> <p>With API keys:</p> <ul> <li>Limits are much higher but still exist</li> <li>Implement exponential backoff</li> <li>Cache results when possible</li> </ul>"},{"location":"getting-started/03-authentication-and-api-keys/#testing-your-setup","title":"Testing Your Setup","text":""},{"location":"getting-started/03-authentication-and-api-keys/#check-environment-variables","title":"Check Environment Variables","text":"<pre><code># List all BioMCP-related environment variables\nenv | grep -E \"(NCI_API_KEY|ALPHAGENOME_API_KEY|CBIO_TOKEN|ONCOKB_TOKEN)\"\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#test-each-service","title":"Test Each Service","text":"<pre><code># Test NCI API\nbiomcp trial search --condition cancer --source nci --limit 1\n\n# Test AlphaGenome (requires key)\nbiomcp variant predict chr7 140753336 A T --limit 1\n\n# Test cBioPortal integration\nbiomcp article search --gene TP53 --limit 1\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#api-key-management-tools","title":"API Key Management Tools","text":"<p>For managing multiple API keys securely:</p>"},{"location":"getting-started/03-authentication-and-api-keys/#1-direnv-recommended","title":"1. direnv (Recommended)","text":"<pre><code># Install direnv\nbrew install direnv  # macOS\n# Add to shell: eval \"$(direnv hook zsh)\"\n\n# Create .envrc in project\necho 'export NCI_API_KEY=\"your-key\"' &gt; .envrc\ndirenv allow\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#2-1password-cli","title":"2. 1Password CLI","text":"<pre><code># Store in 1Password\nop item create --category=password \\\n  --title=\"BioMCP API Keys\" \\\n  --vault=\"Development\" \\\n  NCI_API_KEY=\"your-key\"\n\n# Load in shell\nexport NCI_API_KEY=$(op read \"op://Development/BioMCP API Keys/NCI_API_KEY\")\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#3-aws-secrets-manager","title":"3. AWS Secrets Manager","text":"<pre><code># Store secret\naws secretsmanager create-secret \\\n  --name biomcp/api-keys \\\n  --secret-string '{\"NCI_API_KEY\":\"your-key\"}'\n\n# Retrieve in script\nexport NCI_API_KEY=$(aws secretsmanager get-secret-value \\\n  --secret-id biomcp/api-keys \\\n  --query SecretString \\\n  --output text | jq -r .NCI_API_KEY)\n</code></pre>"},{"location":"getting-started/03-authentication-and-api-keys/#next-steps","title":"Next Steps","text":"<p>Now that you have API keys configured:</p> <ol> <li>Test each service to ensure keys work</li> <li>Explore How-to Guides for advanced features</li> <li>Set up logging and monitoring</li> <li>Review security policies for your organization</li> </ol>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/","title":"How to Find Articles and cBioPortal Data","text":"<p>This guide walks you through searching biomedical literature with automatic cancer genomics integration from cBioPortal.</p>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#overview","title":"Overview","text":"<p>When searching for articles about genes, BioMCP automatically enriches your results with:</p> <ul> <li>cBioPortal Summary: Mutation frequencies, hotspots, and cancer type distribution (API Reference)</li> <li>PubMed Articles: Peer-reviewed research with entity annotations (PubTator3 Reference)</li> <li>Preprints: Latest findings from bioRxiv and medRxiv</li> </ul>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#basic-article-search","title":"Basic Article Search","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#search-by-gene","title":"Search by Gene","text":"<p>Find articles about a specific gene:</p> <pre><code># CLI\nbiomcp article search --gene BRAF --limit 5\n\n# Python\narticles = await client.articles.search(genes=[\"BRAF\"], limit=5)\n\n# MCP Tool\narticle_searcher(genes=[\"BRAF\"], limit=5)\n</code></pre> <p>This automatically includes:</p> <ol> <li>cBioPortal summary showing BRAF mutation frequency across cancers</li> <li>Top mutation hotspots (e.g., V600E)</li> <li>Recent articles mentioning BRAF</li> </ol>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#search-by-disease","title":"Search by Disease","text":"<p>Find articles about a specific disease:</p> <pre><code># CLI\nbiomcp article search --disease melanoma --limit 10\n\n# Python\narticles = await client.articles.search(diseases=[\"melanoma\"])\n\n# MCP Tool\narticle_searcher(diseases=[\"melanoma\"])\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#advanced-search-techniques","title":"Advanced Search Techniques","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#combining-multiple-filters","title":"Combining Multiple Filters","text":"<p>Search for articles at the intersection of genes, diseases, and chemicals:</p> <pre><code># CLI - EGFR mutations in lung cancer treated with erlotinib\nbiomcp article search \\\n  --gene EGFR \\\n  --disease \"lung cancer\" \\\n  --chemical erlotinib \\\n  --limit 20\n\n# Python\narticles = await client.articles.search(\n    genes=[\"EGFR\"],\n    diseases=[\"lung cancer\"],\n    chemicals=[\"erlotinib\"]\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#using-or-logic-in-keywords","title":"Using OR Logic in Keywords","text":"<p>Find articles mentioning different notations of the same variant:</p> <pre><code># CLI - Find any notation of BRAF V600E\nbiomcp article search \\\n  --gene BRAF \\\n  --keyword \"V600E|p.V600E|c.1799T&gt;A\"\n\n# Python - Different names for same concept\narticles = await client.articles.search(\n    diseases=[\"NSCLC|non-small cell lung cancer\"],\n    chemicals=[\"pembrolizumab|Keytruda|anti-PD-1\"]\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#excluding-preprints","title":"Excluding Preprints","text":"<p>For peer-reviewed articles only:</p> <pre><code># CLI\nbiomcp article search --gene TP53 --no-preprints\n\n# Python\narticles = await client.articles.search(\n    genes=[\"TP53\"],\n    include_preprints=False\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#understanding-cbioportal-integration","title":"Understanding cBioPortal Integration","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#what-cbioportal-provides","title":"What cBioPortal Provides","text":"<p>When you search for a gene, the first result includes:</p> <pre><code>### cBioPortal Summary for BRAF\n\n- **Mutation Frequency**: 76.7% (368 mutations in 480 samples)\n- **Studies**: 1 of 5 studies have mutations\n\n**Top Hotspots:**\n\n1. V600E: 310 mutations (84.2%)\n2. V600K: 23 mutations (6.3%)\n3. V600M: 12 mutations (3.3%)\n\n**Cancer Type Distribution:**\n\n- Skin Cancer, Non-Melanoma: 156 mutations\n- Melanoma: 91 mutations\n- Thyroid Cancer: 87 mutations\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#mutation-specific-searches","title":"Mutation-Specific Searches","text":"<p>Search for articles about specific mutations:</p> <pre><code># Search for BRAF V600E specifically\narticles = await client.articles.search(\n    genes=[\"BRAF\"],\n    keywords=[\"V600E\"],\n    include_cbioportal=True  # Default\n)\n</code></pre> <p>The cBioPortal summary will highlight the specific mutation if found.</p>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#disabling-cbioportal","title":"Disabling cBioPortal","text":"<p>If you don't need cancer genomics data:</p> <pre><code># CLI\nbiomcp article search --gene BRCA1 --no-cbioportal\n\n# Python\narticles = await client.articles.search(\n    genes=[\"BRCA1\"],\n    include_cbioportal=False\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#practical-examples","title":"Practical Examples","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#example-1-resistance-mechanism-research","title":"Example 1: Resistance Mechanism Research","text":"<p>Find articles about EGFR T790M resistance:</p> <pre><code># Using think tool first (for MCP)\nthink(\n    thought=\"Researching EGFR T790M resistance mechanisms in lung cancer\",\n    thoughtNumber=1\n)\n\n# Search with multiple relevant terms\narticles = await article_searcher(\n    genes=[\"EGFR\"],\n    diseases=[\"lung cancer|NSCLC\"],\n    keywords=[\"T790M|p.T790M|resistance|resistant\"],\n    chemicals=[\"osimertinib|gefitinib|erlotinib\"]\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#example-2-combination-therapy-research","title":"Example 2: Combination Therapy Research","text":"<p>Research BRAF/MEK combination therapy:</p> <pre><code># CLI approach\nbiomcp article search \\\n  --gene BRAF --gene MEK1 --gene MEK2 \\\n  --disease melanoma \\\n  --chemical dabrafenib --chemical trametinib \\\n  --keyword \"combination therapy|combined treatment\"\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#example-3-biomarker-discovery","title":"Example 3: Biomarker Discovery","text":"<p>Find articles about potential biomarkers:</p> <pre><code># Search for PD-L1 as a biomarker\narticles = await client.articles.search(\n    genes=[\"CD274\"],  # PD-L1 gene symbol\n    keywords=[\"biomarker|predictive|prognostic\"],\n    diseases=[\"cancer\"],\n    limit=50\n)\n\n# Filter results programmatically\nbiomarker_articles = [\n    a for a in articles\n    if \"biomarker\" in a.title.lower() or \"predictive\" in a.abstract.lower()\n]\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#working-with-results","title":"Working with Results","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#extracting-key-information","title":"Extracting Key Information","text":"<pre><code># Process article results\nfor article in articles:\n    print(f\"Title: {article.title}\")\n    print(f\"PMID: {article.pmid}\")\n    print(f\"URL: {article.url}\")\n\n    # Extract annotated entities\n    genes = article.metadata.get(\"genes\", [])\n    diseases = article.metadata.get(\"diseases\", [])\n    chemicals = article.metadata.get(\"chemicals\", [])\n\n    print(f\"Genes mentioned: {', '.join(genes)}\")\n    print(f\"Diseases: {', '.join(diseases)}\")\n    print(f\"Chemicals: {', '.join(chemicals)}\")\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#fetching-full-article-details","title":"Fetching Full Article Details","text":"<p>Get complete article information:</p> <pre><code># Get article by PMID\nfull_article = await client.articles.get(\"38768446\")\n\n# Access full abstract\nprint(full_article.abstract)\n\n# Check for full text availability\nif full_article.full_text_url:\n    print(f\"Full text: {full_article.full_text_url}\")\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#tips-for-effective-searches","title":"Tips for Effective Searches","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#1-use-official-gene-symbols","title":"1. Use Official Gene Symbols","text":"<pre><code># \u2705 Correct - Official HGNC symbol\narticles = await search(genes=[\"ERBB2\"])\n\n# \u274c Avoid - Common name\narticles = await search(genes=[\"HER2\"])  # May miss results\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#2-include-synonyms-for-diseases","title":"2. Include Synonyms for Diseases","text":"<pre><code># Cover all variations\narticles = await search(\n    diseases=[\"GIST|gastrointestinal stromal tumor|gastrointestinal stromal tumour\"]\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#3-leverage-pubtator-annotations","title":"3. Leverage PubTator Annotations","text":"<p>PubTator automatically annotates articles with:</p> <ul> <li>Gene mentions (normalized to official symbols)</li> <li>Disease concepts (mapped to MeSH terms)</li> <li>Chemical/drug entities</li> <li>Genetic variants</li> <li>Species</li> </ul>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#4-combine-with-other-tools","title":"4. Combine with Other Tools","text":"<pre><code># 1. Find articles about a gene\narticles = await article_searcher(genes=[\"ALK\"])\n\n# 2. Get gene details for context\ngene_info = await gene_getter(\"ALK\")\n\n# 3. Find relevant trials\ntrials = await trial_searcher(\n    other_terms=[\"ALK positive\", \"ALK rearrangement\"]\n)\n</code></pre>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#no-results-found","title":"No Results Found","text":"<ol> <li>Check gene symbols: Use genenames.org</li> <li>Broaden search: Remove filters one by one</li> <li>Try synonyms: Especially for diseases and drugs</li> </ol>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#cbioportal-data-missing","title":"cBioPortal Data Missing","text":"<ul> <li>Some genes may not have cancer genomics data</li> <li>Try searching for cancer-related genes</li> <li>Check if gene symbol is correct</li> </ul>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#preprint-issues","title":"Preprint Issues","text":"<ul> <li>Europe PMC may have delays in indexing</li> <li>Some preprints may not have DOIs</li> <li>Try searching by title keywords instead</li> </ul>"},{"location":"how-to-guides/01-find-articles-and-cbioportal-data/#next-steps","title":"Next Steps","text":"<ul> <li>Learn to find trials with NCI and BioThings</li> <li>Explore variant annotations</li> <li>Set up API keys for enhanced features</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/","title":"How to Find Trials with NCI and BioThings","text":"<p>This guide demonstrates how to search for clinical trials using BioMCP's dual data sources and automatic disease synonym expansion.</p>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#overview","title":"Overview","text":"<p>BioMCP provides access to clinical trials through:</p> <ul> <li>ClinicalTrials.gov: Default source with comprehensive U.S. and international trials (API Reference)</li> <li>NCI CTS API: Advanced cancer trial search with biomarker filtering (requires API key) (API Reference)</li> <li>BioThings Integration: Automatic disease synonym expansion for better coverage (BioThings Reference)</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#basic-trial-search","title":"Basic Trial Search","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#simple-disease-search","title":"Simple Disease Search","text":"<p>Find trials for a specific condition:</p> <pre><code># CLI\nbiomcp trial search --condition melanoma --status RECRUITING\n\n# Python\ntrials = await client.trials.search(\n    conditions=[\"melanoma\"],\n    recruiting_status=\"RECRUITING\"\n)\n\n# MCP Tool\ntrial_searcher(\n    conditions=[\"melanoma\"],\n    recruiting_status=\"OPEN\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#search-by-intervention","title":"Search by Intervention","text":"<p>Find trials testing specific drugs:</p> <pre><code># CLI\nbiomcp trial search --intervention pembrolizumab --phase PHASE3\n\n# Python\ntrials = await client.trials.search(\n    interventions=[\"pembrolizumab\"],\n    phase=\"PHASE3\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#location-based-search","title":"Location-Based Search","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#finding-nearby-trials","title":"Finding Nearby Trials","text":"<p>Important: Location searches require latitude and longitude coordinates.</p> <pre><code># Find trials near Cleveland, Ohio\ntrials = await trial_searcher(\n    conditions=[\"lung cancer\"],\n    lat=41.4993,\n    long=-81.6944,\n    distance=50  # 50 miles radius\n)\n\n# Find trials near Boston\ntrials = await trial_searcher(\n    conditions=[\"breast cancer\"],\n    lat=42.3601,\n    long=-71.0589,\n    distance=25\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#getting-coordinates","title":"Getting Coordinates","text":"<p>For common locations:</p> <ul> <li>Cleveland: lat=41.4993, long=-81.6944</li> <li>Boston: lat=42.3601, long=-71.0589</li> <li>New York: lat=40.7128, long=-74.0060</li> <li>Los Angeles: lat=34.0522, long=-118.2437</li> <li>Houston: lat=29.7604, long=-95.3698</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#advanced-filtering","title":"Advanced Filtering","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#multiple-criteria","title":"Multiple Criteria","text":"<p>Combine multiple filters for precise results:</p> <pre><code># Complex search example\ntrials = await trial_searcher(\n    conditions=[\"non-small cell lung cancer\", \"NSCLC\"],\n    interventions=[\"pembrolizumab\", \"immunotherapy\"],\n    phase=\"PHASE3\",\n    recruiting_status=\"OPEN\",\n    age_group=\"ADULT\",\n    study_type=\"INTERVENTIONAL\",\n    funder_type=\"INDUSTRY\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#date-based-filtering","title":"Date-Based Filtering","text":"<p>Find recently started trials:</p> <pre><code># CLI - Trials started in 2024\nbiomcp trial search \\\n  --condition cancer \\\n  --start-date 2024-01-01 \\\n  --status RECRUITING\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#using-nci-api-advanced-features","title":"Using NCI API Advanced Features","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#setup-nci-api-key","title":"Setup NCI API Key","text":"<p>Get your key from api.cancer.gov. For detailed setup instructions, see Authentication and API Keys:</p> <pre><code>export NCI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#biomarker-based-search","title":"Biomarker-Based Search","text":"<p>Find trials for specific mutations:</p> <pre><code># Search using NCI source\ntrials = await search(\n    domain=\"trial\",\n    source=\"nci\",\n    conditions=[\"melanoma\"],\n    required_mutations=[\"BRAF V600E\"],\n    allow_brain_mets=True,\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#nci-specific-parameters","title":"NCI-Specific Parameters","text":"<pre><code># Advanced NCI search\ntrials = await trial_searcher(\n    source=\"nci\",\n    conditions=[\"lung cancer\"],\n    required_mutations=[\"EGFR L858R\", \"EGFR exon 19 deletion\"],\n    prior_therapy_required=False,\n    allow_brain_mets=True,\n    allow_prior_immunotherapy=False,\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#biothings-integration-for-enhanced-search","title":"BioThings Integration for Enhanced Search","text":"<p>For technical details on the BioThings APIs, see:</p> <ul> <li>BioThings Suite Reference</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#automatic-disease-synonym-expansion","title":"Automatic Disease Synonym Expansion","text":"<p>BioMCP automatically expands disease terms using MyDisease.info:</p> <pre><code># Searching for \"GIST\" automatically includes:\n# - \"gastrointestinal stromal tumor\"\n# - \"gastrointestinal stromal tumour\"\n# - \"GI stromal tumor\"\ntrials = await trial_searcher(conditions=[\"GIST\"])\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#manual-disease-lookup","title":"Manual Disease Lookup","text":"<p>Get all synonyms for a disease:</p> <pre><code># Get disease information\ndisease_info = await disease_getter(\"melanoma\")\n\n# Extract synonyms\nsynonyms = disease_info.synonyms\n# Returns: [\"malignant melanoma\", \"melanoma, malignant\", ...]\n\n# Use in trial search\ntrials = await trial_searcher(conditions=synonyms)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#practical-workflows","title":"Practical Workflows","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#workflow-1-patient-centric-trial-search","title":"Workflow 1: Patient-Centric Trial Search","text":"<p>Find trials for a specific patient profile:</p> <pre><code>async def find_trials_for_patient(\n    disease: str,\n    mutations: list[str],\n    location: tuple[float, float],\n    prior_treatments: list[str]\n):\n    # Step 1: Think about the search\n    await think(\n        thought=f\"Searching trials for {disease} with {mutations}\",\n        thoughtNumber=1\n    )\n\n    # Step 2: Get disease synonyms\n    disease_info = await disease_getter(disease)\n    all_conditions = [disease] + disease_info.synonyms\n\n    # Step 3: Search both sources\n    # ClinicalTrials.gov\n    ctgov_trials = await trial_searcher(\n        conditions=all_conditions,\n        other_terms=mutations,\n        lat=location[0],\n        long=location[1],\n        distance=100,\n        recruiting_status=\"OPEN\"\n    )\n\n    # NCI (if API key available)\n    if os.getenv(\"NCI_API_KEY\"):\n        nci_trials = await trial_searcher(\n            source=\"nci\",\n            conditions=all_conditions,\n            required_mutations=mutations,\n            exclude_prior_therapy=prior_treatments,\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n    return {\n        \"clinicaltrials_gov\": ctgov_trials,\n        \"nci\": nci_trials\n    }\n\n# Example usage\ntrials = await find_trials_for_patient(\n    disease=\"melanoma\",\n    mutations=[\"BRAF V600E\"],\n    location=(40.7128, -74.0060),  # New York\n    prior_treatments=[\"vemurafenib\"]\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#workflow-2-research-landscape-analysis","title":"Workflow 2: Research Landscape Analysis","text":"<p>Understand ongoing research in a field:</p> <pre><code>async def analyze_research_landscape(gene: str, disease: str):\n    # Get gene information\n    gene_info = await gene_getter(gene)\n\n    # Find all active trials\n    all_trials = await trial_searcher(\n        conditions=[disease],\n        other_terms=[gene, f\"{gene} mutation\", f\"{gene} positive\"],\n        recruiting_status=\"OPEN\",\n        page_size=50\n    )\n\n    # Categorize by phase\n    phase_distribution = {}\n    for trial in all_trials:\n        phase = trial.phase or \"Not specified\"\n        phase_distribution[phase] = phase_distribution.get(phase, 0) + 1\n\n    # Extract unique interventions\n    interventions = set()\n    for trial in all_trials:\n        if trial.interventions:\n            interventions.update(trial.interventions)\n\n    return {\n        \"total_trials\": len(all_trials),\n        \"phase_distribution\": phase_distribution,\n        \"unique_interventions\": list(interventions),\n        \"gene_info\": gene_info\n    }\n\n# Example\nlandscape = await analyze_research_landscape(\"ALK\", \"lung cancer\")\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#workflow-3-biomarker-driven-search","title":"Workflow 3: Biomarker-Driven Search","text":"<p>Find trials based on specific biomarkers:</p> <pre><code>async def biomarker_trial_search(biomarkers: list[str], cancer_type: str):\n    # Search NCI biomarker database\n    biomarker_results = []\n    for biomarker in biomarkers:\n        result = await nci_biomarker_searcher(\n            name=biomarker,\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        biomarker_results.extend(result)\n\n    # Extract associated trials\n    trial_ids = set()\n    for bio in biomarker_results:\n        if bio.get(\"associated_trials\"):\n            trial_ids.update(bio[\"associated_trials\"])\n\n    # Get trial details\n    trials = []\n    for nct_id in trial_ids:\n        trial = await trial_getter(nct_id)\n        trials.append(trial)\n\n    return trials\n\n# Example\ntrials = await biomarker_trial_search(\n    biomarkers=[\"PD-L1\", \"TMB-high\", \"MSI-H\"],\n    cancer_type=\"colorectal cancer\"\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#working-with-trial-results","title":"Working with Trial Results","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#extracting-key-information","title":"Extracting Key Information","text":"<pre><code># Process trial results\nfor trial in trials:\n    print(f\"NCT ID: {trial.nct_id}\")\n    print(f\"Title: {trial.title}\")\n    print(f\"Status: {trial.status}\")\n    print(f\"Phase: {trial.phase}\")\n\n    # Locations\n    if trial.locations:\n        print(\"Locations:\")\n        for loc in trial.locations:\n            print(f\"  - {loc.facility}, {loc.city}, {loc.state}\")\n\n    # Eligibility\n    if trial.eligibility:\n        print(f\"Age: {trial.eligibility.minimum_age} - {trial.eligibility.maximum_age}\")\n        print(f\"Sex: {trial.eligibility.sex}\")\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#getting-detailed-trial-information","title":"Getting Detailed Trial Information","text":"<pre><code># Get complete trial details\nfull_trial = await trial_getter(\"NCT03006926\")\n\n# Get specific sections\nprotocol = await trial_protocol_getter(\"NCT03006926\")\nlocations = await trial_locations_getter(\"NCT03006926\")\noutcomes = await trial_outcomes_getter(\"NCT03006926\")\nreferences = await trial_references_getter(\"NCT03006926\")\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#tips-for-effective-trial-searches","title":"Tips for Effective Trial Searches","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#1-use-multiple-search-terms","title":"1. Use Multiple Search Terms","text":"<pre><code># Cover variations\ntrials = await trial_searcher(\n    conditions=[\"NSCLC\", \"non-small cell lung cancer\", \"lung adenocarcinoma\"],\n    interventions=[\"anti-PD-1\", \"pembrolizumab\", \"Keytruda\"]\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#2-check-both-data-sources","title":"2. Check Both Data Sources","text":"<pre><code># Some trials may only be in one database\nctgov_count = len(await trial_searcher(source=\"ctgov\", conditions=[\"melanoma\"]))\nnci_count = len(await trial_searcher(source=\"nci\", conditions=[\"melanoma\"]))\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#3-use-appropriate-filters","title":"3. Use Appropriate Filters","text":"<ul> <li>recruiting_status: Focus on trials accepting patients</li> <li>phase: Later phases for established treatments</li> <li>age_group: Match patient demographics</li> <li>study_type: INTERVENTIONAL vs OBSERVATIONAL</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#4-leverage-location-search","title":"4. Leverage Location Search","text":"<p>Always include location for patient-specific searches:</p> <pre><code># Bad - no location\ntrials = await trial_searcher(conditions=[\"cancer\"])\n\n# Good - includes location\ntrials = await trial_searcher(\n    conditions=[\"cancer\"],\n    lat=40.7128,\n    long=-74.0060,\n    distance=50\n)\n</code></pre>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#no-results-found","title":"No Results Found","text":"<ol> <li>Broaden search terms: Remove specific filters</li> <li>Check synonyms: Use disease_getter to find alternatives</li> <li>Expand location: Increase distance parameter</li> <li>Try both sources: Some trials only in NCI or ClinicalTrials.gov</li> </ol>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#location-search-issues","title":"Location Search Issues","text":"<ul> <li>Ensure both latitude AND longitude are provided</li> <li>Use decimal degrees (not degrees/minutes/seconds)</li> <li>Check coordinate signs (negative for West/South)</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#nci-api-errors","title":"NCI API Errors","text":"<ul> <li>Verify API key is valid</li> <li>Check rate limits (1000 requests/day with key)</li> <li>Some features require specific API key permissions</li> </ul>"},{"location":"how-to-guides/02-find-trials-with-nci-and-biothings/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about variant annotations</li> <li>Explore AlphaGenome predictions</li> <li>Set up monitoring and logging</li> </ul>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/","title":"How to Get Comprehensive Variant Annotations","text":"<p>This guide demonstrates how to retrieve and interpret genetic variant information using BioMCP's integrated databases.</p>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#overview","title":"Overview","text":"<p>BioMCP provides variant annotations from multiple sources:</p> <ul> <li>MyVariant.info: Core variant database with clinical significance (BioThings Reference)</li> <li>External Annotations: TCGA cancer data, 1000 Genomes population frequencies</li> <li>cBioPortal Integration: Cancer-specific mutation context (API Reference)</li> <li>BioThings Links: Connected gene, disease, and drug information (BioThings Suite)</li> </ul>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#basic-variant-lookup","title":"Basic Variant Lookup","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#search-by-rsid","title":"Search by rsID","text":"<p>Find variant information using dbSNP identifiers:</p> <pre><code># CLI\nbiomcp variant get rs121913529\n\n# Python\nvariant = await client.variants.get(\"rs121913529\")\n\n# MCP Tool\nvariant_getter(variant_id=\"rs121913529\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#search-by-hgvs-notation","title":"Search by HGVS Notation","text":"<p>Use standard HGVS notation:</p> <pre><code># Protein change\nvariant = await variant_getter(\"NP_004324.2:p.Val600Glu\")\n\n# Coding DNA change\nvariant = await variant_getter(\"NM_004333.4:c.1799T&gt;A\")\n\n# Genomic coordinates\nvariant = await variant_getter(\"NC_000007.13:g.140453136A&gt;T\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#search-by-genomic-position","title":"Search by Genomic Position","text":"<pre><code># Search by coordinates\nvariants = await variant_searcher(\n    chromosome=\"7\",\n    start=140453136,\n    end=140453136,\n    assembly=\"hg38\"  # or hg19\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#understanding-variant-annotations","title":"Understanding Variant Annotations","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#clinical-significance","title":"Clinical Significance","text":"<pre><code># Get variant details\nvariant = await variant_getter(\"rs121913529\")\n\n# Check clinical significance\nprint(f\"Clinical Significance: {variant.clinical_significance}\")\n# Output: \"Pathogenic\"\n\nprint(f\"ClinVar Review Status: {variant.review_status}\")\n# Output: \"reviewed by expert panel\"\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#population-frequencies","title":"Population Frequencies","text":"<pre><code># Access frequency data\nif variant.frequencies:\n    print(\"Population Frequencies:\")\n    print(f\"  gnomAD: {variant.frequencies.gnomad}\")\n    print(f\"  1000 Genomes: {variant.frequencies.thousand_genomes}\")\n    print(f\"  ExAC: {variant.frequencies.exac}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#functional-predictions","title":"Functional Predictions","text":"<pre><code># In silico predictions\nif variant.predictions:\n    print(f\"CADD Score: {variant.predictions.cadd}\")\n    print(f\"PolyPhen: {variant.predictions.polyphen}\")\n    print(f\"SIFT: {variant.predictions.sift}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#advanced-variant-searches","title":"Advanced Variant Searches","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#filter-by-clinical-significance","title":"Filter by Clinical Significance","text":"<pre><code># Find pathogenic BRCA1 variants\npathogenic_variants = await variant_searcher(\n    gene=\"BRCA1\",\n    significance=\"pathogenic\",\n    limit=20\n)\n\n# Multiple significance levels\nvariants = await variant_searcher(\n    gene=\"TP53\",\n    significance=[\"pathogenic\", \"likely_pathogenic\"]\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#filter-by-frequency","title":"Filter by Frequency","text":"<p>Find rare variants:</p> <pre><code># Rare variants (MAF &lt; 1%)\nrare_variants = await variant_searcher(\n    gene=\"CFTR\",\n    frequency_max=0.01,\n    significance=\"pathogenic\"\n)\n\n# Ultra-rare variants\nultra_rare = await variant_searcher(\n    gene=\"SCN1A\",\n    frequency_max=0.0001\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#filter-by-prediction-scores","title":"Filter by Prediction Scores","text":"<pre><code># High-impact variants\nhigh_impact = await variant_searcher(\n    gene=\"MLH1\",\n    cadd_score_min=20,  # CADD &gt; 20 suggests deleteriousness\n    polyphen_prediction=\"probably_damaging\"\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#external-database-integration","title":"External Database Integration","text":"<p>For technical details on external data sources, see the BioThings Suite Reference.</p>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#tcga-cancer-data","title":"TCGA Cancer Data","text":"<p>Variants automatically include TCGA annotations when available:</p> <pre><code>variant = await variant_getter(\"rs121913529\", include_external=True)\n\n# Check TCGA data\nif variant.external_data.get(\"tcga\"):\n    tcga = variant.external_data[\"tcga\"]\n    print(f\"TCGA Studies: {tcga['study_count']}\")\n    print(f\"Cancer Types: {', '.join(tcga['cancer_types'])}\")\n    print(f\"Sample Count: {tcga['sample_count']}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#1000-genomes-project","title":"1000 Genomes Project","text":"<p>Population-specific frequencies:</p> <pre><code># Access 1000 Genomes data\nif variant.external_data.get(\"thousand_genomes\"):\n    tg_data = variant.external_data[\"thousand_genomes\"]\n    print(\"Population Frequencies:\")\n    for pop, freq in tg_data[\"populations\"].items():\n        print(f\"  {pop}: {freq}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#ensembl-vep-annotations","title":"Ensembl VEP Annotations","text":"<pre><code># Consequence predictions\nif variant.consequences:\n    for consequence in variant.consequences:\n        print(f\"Gene: {consequence.gene}\")\n        print(f\"Impact: {consequence.impact}\")\n        print(f\"Consequence: {consequence.consequence_terms}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#integration-with-other-biomcp-tools","title":"Integration with Other BioMCP Tools","text":"<p>BioMCP's unified architecture allows seamless integration between variant data and other biomedical information. For implementation details, see the Transport Protocol Guide.</p>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#variant-to-gene-information","title":"Variant to Gene Information","text":"<pre><code># Get variant\nvariant = await variant_getter(\"rs121913529\")\n\n# Get associated gene details\ngene_symbol = variant.gene.symbol  # \"BRAF\"\ngene_info = await gene_getter(gene_symbol)\n\nprint(f\"Gene: {gene_info.name}\")\nprint(f\"Function: {gene_info.summary}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#variant-to-disease-context","title":"Variant to Disease Context","text":"<pre><code># Find disease associations\ndiseases = variant.disease_associations\n\nfor disease in diseases:\n    # Get detailed disease info\n    disease_info = await disease_getter(disease.name)\n    print(f\"Disease: {disease_info.name}\")\n    print(f\"Definition: {disease_info.definition}\")\n    print(f\"Synonyms: {', '.join(disease_info.synonyms)}\")\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#variant-to-clinical-trials","title":"Variant to Clinical Trials","text":"<pre><code># Search trials for specific variant\ngene = variant.gene.symbol\nmutation = variant.protein_change  # e.g., \"V600E\"\n\ntrials = await trial_searcher(\n    other_terms=[f\"{gene} {mutation}\", f\"{gene} mutation\"],\n    recruiting_status=\"OPEN\"\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#practical-workflows","title":"Practical Workflows","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#workflow-1-cancer-variant-analysis","title":"Workflow 1: Cancer Variant Analysis","text":"<pre><code>async def analyze_cancer_variant(hgvs: str):\n    # Think about the analysis\n    await think(\n        thought=f\"Analyzing cancer variant {hgvs}\",\n        thoughtNumber=1\n    )\n\n    # Get variant details\n    variant = await variant_getter(hgvs, include_external=True)\n\n    # Get gene context\n    gene = await gene_getter(variant.gene.symbol)\n\n    # Search for targeted therapies\n    drugs = await search(\n        query=f\"drugs.targets:{variant.gene.symbol}\",\n        domain=\"drug\"\n    )\n\n    # Find relevant trials\n    trials = await trial_searcher(\n        other_terms=[\n            variant.gene.symbol,\n            variant.protein_change,\n            \"targeted therapy\"\n        ],\n        recruiting_status=\"OPEN\"\n    )\n\n    # Search literature\n    articles = await article_searcher(\n        genes=[variant.gene.symbol],\n        variants=[hgvs],\n        keywords=[\"therapy\", \"treatment\", \"resistance\"]\n    )\n\n    return {\n        \"variant\": variant,\n        \"gene\": gene,\n        \"potential_drugs\": drugs,\n        \"clinical_trials\": trials,\n        \"literature\": articles\n    }\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#workflow-2-rare-disease-variant","title":"Workflow 2: Rare Disease Variant","text":"<pre><code>async def rare_disease_variant_analysis(gene: str, phenotype: str):\n    # Find all pathogenic variants\n    variants = await variant_searcher(\n        gene=gene,\n        significance=[\"pathogenic\", \"likely_pathogenic\"],\n        frequency_max=0.001  # Rare\n    )\n\n    # Analyze each variant\n    results = []\n    for v in variants[:10]:  # Top 10\n        # Get full annotations\n        full_variant = await variant_getter(v.id)\n\n        # Check phenotype associations\n        if phenotype.lower() in str(full_variant.phenotypes).lower():\n            results.append({\n                \"variant\": full_variant,\n                \"phenotype_match\": True,\n                \"frequency\": full_variant.frequencies.gnomad or 0\n            })\n\n    # Sort by relevance\n    results.sort(key=lambda x: x[\"frequency\"])\n    return results\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#workflow-3-pharmacogenomics","title":"Workflow 3: Pharmacogenomics","text":"<pre><code>async def pharmacogenomic_analysis(drug_name: str):\n    # Get drug information\n    drug = await drug_getter(drug_name)\n\n    # Find pharmGKB annotations\n    pgx_variants = []\n\n    # Search for drug-related variants\n    if drug.targets:\n        for target in drug.targets:\n            variants = await variant_searcher(\n                gene=target,\n                keywords=[drug_name, \"pharmacogenomics\", \"drug response\"]\n            )\n            pgx_variants.extend(variants)\n\n    # Get detailed annotations\n    annotated = []\n    for v in pgx_variants:\n        full = await variant_getter(v.id)\n        if full.pharmacogenomics:\n            annotated.append(full)\n\n    return {\n        \"drug\": drug,\n        \"pgx_variants\": annotated,\n        \"affected_genes\": list(set(v.gene.symbol for v in annotated))\n    }\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#interpreting-results","title":"Interpreting Results","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#clinical-actionability","title":"Clinical Actionability","text":"<pre><code>def assess_actionability(variant):\n    \"\"\"Determine if variant is clinically actionable\"\"\"\n\n    actionable = False\n    reasons = []\n\n    # Check pathogenicity\n    if variant.clinical_significance in [\"pathogenic\", \"likely_pathogenic\"]:\n        actionable = True\n        reasons.append(\"Pathogenic variant\")\n\n    # Check for drug associations\n    if variant.drug_associations:\n        actionable = True\n        reasons.append(f\"Associated with {len(variant.drug_associations)} drugs\")\n\n    # Check guidelines\n    if variant.clinical_guidelines:\n        actionable = True\n        reasons.append(\"Clinical guidelines available\")\n\n    return {\n        \"actionable\": actionable,\n        \"reasons\": reasons,\n        \"recommendations\": variant.clinical_guidelines\n    }\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#report-generation","title":"Report Generation","text":"<pre><code>def generate_variant_report(variant):\n    \"\"\"Create a clinical variant report\"\"\"\n\n    report = f\"\"\"\n## Variant Report: {variant.id}\n\n### Basic Information\n- **Gene**: {variant.gene.symbol}\n- **Protein Change**: {variant.protein_change or \"N/A\"}\n- **Genomic Location**: chr{variant.chr}:{variant.pos}\n- **Reference**: {variant.ref} \u2192 **Alternate**: {variant.alt}\n\n### Clinical Significance\n- **Status**: {variant.clinical_significance}\n- **Review**: {variant.review_status}\n- **Last Updated**: {variant.last_updated}\n\n### Population Frequency\n- **gnomAD**: {variant.frequencies.gnomad or \"Not found\"}\n- **1000 Genomes**: {variant.frequencies.thousand_genomes or \"Not found\"}\n\n### Predictions\n- **CADD Score**: {variant.predictions.cadd or \"N/A\"}\n- **PolyPhen**: {variant.predictions.polyphen or \"N/A\"}\n- **SIFT**: {variant.predictions.sift or \"N/A\"}\n\n### Associated Conditions\n{format_conditions(variant.conditions)}\n\n### Clinical Resources\n- **ClinVar**: {variant.clinvar_url}\n- **dbSNP**: {variant.dbsnp_url}\n\"\"\"\n    return report\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#best-practices","title":"Best Practices","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#1-use-multiple-identifiers","title":"1. Use Multiple Identifiers","text":"<pre><code># Try multiple formats if one fails\nidentifiers = [\n    \"rs121913529\",\n    \"NM_004333.4:c.1799T&gt;A\",\n    \"7:140453136:A:T\"\n]\n\nfor id in identifiers:\n    try:\n        variant = await variant_getter(id)\n        break\n    except:\n        continue\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#2-check-data-completeness","title":"2. Check Data Completeness","text":"<pre><code># Not all variants have all annotations\nif variant.frequencies:\n    # Use frequency data\n    pass\nelse:\n    # Note that frequency unavailable\n    pass\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#3-consider-assembly-versions","title":"3. Consider Assembly Versions","text":"<pre><code># Specify genome assembly\nvariants_hg38 = await variant_searcher(\n    chromosome=\"7\",\n    start=140453136,\n    assembly=\"hg38\"\n)\n\nvariants_hg19 = await variant_searcher(\n    chromosome=\"7\",\n    start=140153336,  # Different coordinate!\n    assembly=\"hg19\"\n)\n</code></pre>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#variant-not-found","title":"Variant Not Found","text":"<ol> <li>Check notation: Ensure proper HGVS format</li> <li>Try alternatives: rsID, genomic coordinates, protein change</li> <li>Verify gene symbol: Use official HGNC symbols</li> </ol>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#missing-annotations","title":"Missing Annotations","text":"<ul> <li>Not all variants have all data types</li> <li>Rare variants may lack population frequencies</li> <li>Novel variants won't have ClinVar data</li> </ul>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#performance-issues","title":"Performance Issues","text":"<ul> <li>Use pagination for large searches</li> <li>Limit external data requests when not needed</li> <li>Cache frequently accessed variants</li> </ul>"},{"location":"how-to-guides/03-get-comprehensive-variant-annotations/#next-steps","title":"Next Steps","text":"<ul> <li>Learn to predict variant effects</li> <li>Explore article searches for variant literature</li> <li>Set up logging and monitoring</li> </ul>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/","title":"How to Predict Variant Effects with AlphaGenome","text":"<p>This guide demonstrates how to use Google DeepMind's AlphaGenome to predict regulatory effects of genetic variants on gene expression, chromatin accessibility, and splicing.</p>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#overview","title":"Overview","text":"<p>AlphaGenome predicts how DNA variants affect:</p> <ul> <li>Gene Expression: Log-fold changes in nearby genes</li> <li>Chromatin Accessibility: ATAC-seq/DNase-seq signal changes</li> <li>Splicing: Effects on splice sites and exon inclusion</li> <li>Regulatory Elements: Impact on enhancers, promoters, and TFBS</li> <li>3D Chromatin: Changes in chromatin interactions</li> </ul> <p>For technical details on the AlphaGenome integration, see the AlphaGenome API Reference.</p>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#setup-and-api-key","title":"Setup and API Key","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#get-your-api-key","title":"Get Your API Key","text":"<ol> <li>Visit AlphaGenome Portal</li> <li>Register for non-commercial use</li> <li>Receive API key via email</li> </ol> <p>For detailed setup instructions, see Authentication and API Keys.</p>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#configure-api-key","title":"Configure API Key","text":"<p>Option 1: Environment Variable (Personal Use)</p> <pre><code>export ALPHAGENOME_API_KEY=\"your-key-here\"\n</code></pre> <p>Option 2: Per-Request (AI Assistants)</p> <pre><code>\"Predict effects of BRAF V600E. My AlphaGenome API key is YOUR_KEY_HERE\"\n</code></pre> <p>Option 3: Configuration File</p> <pre><code># .env file\nALPHAGENOME_API_KEY=your-key-here\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#install-alphagenome-optional","title":"Install AlphaGenome (Optional)","text":"<p>For local predictions:</p> <pre><code>git clone https://github.com/google-deepmind/alphagenome.git\ncd alphagenome &amp;&amp; pip install .\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#basic-variant-prediction","title":"Basic Variant Prediction","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#simple-prediction","title":"Simple Prediction","text":"<p>Predict effects of BRAF V600E mutation:</p> <pre><code># CLI\nbiomcp variant predict chr7 140753336 A T\n\n# Python\nresult = await client.variants.predict(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\"\n)\n\n# MCP Tool\nresult = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\"\n)\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#understanding-results","title":"Understanding Results","text":"<pre><code># Gene expression changes\nfor gene in result.gene_expression:\n    print(f\"{gene.name}: {gene.log2_fold_change}\")\n    # Positive = increased expression\n    # Negative = decreased expression\n    # |value| &gt; 1.0 = strong effect\n\n# Chromatin accessibility\nfor region in result.chromatin:\n    print(f\"{region.type}: {region.change}\")\n    # Positive = more open chromatin\n    # Negative = more closed chromatin\n\n# Splicing effects\nfor splice in result.splicing:\n    print(f\"{splice.event}: {splice.delta_psi}\")\n    # PSI = Percent Spliced In\n    # Positive = increased inclusion\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#tissue-specific-predictions","title":"Tissue-Specific Predictions","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#single-tissue-analysis","title":"Single Tissue Analysis","text":"<p>Predict effects in specific tissues using UBERON terms:</p> <pre><code># Breast tissue analysis\nresult = await alphagenome_predictor(\n    chromosome=\"chr17\",\n    position=41246481,\n    reference=\"G\",\n    alternate=\"A\",\n    tissue_types=[\"UBERON:0000310\"]  # breast\n)\n\n# Common tissue codes:\n# UBERON:0000310 - breast\n# UBERON:0002107 - liver\n# UBERON:0002367 - prostate\n# UBERON:0000955 - brain\n# UBERON:0002048 - lung\n# UBERON:0001155 - colon\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#multi-tissue-comparison","title":"Multi-Tissue Comparison","text":"<p>Compare effects across tissues:</p> <pre><code>tissues = [\n    \"UBERON:0000310\",  # breast\n    \"UBERON:0002107\",  # liver\n    \"UBERON:0002048\"   # lung\n]\n\nresults = {}\nfor tissue in tissues:\n    results[tissue] = await alphagenome_predictor(\n        chromosome=\"chr17\",\n        position=41246481,\n        reference=\"G\",\n        alternate=\"A\",\n        tissue_types=[tissue]\n    )\n\n# Compare gene expression across tissues\nfor tissue, result in results.items():\n    print(f\"\\n{tissue}:\")\n    for gene in result.gene_expression[:3]:\n        print(f\"  {gene.name}: {gene.log2_fold_change}\")\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#analysis-window-sizes","title":"Analysis Window Sizes","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#choosing-the-right-interval","title":"Choosing the Right Interval","text":"<p>Different interval sizes capture different regulatory effects:</p> <pre><code># Short-range (promoter effects)\nresult_2kb = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    interval_size=2048  # 2kb\n)\n\n# Medium-range (enhancer-promoter)\nresult_128kb = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    interval_size=131072  # 128kb (default)\n)\n\n# Long-range (TAD-level effects)\nresult_1mb = await alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    interval_size=1048576  # 1Mb\n)\n</code></pre> <p>Interval Size Guide:</p> <ul> <li>2kb: Promoter variants, TSS mutations</li> <li>16kb: Local regulatory elements</li> <li>128kb: Enhancer-promoter interactions (default)</li> <li>512kb: Long-range regulatory</li> <li>1Mb: TAD boundaries, super-enhancers</li> </ul>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#clinical-workflows","title":"Clinical Workflows","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#workflow-1-vus-variant-of-unknown-significance-analysis","title":"Workflow 1: VUS (Variant of Unknown Significance) Analysis","text":"<pre><code>async def analyze_vus(chromosome: str, position: int, ref: str, alt: str):\n    # Step 1: Think about the analysis\n    await think(\n        thought=f\"Analyzing VUS at {chromosome}:{position} {ref}&gt;{alt}\",\n        thoughtNumber=1\n    )\n\n    # Step 2: Get variant annotations\n    variant_id = f\"{chromosome}:g.{position}{ref}&gt;{alt}\"\n    try:\n        known_variant = await variant_getter(variant_id)\n        if known_variant.clinical_significance:\n            return f\"Already classified: {known_variant.clinical_significance}\"\n    except:\n        pass  # Variant not in databases\n\n    # Step 3: Predict regulatory effects\n    prediction = await alphagenome_predictor(\n        chromosome=chromosome,\n        position=position,\n        reference=ref,\n        alternate=alt,\n        interval_size=131072\n    )\n\n    # Step 4: Analyze impact\n    high_impact_genes = [\n        g for g in prediction.gene_expression\n        if abs(g.log2_fold_change) &gt; 1.0\n    ]\n\n    # Step 5: Search literature\n    if high_impact_genes:\n        gene_symbols = [g.name for g in high_impact_genes[:3]]\n        articles = await article_searcher(\n            genes=gene_symbols,\n            keywords=[\"pathogenic\", \"disease\", \"mutation\"]\n        )\n\n    return {\n        \"variant\": f\"{chromosome}:{position} {ref}&gt;{alt}\",\n        \"high_impact_genes\": high_impact_genes,\n        \"regulatory_assessment\": assess_regulatory_impact(prediction),\n        \"literature_support\": len(articles) if high_impact_genes else 0\n    }\n\ndef assess_regulatory_impact(prediction):\n    \"\"\"Classify regulatory impact severity\"\"\"\n    max_expression_change = max(\n        abs(g.log2_fold_change) for g in prediction.gene_expression\n    ) if prediction.gene_expression else 0\n\n    if max_expression_change &gt; 2.0:\n        return \"HIGH - Strong regulatory effect\"\n    elif max_expression_change &gt; 1.0:\n        return \"MODERATE - Significant regulatory effect\"\n    elif max_expression_change &gt; 0.5:\n        return \"LOW - Mild regulatory effect\"\n    else:\n        return \"MINIMAL - No significant regulatory effect\"\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#workflow-2-non-coding-variant-prioritization","title":"Workflow 2: Non-coding Variant Prioritization","text":"<pre><code>async def prioritize_noncoding_variants(variants: list[dict], disease_genes: list[str]):\n    \"\"\"Rank non-coding variants by predicted impact on disease genes\"\"\"\n\n    results = []\n\n    for variant in variants:\n        # Predict effects\n        prediction = await alphagenome_predictor(\n            chromosome=variant[\"chr\"],\n            position=variant[\"pos\"],\n            reference=variant[\"ref\"],\n            alternate=variant[\"alt\"]\n        )\n\n        # Check impact on disease genes\n        disease_impact = {}\n        for gene in prediction.gene_expression:\n            if gene.name in disease_genes:\n                disease_impact[gene.name] = gene.log2_fold_change\n\n        # Calculate priority score\n        if disease_impact:\n            max_impact = max(abs(v) for v in disease_impact.values())\n            results.append({\n                \"variant\": variant,\n                \"disease_genes_affected\": disease_impact,\n                \"priority_score\": max_impact,\n                \"chromatin_changes\": len([c for c in prediction.chromatin if c.change &gt; 0.5])\n            })\n\n    # Sort by priority\n    results.sort(key=lambda x: x[\"priority_score\"], reverse=True)\n    return results\n\n# Example usage\nvariants_to_test = [\n    {\"chr\": \"chr17\", \"pos\": 41246000, \"ref\": \"A\", \"alt\": \"G\"},\n    {\"chr\": \"chr17\", \"pos\": 41246500, \"ref\": \"C\", \"alt\": \"T\"},\n    {\"chr\": \"chr17\", \"pos\": 41247000, \"ref\": \"G\", \"alt\": \"A\"}\n]\n\nbreast_cancer_genes = [\"BRCA1\", \"BRCA2\", \"TP53\", \"PTEN\"]\nprioritized = await prioritize_noncoding_variants(variants_to_test, breast_cancer_genes)\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#workflow-3-splicing-analysis","title":"Workflow 3: Splicing Analysis","text":"<pre><code>async def analyze_splicing_variant(gene: str, exon: int, variant_pos: int, ref: str, alt: str):\n    \"\"\"Analyze potential splicing effects of a variant\"\"\"\n\n    # Get gene information\n    gene_info = await gene_getter(gene)\n    chromosome = f\"chr{gene_info.genomic_location.chr}\"\n\n    # Predict splicing effects\n    prediction = await alphagenome_predictor(\n        chromosome=chromosome,\n        position=variant_pos,\n        reference=ref,\n        alternate=alt,\n        interval_size=16384  # Smaller window for splicing\n    )\n\n    # Analyze splicing predictions\n    splicing_effects = []\n    for event in prediction.splicing:\n        if abs(event.delta_psi) &gt; 0.1:  # 10% change in splicing\n            splicing_effects.append({\n                \"type\": event.event_type,\n                \"change\": event.delta_psi,\n                \"affected_exon\": event.exon,\n                \"interpretation\": interpret_splicing(event)\n            })\n\n    # Search for similar splicing variants\n    articles = await article_searcher(\n        genes=[gene],\n        keywords=[f\"exon {exon}\", \"splicing\", \"splice site\"]\n    )\n\n    return {\n        \"variant\": f\"{gene} exon {exon} {ref}&gt;{alt}\",\n        \"splicing_effects\": splicing_effects,\n        \"likely_consequence\": predict_consequence(splicing_effects),\n        \"literature_precedent\": len(articles)\n    }\n\ndef interpret_splicing(event):\n    \"\"\"Interpret splicing changes\"\"\"\n    if event.delta_psi &gt; 0.5:\n        return \"Strong increase in exon inclusion\"\n    elif event.delta_psi &gt; 0.1:\n        return \"Moderate increase in exon inclusion\"\n    elif event.delta_psi &lt; -0.5:\n        return \"Strong exon skipping\"\n    elif event.delta_psi &lt; -0.1:\n        return \"Moderate exon skipping\"\n    else:\n        return \"Minimal splicing change\"\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#research-applications","title":"Research Applications","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#enhancer-variant-analysis","title":"Enhancer Variant Analysis","text":"<pre><code>async def analyze_enhancer_variant(chr: str, pos: int, ref: str, alt: str, target_gene: str):\n    \"\"\"Analyze variant in potential enhancer region\"\"\"\n\n    # Use larger window to capture enhancer-promoter interactions\n    prediction = await alphagenome_predictor(\n        chromosome=chr,\n        position=pos,\n        reference=ref,\n        alternate=alt,\n        interval_size=524288  # 512kb\n    )\n\n    # Find target gene effect\n    target_effect = None\n    for gene in prediction.gene_expression:\n        if gene.name == target_gene:\n            target_effect = gene.log2_fold_change\n            break\n\n    # Analyze chromatin changes\n    chromatin_opening = sum(\n        1 for c in prediction.chromatin\n        if c.change &gt; 0 and c.type == \"enhancer\"\n    )\n\n    return {\n        \"variant_location\": f\"{chr}:{pos}\",\n        \"target_gene\": target_gene,\n        \"expression_change\": target_effect,\n        \"enhancer_activity\": \"increased\" if chromatin_opening &gt; 0 else \"decreased\",\n        \"likely_enhancer\": abs(target_effect or 0) &gt; 0.5 and chromatin_opening &gt; 0\n    }\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#pharmacogenomic-predictions","title":"Pharmacogenomic Predictions","text":"<pre><code>async def predict_drug_response_variant(drug_target: str, variant: dict):\n    \"\"\"Predict how variant affects drug target expression\"\"\"\n\n    # Get drug information\n    drug_info = await drug_getter(drug_target)\n    target_genes = drug_info.targets\n\n    # Predict variant effects\n    prediction = await alphagenome_predictor(\n        chromosome=variant[\"chr\"],\n        position=variant[\"pos\"],\n        reference=variant[\"ref\"],\n        alternate=variant[\"alt\"],\n        tissue_types=[\"UBERON:0002107\"]  # liver for drug metabolism\n    )\n\n    # Check effects on drug targets\n    target_effects = {}\n    for gene in prediction.gene_expression:\n        if gene.name in target_genes:\n            target_effects[gene.name] = gene.log2_fold_change\n\n    # Interpret results\n    if any(abs(effect) &gt; 1.0 for effect in target_effects.values()):\n        response = \"Likely altered drug response\"\n    elif any(abs(effect) &gt; 0.5 for effect in target_effects.values()):\n        response = \"Possible altered drug response\"\n    else:\n        response = \"Unlikely to affect drug response\"\n\n    return {\n        \"drug\": drug_target,\n        \"variant\": variant,\n        \"target_effects\": target_effects,\n        \"prediction\": response,\n        \"recommendation\": \"Consider dose adjustment\" if \"altered\" in response else \"Standard dosing\"\n    }\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#best-practices","title":"Best Practices","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#1-validate-input-coordinates","title":"1. Validate Input Coordinates","text":"<pre><code># Always use \"chr\" prefix\nchromosome = \"chr7\"  # \u2705 Correct\n# chromosome = \"7\"   # \u274c Wrong\n\n# Use 1-based positions (not 0-based)\nposition = 140753336  # \u2705 1-based\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#2-handle-api-errors-gracefully","title":"2. Handle API Errors Gracefully","text":"<pre><code>try:\n    result = await alphagenome_predictor(...)\nexcept Exception as e:\n    if \"API key\" in str(e):\n        print(\"Please provide AlphaGenome API key\")\n    elif \"Invalid sequence\" in str(e):\n        print(\"Check chromosome and position\")\n    else:\n        print(f\"Prediction failed: {e}\")\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#3-combine-with-other-tools","title":"3. Combine with Other Tools","text":"<pre><code># Complete variant analysis pipeline\nasync def comprehensive_variant_analysis(variant_id: str):\n    # 1. Get known annotations\n    known = await variant_getter(variant_id)\n\n    # 2. Predict regulatory effects\n    prediction = await alphagenome_predictor(\n        chromosome=f\"chr{known.chr}\",\n        position=known.pos,\n        reference=known.ref,\n        alternate=known.alt\n    )\n\n    # 3. Search literature\n    articles = await article_searcher(\n        variants=[variant_id],\n        genes=[known.gene.symbol]\n    )\n\n    # 4. Find relevant trials\n    trials = await trial_searcher(\n        other_terms=[known.gene.symbol, \"mutation\"]\n    )\n\n    return {\n        \"annotations\": known,\n        \"predictions\": prediction,\n        \"literature\": articles,\n        \"trials\": trials\n    }\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#4-interpret-results-appropriately","title":"4. Interpret Results Appropriately","text":"<pre><code>def interpret_expression_change(log2_fc):\n    \"\"\"Convert log2 fold change to interpretation\"\"\"\n    if log2_fc &gt; 2.0:\n        return \"Very strong increase (&gt;4x)\"\n    elif log2_fc &gt; 1.0:\n        return \"Strong increase (2-4x)\"\n    elif log2_fc &gt; 0.5:\n        return \"Moderate increase (1.4-2x)\"\n    elif log2_fc &lt; -2.0:\n        return \"Very strong decrease (&lt;0.25x)\"\n    elif log2_fc &lt; -1.0:\n        return \"Strong decrease (0.25-0.5x)\"\n    elif log2_fc &lt; -0.5:\n        return \"Moderate decrease (0.5-0.7x)\"\n    else:\n        return \"Minimal change\"\n</code></pre>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#limitations-and-considerations","title":"Limitations and Considerations","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#technical-limitations","title":"Technical Limitations","text":"<ul> <li>Human only: GRCh38 reference genome</li> <li>SNVs only: No indels or structural variants</li> <li>Exact coordinates: Must have precise genomic position</li> <li>Sequence context: Requires reference sequence match</li> </ul>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#interpretation-caveats","title":"Interpretation Caveats","text":"<ul> <li>Predictions not certainties: Validate with functional studies</li> <li>Context matters: Cell type, developmental stage affect outcomes</li> <li>Indirect effects: May miss complex regulatory cascades</li> <li>Population variation: Individual genetic background influences</li> </ul>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#common-issues","title":"Common Issues","text":"<p>\"API key required\"</p> <ul> <li>Set environment variable or provide per-request</li> <li>Check key validity at AlphaGenome portal</li> </ul> <p>\"Invalid sequence length\"</p> <ul> <li>Verify chromosome format (use \"chr\" prefix)</li> <li>Check position is within chromosome bounds</li> <li>Ensure ref/alt are single nucleotides</li> </ul> <p>\"No results returned\"</p> <ul> <li>May be no genes in analysis window</li> <li>Try larger interval size</li> <li>Check if variant is in gene desert</li> </ul> <p>Installation issues</p> <ul> <li>Ensure Python 3.10+</li> <li>Try <code>pip install --upgrade pip</code> first</li> <li>Check for conflicting protobuf versions</li> </ul>"},{"location":"how-to-guides/04-predict-variant-effects-with-alphagenome/#next-steps","title":"Next Steps","text":"<ul> <li>Explore comprehensive variant annotations</li> <li>Learn about article searches for variants</li> <li>Set up logging and monitoring</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/","title":"BigQuery Logging for BioMCP","text":"<p>This document outlines how BioMCP uses Google BigQuery for logging user interactions and API usage.</p>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#overview","title":"Overview","text":"<p>BioMCP integrates with Google BigQuery to log user interactions, queries, and API usage. This logging provides valuable insights into how the system is being used, helps with debugging, and enables analytics for improving the service.</p>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google Cloud Platform (GCP) account</li> <li>A BigQuery dataset and table created in your GCP project</li> <li>A GCP service account with BigQuery permissions</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#setting-up-bigquery-for-biomcp","title":"Setting Up BigQuery for BioMCP","text":"<ol> <li> <p>Create a BigQuery Dataset and Table</p> </li> <li> <p>In the Google Cloud Console, navigate to BigQuery</p> </li> <li>Create a new dataset (e.g., <code>biomcp_logs</code>)</li> <li>Create a table within the dataset (e.g., <code>worker_logs</code>) with the following schema:      <pre><code>timestamp: TIMESTAMP\nuserEmail: STRING\nquery: STRING\n</code></pre></li> <li> <p>Adjust the schema as needed for your specific logging requirements</p> </li> <li> <p>Create a Service Account</p> </li> <li> <p>Navigate to \"IAM &amp; Admin\" &gt; \"Service Accounts\" in the Google Cloud Console</p> </li> <li>Create a new service account with a descriptive name (e.g., <code>biomcp-bigquery-logger</code>)</li> <li>Assign the \"BigQuery Data Editor\" role to the service account</li> <li> <p>Create and download a JSON key for the service account</p> </li> <li> <p>Configure BioMCP with BigQuery Credentials</p> </li> <li> <p>Open <code>wrangler.toml</code> in the BioMCP project</p> </li> <li>Update the following variables with your BigQuery information:      <pre><code>BQ_PROJECT_ID = \"your-gcp-project-id\"\nBQ_DATASET = \"biomcp_logs\"\nBQ_TABLE = \"worker_logs\"\n</code></pre></li> <li>For the service account key, use Cloudflare's secret management:      <pre><code>npx wrangler secret put BQ_SA_KEY_JSON\n</code></pre>      When prompted, paste the entire JSON content of your service account key file</li> </ol>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#how-bigquery-logging-works","title":"How BigQuery Logging Works","text":"<p>The BioMCP worker uses the following process to log data to BigQuery:</p> <ol> <li>Authentication: The worker generates a JWT token using the service account credentials</li> <li>Token Exchange: The JWT is exchanged for a Google OAuth access token</li> <li>Data Insertion: The worker uses BigQuery's streaming insert API to log events</li> </ol> <p>The implementation includes:</p> <ul> <li>Token caching to minimize authentication requests</li> <li>Error handling for failed logging attempts</li> <li>Automatic retry logic for transient failures</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#logged-information","title":"Logged Information","text":"<p>By default, the following information is logged to BigQuery:</p> <ul> <li>timestamp: When the event occurred</li> <li>userEmail: The email address of the authenticated user (if available)</li> <li>query: The query or request that was made</li> </ul> <p>You can extend the logging schema to include additional information as needed.</p>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#accessing-and-analyzing-logs","title":"Accessing and Analyzing Logs","text":"<p>To access and analyze the logs:</p> <ol> <li> <p>Query the BigQuery Table</p> </li> <li> <p>Use the BigQuery console or SQL to query your logs</p> </li> <li> <p>Example query to see recent logs:      <pre><code>SELECT timestamp, userEmail, query\nFROM `your-project.biomcp_logs.worker_logs`\nORDER BY timestamp DESC\nLIMIT 100\n</code></pre></p> </li> <li> <p>Create Visualizations</p> </li> <li> <p>Use Google Data Studio to create dashboards based on your BigQuery data</p> </li> <li>Connect Data Studio to your BigQuery table and create visualizations</li> </ol>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#security-considerations","title":"Security Considerations","text":"<ul> <li>The service account key is sensitive information and should be protected</li> <li>Use Cloudflare's secret management to store the key securely</li> <li>Consider implementing field-level encryption for sensitive data</li> <li>Implement data retention policies to comply with privacy regulations</li> <li>IMPORTANT: Never include PHI (Protected Health Information) or PII (Personally Identifiable Information) in queries or logs</li> <li>Ensure all queries are sanitized to remove patient identifiers, medical record numbers, and other sensitive information</li> <li>Consider implementing automatic redaction of potential PHI/PII from logs</li> <li>Regularly audit logs to ensure compliance with HIPAA and other privacy regulations</li> <li>Remember that BigQuery logs are not designed for storing protected health information</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#automatic-sanitization","title":"Automatic Sanitization","text":"<p>BioMCP automatically sanitizes sensitive data before logging to BigQuery:</p> <ul> <li>API Keys and Secrets: Fields containing <code>api_key</code>, <code>apiKey</code>, <code>api-key</code>, <code>token</code>, <code>secret</code>, or <code>password</code> are automatically redacted</li> <li>Nested Objects: Sanitization works recursively through nested objects and arrays</li> <li>Case-Insensitive: Field name matching is case-insensitive to catch variations</li> <li>Preserved Structure: The original request structure is maintained with sensitive values replaced by <code>[REDACTED]</code></li> </ul> <p>Example of sanitization:</p> <pre><code>// Original request\n{\n  \"params\": {\n    \"arguments\": {\n      \"api_key\": \"AIzaSyB1234567890\",\n      \"gene\": \"BRAF\"\n    }\n  }\n}\n\n// Sanitized for BigQuery\n{\n  \"params\": {\n    \"arguments\": {\n      \"api_key\": \"[REDACTED]\",\n      \"gene\": \"BRAF\"\n    }\n  }\n}\n</code></pre>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#excluded-queries","title":"Excluded Queries","text":"<p>Certain types of queries are automatically excluded from BigQuery logging:</p> <ul> <li>Think Tool Calls: Any calls to the <code>think</code> tool are not logged</li> <li>Thinking Domain: Queries with <code>domain=\"thinking\"</code> or <code>domain=\"think\"</code> are excluded</li> <li>Privacy-First Design: This ensures that internal reasoning and analysis steps remain private</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Authentication Failures: Verify that the service account key is correctly formatted and has the necessary permissions</li> <li>Insertion Errors: Check that the BigQuery table schema matches the data being inserted</li> <li>Missing Logs: Ensure that the worker has network access to the BigQuery API</li> </ul>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#example-code","title":"Example Code","text":"<p>The worker includes the following key functions for BigQuery logging:</p> <ul> <li><code>getBQToken()</code>: Fetches and caches a BigQuery OAuth token</li> <li><code>insertEvent()</code>: Inserts a single row into BigQuery via streaming insert</li> <li><code>sanitizeObject()</code>: Recursively sanitizes sensitive fields from objects before logging</li> </ul> <p>These functions handle the authentication and data insertion process automatically.</p>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#testing","title":"Testing","text":"<p>BioMCP includes comprehensive tests for the BigQuery logging functionality:</p>"},{"location":"how-to-guides/05-logging-and-monitoring-with-bigquery/#javascript-tests","title":"JavaScript Tests","text":"<p>The sanitization logic is tested using Node.js built-in test framework:</p> <pre><code># Run JavaScript worker tests\nmake test-js\n\n# Or run directly\nnode --test tests/tdd/workers/test_worker_sanitization.js\n</code></pre> <p>Tests cover:</p> <ul> <li>API key redaction</li> <li>Nested sensitive field handling</li> <li>Array sanitization</li> <li>Case-insensitive field matching</li> <li>Think tool detection</li> <li>Domain-based filtering</li> </ul>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/","title":"How to Search NCI Organizations and Interventions","text":"<p>This guide demonstrates how to use BioMCP's NCI-specific tools to search for cancer research organizations, interventions (drugs, devices, procedures), and biomarkers.</p>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#prerequisites","title":"Prerequisites","text":"<p>All NCI tools require an API key from api.cancer.gov:</p> <pre><code># Set as environment variable\nexport NCI_API_KEY=\"your-key-here\"\n\n# Or provide per-request in your prompts\n\"Find cancer centers in Boston, my NCI API key is YOUR_KEY\"\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#organization-search-and-lookup","title":"Organization Search and Lookup","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#understanding-organization-search","title":"Understanding Organization Search","text":"<p>The NCI Organization database contains:</p> <ul> <li>Cancer research centers and hospitals</li> <li>Clinical trial sponsors</li> <li>Academic institutions</li> <li>Pharmaceutical companies</li> <li>Government facilities</li> </ul>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#basic-organization-search","title":"Basic Organization Search","text":"<p>Find organizations by name:</p> <pre><code># CLI\nbiomcp organization search --name \"MD Anderson\" --api-key YOUR_KEY\n\n# Python\norgs = await nci_organization_searcher(\n    name=\"MD Anderson\",\n    api_key=\"your-key\"\n)\n\n# MCP/AI Assistant\n\"Search for MD Anderson Cancer Center, my NCI API key is YOUR_KEY\"\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#location-based-search","title":"Location-Based Search","text":"<p>CRITICAL: Always use city AND state together to avoid Elasticsearch errors!</p> <pre><code># \u2705 CORRECT - City and state together\norgs = await nci_organization_searcher(\n    city=\"Houston\",\n    state=\"TX\",\n    api_key=\"your-key\"\n)\n\n# \u274c WRONG - Will cause API error\norgs = await nci_organization_searcher(\n    city=\"Houston\",  # Missing state!\n    api_key=\"your-key\"\n)\n\n# \u274c WRONG - Will cause API error\norgs = await nci_organization_searcher(\n    state=\"TX\",  # Missing city!\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#organization-types","title":"Organization Types","text":"<p>Search by organization type:</p> <pre><code># Find academic cancer centers\nacademic_centers = await nci_organization_searcher(\n    organization_type=\"Academic\",\n    api_key=\"your-key\"\n)\n\n# Find pharmaceutical companies\npharma_companies = await nci_organization_searcher(\n    organization_type=\"Industry\",\n    api_key=\"your-key\"\n)\n\n# Find government research facilities\ngov_facilities = await nci_organization_searcher(\n    organization_type=\"Government\",\n    api_key=\"your-key\"\n)\n</code></pre> <p>Valid organization types:</p> <ul> <li><code>Academic</code> - Universities and medical schools</li> <li><code>Industry</code> - Pharmaceutical and biotech companies</li> <li><code>Government</code> - NIH, FDA, VA hospitals</li> <li><code>Community</code> - Community hospitals and clinics</li> <li><code>Network</code> - Research networks and consortiums</li> <li><code>Other</code> - Other organization types</li> </ul>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#getting-organization-details","title":"Getting Organization Details","text":"<p>Retrieve complete information about a specific organization:</p> <pre><code># Get organization by ID\norg_details = await nci_organization_getter(\n    organization_id=\"NCI-2011-03337\",\n    api_key=\"your-key\"\n)\n\n# Returns:\n# - Full name and aliases\n# - Contact information\n# - Address and location\n# - Associated clinical trials\n# - Organization type and status\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#practical-organization-workflows","title":"Practical Organization Workflows","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#find-regional-cancer-centers","title":"Find Regional Cancer Centers","text":"<pre><code>async def find_cancer_centers_by_region(state: str, cities: list[str]):\n    \"\"\"Find all cancer centers in specific cities within a state\"\"\"\n\n    all_centers = []\n\n    for city in cities:\n        # ALWAYS use city + state together\n        centers = await nci_organization_searcher(\n            city=city,\n            state=state,\n            organization_type=\"Academic\",\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        all_centers.extend(centers)\n\n    # Remove duplicates\n    unique_centers = {org['id']: org for org in all_centers}\n\n    return list(unique_centers.values())\n\n# Example: Find cancer centers in major Texas cities\ntexas_centers = await find_cancer_centers_by_region(\n    state=\"TX\",\n    cities=[\"Houston\", \"Dallas\", \"San Antonio\", \"Austin\"]\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#find-trial-sponsors","title":"Find Trial Sponsors","text":"<pre><code>async def find_trial_sponsors_by_type(org_type: str, name_filter: str = None):\n    \"\"\"Find organizations sponsoring trials\"\"\"\n\n    # Search organizations\n    orgs = await nci_organization_searcher(\n        name=name_filter,\n        organization_type=org_type,\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    # For each org, get details including trial count\n    sponsors = []\n    for org in orgs[:10]:  # Limit to avoid rate limits\n        details = await nci_organization_getter(\n            organization_id=org['id'],\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        if details.get('trial_count', 0) &gt; 0:\n            sponsors.append(details)\n\n    return sorted(sponsors, key=lambda x: x.get('trial_count', 0), reverse=True)\n\n# Find pharmaceutical companies with active trials\npharma_sponsors = await find_trial_sponsors_by_type(\"Industry\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#intervention-search-and-lookup","title":"Intervention Search and Lookup","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#understanding-interventions","title":"Understanding Interventions","text":"<p>Interventions in clinical trials include:</p> <ul> <li>Drugs: Chemotherapy, targeted therapy, immunotherapy</li> <li>Devices: Medical devices, diagnostic tools</li> <li>Procedures: Surgical techniques, radiation protocols</li> <li>Biologicals: Cell therapies, vaccines, antibodies</li> <li>Behavioral: Lifestyle interventions, counseling</li> <li>Other: Dietary supplements, alternative therapies</li> </ul>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#drug-search","title":"Drug Search","text":"<p>Find specific drugs or drug classes:</p> <pre><code># CLI - Find a specific drug\nbiomcp intervention search --name pembrolizumab --type Drug --api-key YOUR_KEY\n\n# CLI - Find drug class\nbiomcp intervention search --name \"PD-1 inhibitor\" --type Drug --api-key YOUR_KEY\n</code></pre> <pre><code># Python - Search with synonyms\ndrugs = await nci_intervention_searcher(\n    name=\"pembrolizumab\",\n    intervention_type=\"Drug\",\n    synonyms=True,  # Include Keytruda, MK-3475, etc.\n    api_key=\"your-key\"\n)\n\n# Search for drug combinations\ncombos = await nci_intervention_searcher(\n    name=\"nivolumab AND ipilimumab\",\n    intervention_type=\"Drug\",\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#device-and-procedure-search","title":"Device and Procedure Search","text":"<pre><code># Find medical devices\ndevices = await nci_intervention_searcher(\n    intervention_type=\"Device\",\n    name=\"robot\",  # Surgical robots\n    api_key=\"your-key\"\n)\n\n# Find procedures\nprocedures = await nci_intervention_searcher(\n    intervention_type=\"Procedure\",\n    name=\"minimally invasive\",\n    api_key=\"your-key\"\n)\n\n# Find radiation protocols\nradiation = await nci_intervention_searcher(\n    intervention_type=\"Radiation\",\n    name=\"proton beam\",\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#getting-intervention-details","title":"Getting Intervention Details","text":"<pre><code># Get complete intervention information\nintervention = await nci_intervention_getter(\n    intervention_id=\"INT123456\",\n    api_key=\"your-key\"\n)\n\n# Returns:\n# - Official name and synonyms\n# - Intervention type and subtype\n# - Mechanism of action (for drugs)\n# - FDA approval status\n# - Associated clinical trials\n# - Manufacturer information\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#practical-intervention-workflows","title":"Practical Intervention Workflows","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#drug-development-pipeline","title":"Drug Development Pipeline","text":"<pre><code>async def analyze_drug_pipeline(drug_target: str):\n    \"\"\"Analyze drugs in development for a specific target\"\"\"\n\n    # Search for drugs targeting specific pathway\n    drugs = await nci_intervention_searcher(\n        name=drug_target,\n        intervention_type=\"Drug\",\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    pipeline = {\n        \"preclinical\": [],\n        \"phase1\": [],\n        \"phase2\": [],\n        \"phase3\": [],\n        \"approved\": []\n    }\n\n    for drug in drugs:\n        # Get detailed information\n        details = await nci_intervention_getter(\n            intervention_id=drug['id'],\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n        # Categorize by development stage\n        if details.get('fda_approved'):\n            pipeline['approved'].append(details)\n        else:\n            # Check associated trials for phase\n            trial_phases = details.get('trial_phases', [])\n            if 'PHASE3' in trial_phases:\n                pipeline['phase3'].append(details)\n            elif 'PHASE2' in trial_phases:\n                pipeline['phase2'].append(details)\n            elif 'PHASE1' in trial_phases:\n                pipeline['phase1'].append(details)\n            else:\n                pipeline['preclinical'].append(details)\n\n    return pipeline\n\n# Analyze PD-1/PD-L1 inhibitor pipeline\npd1_pipeline = await analyze_drug_pipeline(\"PD-1 inhibitor\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#compare-similar-interventions","title":"Compare Similar Interventions","text":"<pre><code>async def compare_interventions(intervention_names: list[str]):\n    \"\"\"Compare multiple interventions side by side\"\"\"\n\n    comparisons = []\n\n    for name in intervention_names:\n        # Search for intervention\n        results = await nci_intervention_searcher(\n            name=name,\n            synonyms=True,\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n        if results:\n            # Get detailed info for first match\n            details = await nci_intervention_getter(\n                intervention_id=results[0]['id'],\n                api_key=os.getenv(\"NCI_API_KEY\")\n            )\n\n            comparisons.append({\n                \"name\": details['name'],\n                \"type\": details['type'],\n                \"synonyms\": details.get('synonyms', []),\n                \"fda_approved\": details.get('fda_approved', False),\n                \"trial_count\": len(details.get('trials', [])),\n                \"mechanism\": details.get('mechanism_of_action', 'Not specified')\n            })\n\n    return comparisons\n\n# Compare checkpoint inhibitors\ncomparison = await compare_interventions([\n    \"pembrolizumab\",\n    \"nivolumab\",\n    \"atezolizumab\",\n    \"durvalumab\"\n])\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#biomarker-search","title":"Biomarker Search","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#understanding-biomarker-types","title":"Understanding Biomarker Types","text":"<p>The NCI API supports two biomarker types:</p> <ul> <li><code>reference_gene</code> - Gene-based biomarkers (e.g., EGFR, BRAF)</li> <li><code>branch</code> - Pathway/branch biomarkers</li> </ul> <p>Note: You cannot search by gene symbol directly; use the name parameter.</p>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#basic-biomarker-search","title":"Basic Biomarker Search","text":"<pre><code># Search for PD-L1 biomarkers\npdl1_biomarkers = await nci_biomarker_searcher(\n    name=\"PD-L1\",\n    api_key=\"your-key\"\n)\n\n# Search for specific biomarker type\ngene_biomarkers = await nci_biomarker_searcher(\n    biomarker_type=\"reference_gene\",\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#biomarker-analysis-workflow","title":"Biomarker Analysis Workflow","text":"<pre><code>async def analyze_trial_biomarkers(disease: str):\n    \"\"\"Find biomarkers used in trials for a disease\"\"\"\n\n    # Get all biomarkers\n    all_biomarkers = await nci_biomarker_searcher(\n        biomarker_type=\"reference_gene\",\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    # Filter by disease association\n    disease_biomarkers = []\n    for biomarker in all_biomarkers:\n        if disease.lower() in str(biomarker).lower():\n            disease_biomarkers.append(biomarker)\n\n    # Group by frequency\n    biomarker_counts = {}\n    for bio in disease_biomarkers:\n        name = bio.get('name', 'Unknown')\n        biomarker_counts[name] = biomarker_counts.get(name, 0) + 1\n\n    # Sort by frequency\n    return sorted(\n        biomarker_counts.items(),\n        key=lambda x: x[1],\n        reverse=True\n    )\n\n# Find most common biomarkers in lung cancer trials\nlung_biomarkers = await analyze_trial_biomarkers(\"lung cancer\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#combined-workflows","title":"Combined Workflows","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#regional-drug-development-analysis","title":"Regional Drug Development Analysis","text":"<pre><code>async def analyze_regional_drug_development(\n    state: str,\n    cities: list[str],\n    drug_class: str\n):\n    \"\"\"Analyze drug development in a specific region\"\"\"\n\n    # Step 1: Find organizations in the region\n    organizations = []\n    for city in cities:\n        orgs = await nci_organization_searcher(\n            city=city,\n            state=state,\n            organization_type=\"Industry\",\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        organizations.extend(orgs)\n\n    # Step 2: Find drugs of interest\n    drugs = await nci_intervention_searcher(\n        name=drug_class,\n        intervention_type=\"Drug\",\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    # Step 3: Cross-reference trials\n    regional_development = []\n    for drug in drugs[:10]:  # Limit for performance\n        drug_details = await nci_intervention_getter(\n            intervention_id=drug['id'],\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n        # Check if any trials are sponsored by regional orgs\n        for trial in drug_details.get('trials', []):\n            for org in organizations:\n                if org['id'] in str(trial):\n                    regional_development.append({\n                        'drug': drug_details['name'],\n                        'organization': org['name'],\n                        'location': f\"{org.get('city', '')}, {org.get('state', '')}\",\n                        'trial': trial\n                    })\n\n    return regional_development\n\n# Analyze immunotherapy development in California\nca_immuno = await analyze_regional_drug_development(\n    state=\"CA\",\n    cities=[\"San Francisco\", \"San Diego\", \"Los Angeles\"],\n    drug_class=\"immunotherapy\"\n)\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#organization-to-intervention-pipeline","title":"Organization to Intervention Pipeline","text":"<pre><code>async def org_to_intervention_pipeline(org_name: str):\n    \"\"\"Trace from organization to their interventions\"\"\"\n\n    # Find organization\n    orgs = await nci_organization_searcher(\n        name=org_name,\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    if not orgs:\n        return None\n\n    # Get organization details\n    org_details = await nci_organization_getter(\n        organization_id=orgs[0]['id'],\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n\n    # Get their trials\n    org_trials = org_details.get('trials', [])\n\n    # Extract unique interventions\n    interventions = set()\n    for trial_id in org_trials[:20]:  # Sample trials\n        trial = await trial_getter(\n            nct_id=trial_id,\n            source=\"nci\",\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n        if trial.get('interventions'):\n            interventions.update(trial['interventions'])\n\n    # Get details for each intervention\n    intervention_details = []\n    for intervention_name in interventions:\n        results = await nci_intervention_searcher(\n            name=intervention_name,\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        if results:\n            intervention_details.append(results[0])\n\n    return {\n        'organization': org_details,\n        'trial_count': len(org_trials),\n        'interventions': intervention_details\n    }\n\n# Analyze Genentech's intervention portfolio\ngenentech_portfolio = await org_to_intervention_pipeline(\"Genentech\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#best-practices","title":"Best Practices","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#1-always-use-city-state-together","title":"1. Always Use City + State Together","text":"<pre><code># \u2705 GOOD - Prevents API errors\nawait nci_organization_searcher(city=\"Boston\", state=\"MA\")\n\n# \u274c BAD - Will cause Elasticsearch error\nawait nci_organization_searcher(city=\"Boston\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#2-handle-rate-limits","title":"2. Handle Rate Limits","text":"<pre><code>import asyncio\n\nasync def search_with_rate_limit(searches: list):\n    \"\"\"Execute searches with rate limiting\"\"\"\n    results = []\n\n    for search in searches:\n        result = await search()\n        results.append(result)\n\n        # Add delay to respect rate limits\n        await asyncio.sleep(0.1)  # 10 requests per second\n\n    return results\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#3-use-pagination-for-large-results","title":"3. Use Pagination for Large Results","text":"<pre><code>async def get_all_organizations(org_type: str):\n    \"\"\"Get all organizations of a type using pagination\"\"\"\n\n    all_orgs = []\n    page = 1\n\n    while True:\n        orgs = await nci_organization_searcher(\n            organization_type=org_type,\n            page=page,\n            page_size=100,  # Maximum allowed\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n\n        if not orgs:\n            break\n\n        all_orgs.extend(orgs)\n        page += 1\n\n        # Note: Total count may not be available\n        if len(orgs) &lt; 100:\n            break\n\n    return all_orgs\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#4-cache-results","title":"4. Cache Results","text":"<pre><code>from functools import lru_cache\nimport hashlib\n\n@lru_cache(maxsize=100)\nasync def cached_org_search(city: str, state: str, org_type: str):\n    \"\"\"Cache organization searches to reduce API calls\"\"\"\n\n    return await nci_organization_searcher(\n        city=city,\n        state=state,\n        organization_type=org_type,\n        api_key=os.getenv(\"NCI_API_KEY\")\n    )\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#troubleshooting","title":"Troubleshooting","text":""},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#common-errors-and-solutions","title":"Common Errors and Solutions","text":"<ol> <li> <p>\"Search Too Broad\" Error</p> </li> <li> <p>Always use city + state together for location searches</p> </li> <li>Add more specific filters (name, type)</li> <li> <p>Reduce page_size parameter</p> </li> <li> <p>\"NCI API key required\"</p> </li> <li> <p>Set NCI_API_KEY environment variable</p> </li> <li>Or provide api_key parameter in function calls</li> <li> <p>Or include in prompt: \"my NCI API key is YOUR_KEY\"</p> </li> <li> <p>No Results Found</p> </li> <li> <p>Check spelling of organization/drug names</p> </li> <li>Try partial name matches</li> <li>Remove filters and broaden search</li> <li> <p>Enable synonyms for intervention searches</p> </li> <li> <p>Rate Limit Exceeded</p> </li> <li>Add delays between requests</li> <li>Reduce concurrent requests</li> <li>Cache frequently accessed data</li> <li>Consider upgrading API key tier</li> </ol>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#debugging-tips","title":"Debugging Tips","text":"<pre><code># Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Test API key\nasync def test_nci_connection():\n    try:\n        result = await nci_organization_searcher(\n            name=\"Mayo\",\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        print(f\"\u2705 API key valid, found {len(result)} results\")\n    except Exception as e:\n        print(f\"\u274c API key error: {e}\")\n\n# Check specific organization exists\nasync def verify_org_id(org_id: str):\n    try:\n        org = await nci_organization_getter(\n            organization_id=org_id,\n            api_key=os.getenv(\"NCI_API_KEY\")\n        )\n        print(f\"\u2705 Organization found: {org['name']}\")\n    except:\n        print(f\"\u274c Organization ID not found: {org_id}\")\n</code></pre>"},{"location":"how-to-guides/06-search-nci-organizations-and-interventions/#next-steps","title":"Next Steps","text":"<ul> <li>Review NCI prompts examples for AI assistant usage</li> <li>Explore trial search with biomarkers</li> <li>Learn about variant effect prediction</li> <li>Set up API authentication</li> </ul>"},{"location":"reference/architecture-diagrams/","title":"BioMCP Architecture Diagrams","text":"<p>This page describes BioMCP's architecture, data flows, and workflows.</p>"},{"location":"reference/architecture-diagrams/#system-architecture-overview","title":"System Architecture Overview","text":"<p>BioMCP consists of three main layers:</p>"},{"location":"reference/architecture-diagrams/#client-layer","title":"Client Layer","text":"<ul> <li>CLI Interface: Command-line tool for direct interaction</li> <li>Claude Desktop: AI assistant integration via MCP protocol</li> <li>Python SDK: Programmatic access for custom applications</li> <li>Custom MCP Clients: Any MCP-compatible client</li> </ul>"},{"location":"reference/architecture-diagrams/#biomcp-core","title":"BioMCP Core","text":"<ul> <li>MCP Server: Handles protocol communication</li> <li>Request Router: Directs queries to appropriate handlers</li> <li>Cache Layer: Intelligent caching for API responses</li> <li>Domain Handlers: Specialized processors for each data type</li> <li>Articles Handler (PubMed/PubTator3)</li> <li>Trials Handler (ClinicalTrials.gov, NCI)</li> <li>Variants Handler (MyVariant.info)</li> <li>Genes Handler (MyGene.info)</li> </ul>"},{"location":"reference/architecture-diagrams/#external-apis","title":"External APIs","text":"<ul> <li>PubMed/PubTator3: Biomedical literature</li> <li>ClinicalTrials.gov: US clinical trials registry</li> <li>NCI CTS API: National Cancer Institute trials</li> <li>MyVariant.info: Genetic variant annotations</li> <li>MyGene.info: Gene information</li> <li>cBioPortal: Cancer genomics data</li> <li>AlphaGenome: Variant effect predictions</li> </ul>"},{"location":"reference/architecture-diagrams/#data-flow-architecture","title":"Data Flow Architecture","text":"<ol> <li>User Request: Query submitted via CLI, Claude, or SDK</li> <li>Cache Check: System checks for cached results</li> <li>API Request: If cache miss, fetch from external API</li> <li>Result Processing: Normalize and enrich data</li> <li>Cache Storage: Store results for future use</li> <li>Response Delivery: Return formatted results to user</li> </ol>"},{"location":"reference/architecture-diagrams/#key-workflows","title":"Key Workflows","text":""},{"location":"reference/architecture-diagrams/#search-workflow","title":"Search Workflow","text":"<ol> <li>Think Tool: Plan search strategy</li> <li>Execute Search: Query relevant data sources</li> <li>Enrich Results: Add contextual information</li> <li>Combine Data: Merge results from multiple sources</li> <li>Format Output: Present in user-friendly format</li> </ol>"},{"location":"reference/architecture-diagrams/#article-search-pipeline","title":"Article Search Pipeline","text":"<ol> <li>Query Processing: Parse user input</li> <li>Entity Recognition: Normalize gene/disease names</li> <li>PubTator3 Search: Query literature database</li> <li>Preprint Integration: Include bioRxiv/medRxiv if enabled</li> <li>cBioPortal Enrichment: Add cancer genomics data for genes</li> <li>Result Merging: Combine all data sources</li> </ol>"},{"location":"reference/architecture-diagrams/#clinical-trial-matching","title":"Clinical Trial Matching","text":"<ol> <li>Patient Profile: Parse eligibility criteria</li> <li>Location Filter: Geographic constraints</li> <li>Molecular Profile: Mutation requirements</li> <li>Prior Treatments: Treatment history matching</li> <li>Scoring Algorithm: Rank trials by relevance</li> <li>Contact Extraction: Retrieve site information</li> </ol>"},{"location":"reference/architecture-diagrams/#variant-interpretation","title":"Variant Interpretation","text":"<ol> <li>Input Parsing: Process VCF/MAF files</li> <li>Batch Processing: Group variants efficiently</li> <li>Annotation Gathering:</li> <li>Clinical significance from MyVariant.info</li> <li>Population frequency data</li> <li>In silico predictions</li> <li>Literature evidence</li> <li>Clinical trial associations</li> <li>AlphaGenome Integration: Regulatory predictions (optional)</li> <li>Tier Classification: Categorize by clinical relevance</li> <li>Report Generation: Create interpretation summary</li> </ol>"},{"location":"reference/architecture-diagrams/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"reference/architecture-diagrams/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Multi-tier Cache: Memory \u2192 Disk \u2192 External</li> <li>Smart TTL: Domain-specific expiration times</li> <li>Cache Key Generation: Include all query parameters</li> <li>Invalidation Logic: Clear on errors or updates</li> </ul>"},{"location":"reference/architecture-diagrams/#error-handling","title":"Error Handling","text":"<ul> <li>Retry Logic: Exponential backoff for transient errors</li> <li>Rate Limiting: Respect API limits with queuing</li> <li>Graceful Degradation: Return partial results when possible</li> <li>Clear Error Messages: Help users troubleshoot issues</li> </ul>"},{"location":"reference/architecture-diagrams/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Check for user-provided API key</li> <li>Fall back to environment variable</li> <li>Use public access if no key available</li> <li>Handle authentication errors gracefully</li> </ol>"},{"location":"reference/architecture-diagrams/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Request Batching: Combine multiple queries</li> <li>Parallel Execution: Concurrent API calls</li> <li>Connection Pooling: Reuse HTTP connections</li> <li>Result Streaming: Return data as available</li> </ul>"},{"location":"reference/architecture-diagrams/#deployment-options","title":"Deployment Options","text":""},{"location":"reference/architecture-diagrams/#local-development","title":"Local Development","text":"<ul> <li>Single process with in-memory cache</li> <li>Direct file system access</li> <li>Simple configuration</li> </ul>"},{"location":"reference/architecture-diagrams/#docker-deployment","title":"Docker Deployment","text":"<ul> <li>Containerized application</li> <li>Volume-mounted cache</li> <li>Environment-based configuration</li> </ul>"},{"location":"reference/architecture-diagrams/#cloud-deployment","title":"Cloud Deployment","text":"<ul> <li>Load-balanced instances</li> <li>Shared Redis cache</li> <li>Auto-scaling capabilities</li> <li>Monitoring integration</li> </ul>"},{"location":"reference/architecture-diagrams/#creating-documentation-diagrams","title":"Creating Documentation Diagrams","text":"<p>For visual diagrams, we recommend:</p> <ol> <li> <p>ASCII Art: Universal compatibility</p> </li> <li> <p>Use tools like asciiflow.com</p> </li> <li> <p>Store in <code>docs/assets/</code> directory</p> </li> <li> <p>Screenshots: For complex UIs</p> </li> <li> <p>Annotate with arrows/labels</p> </li> <li> <p>Save as PNG in <code>docs/assets/</code></p> </li> <li> <p>External Tools:</p> </li> <li>draw.io for flowcharts</li> <li>Lucidchart for professional diagrams</li> <li>Export as static images</li> </ol>"},{"location":"reference/architecture-diagrams/#ascii-system-architecture","title":"ASCII System Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              USER INTERFACES                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502                   \u2502               \u2502                   \u2502\n\u2502   CLI Tool     \u2502  Claude Desktop   \u2502  Python SDK   \u2502   Custom Client   \u2502\n\u2502  (biomcp)      \u2502   (MCP Client)    \u2502   (async)     \u2502    (your app)     \u2502\n\u2502                \u2502                   \u2502               \u2502                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                 \u2502                 \u2502                   \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                            BioMCP CORE SERVER                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   Router    \u2502  \u2502 Rate Limiter \u2502  \u2502 Cache Manager\u2502  \u2502   Logger   \u2502  \u2502\n\u2502  \u2502             \u2502  \u2502              \u2502  \u2502              \u2502  \u2502            \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502         \u2502                                                               \u2502\n\u2502         \u25bc                                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502                      Domain Handlers                             \u2502   \u2502\n\u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502\n\u2502  \u2502  Articles   \u2502   Trials    \u2502  Variants   \u2502  Genes/Drugs/Disease \u2502   \u2502\n\u2502  \u2502  Handler    \u2502   Handler   \u2502  Handler    \u2502      Handler         \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502         \u2502             \u2502             \u2502                 \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502             \u2502             \u2502                 \u2502\n          \u25bc             \u25bc             \u25bc                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          EXTERNAL DATA SOURCES                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502             \u2502             \u2502             \u2502                              \u2502\n\u2502  PubMed/    \u2502 Clinical    \u2502 MyVariant   \u2502        BioThings Suite       \u2502\n\u2502  PubTator3  \u2502 Trials.gov  \u2502   .info     \u2502  (MyGene/MyDisease/MyChem)  \u2502\n\u2502             \u2502    + NCI    \u2502             \u2502                              \u2502\n\u2502             \u2502             \u2502             \u2502                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u2502\n\u2502  \u2502  cBioPortal  \u2502  \u2502  AlphaGenome \u2502  \u2502  Europe PMC  \u2502                 \u2502\n\u2502  \u2502   (Cancer)   \u2502  \u2502 (Predictions)\u2502  \u2502  (Preprints) \u2502                 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2502\n\u2502                                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>See also: Quick Architecture Reference</p>"},{"location":"reference/architecture-diagrams/#next-steps","title":"Next Steps","text":"<ul> <li>View the Quick Architecture Guide for a concise overview</li> <li>Check Developer Guides for implementation details</li> <li>See API Reference for detailed specifications</li> </ul>"},{"location":"reference/quick-architecture/","title":"Quick Architecture Overview","text":""},{"location":"reference/quick-architecture/#system-architecture-simplified","title":"System Architecture (Simplified)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Clients                               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     CLI     \u2502    Claude    \u2502  Python SDK  \u2502  Custom Client  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502             \u2502              \u2502                 \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   BioMCP Core   \u2502\n                    \u2502  (MCP Server)   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                   \u2502                   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Article Handler \u2502 \u2502  Trial Handler  \u2502 \u2502 Variant Handler \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                   \u2502                   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PubMed/PubTator\u2502 \u2502 ClinicalTrials  \u2502 \u2502  MyVariant.info \u2502\n\u2502   cBioPortal   \u2502 \u2502    NCI CTS      \u2502 \u2502   AlphaGenome   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/quick-architecture/#data-flow","title":"Data Flow","text":"<pre><code>User Query \u2192 Think \u2192 Plan \u2192 Search \u2192 Enrich \u2192 Format \u2192 Response\n     \u2502                        \u2502         \u2502                    \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          Cache Layer\n</code></pre>"},{"location":"reference/quick-architecture/#quick-command-flow","title":"Quick Command Flow","text":"<pre><code>$ biomcp article search --gene BRAF\n         \u2502\n         \u25bc\n    Parse Args \u2192 Validate \u2192 Route to Handler\n                               \u2502\n                               \u25bc\n                         Check Cache\n                          Hit? \u2502 Miss?\n                           \u2502   \u2502\n                           \u2502   \u2514\u2192 Fetch from API \u2192 Store\n                           \u2502                         \u2502\n                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                       \u2502\n                                       \u25bc\n                                Format &amp; Return\n</code></pre>"},{"location":"reference/quick-reference/","title":"BioMCP Quick Reference","text":""},{"location":"reference/quick-reference/#command-cheat-sheet","title":"Command Cheat Sheet","text":""},{"location":"reference/quick-reference/#installation","title":"Installation","text":"<pre><code># Install BioMCP\nuv tool install biomcp\n\n# Update to latest version\nuv tool install biomcp --force\n\n# Check version\nbiomcp --version\n</code></pre>"},{"location":"reference/quick-reference/#article-search-commands","title":"Article Search Commands","text":"<pre><code># Basic gene search\nbiomcp article search --gene BRAF\n\n# Multiple filters\nbiomcp article search \\\n  --gene EGFR --disease \"lung cancer\" \\\n  --chemical erlotinib\n\n# Exclude preprints\nbiomcp article search --gene TP53 --no-preprints\n\n# OR logic in keywords\nbiomcp article search --gene PTEN \\\n  --keyword \"R173|Arg173|p.R173\"\n\n# Get specific article\nbiomcp article get 38768446  # PMID\nbiomcp article get \"10.1101/2024.01.20.23288905\"  # DOI\n</code></pre>"},{"location":"reference/quick-reference/#trial-search-commands","title":"Trial Search Commands","text":"<pre><code># Basic disease search\nbiomcp trial search \\\n  --condition melanoma --status RECRUITING\n\n# Location-based search (requires coordinates)\nbiomcp trial search --condition cancer \\\n  --latitude 40.7128 --longitude -74.0060 --distance 50\n\n# Phase-specific search\nbiomcp trial search \\\n  --condition \"breast cancer\" --phase PHASE3\n\n# Using NCI source (requires API key)\nbiomcp trial search --condition melanoma --source nci \\\n  --required-mutations \"BRAF V600E\" --api-key $NCI_API_KEY\n</code></pre>"},{"location":"reference/quick-reference/#variant-commands","title":"Variant Commands","text":"<pre><code># Search by gene\nbiomcp variant search \\\n  --gene BRCA1 --significance pathogenic\n\n# Search by HGVS\nbiomcp variant search --hgvs \"NM_007294.4:c.5266dupC\"\n\n# Search by frequency\nbiomcp variant search --gene TP53 \\\n  --max-frequency 0.01 --min-cadd 20\n\n# Get variant details\nbiomcp variant get rs121913529\nbiomcp variant get \"NM_007294.4:c.5266dupC\"\n\n# Predict effects (requires AlphaGenome key)\nbiomcp variant predict chr7 140753336 A T --tissue UBERON:0002367\n</code></pre>"},{"location":"reference/quick-reference/#genedrugdisease-commands","title":"Gene/Drug/Disease Commands","text":"<pre><code># Get gene information\nbiomcp gene get TP53\nbiomcp gene get BRAF\n\n# Get drug information\nbiomcp drug get imatinib\nbiomcp drug get pembrolizumab\n\n# Get disease information\nbiomcp disease get melanoma\nbiomcp disease get \"non-small cell lung cancer\"\n</code></pre>"},{"location":"reference/quick-reference/#nci-commands-require-api-key","title":"NCI Commands (Require API Key)","text":"<pre><code># Search organizations\nbiomcp organization search --name \"MD Anderson\" \\\n  --city Houston --state TX --api-key $NCI_API_KEY\n\n# Search interventions\nbiomcp intervention search --name pembrolizumab \\\n  --intervention-type Drug --api-key $NCI_API_KEY\n\n# Search biomarkers\nbiomcp biomarker search --gene EGFR \\\n  --biomarker-type mutation --api-key $NCI_API_KEY\n</code></pre>"},{"location":"reference/quick-reference/#health-check","title":"Health Check","text":"<pre><code># Full health check\nbiomcp health check\n\n# Check APIs only\nbiomcp health check --apis-only\n\n# Verbose output\nbiomcp health check --verbose\n</code></pre>"},{"location":"reference/quick-reference/#common-parameter-reference","title":"Common Parameter Reference","text":""},{"location":"reference/quick-reference/#search-parameters","title":"Search Parameters","text":"Parameter Description Example <code>--limit</code> Max results <code>--limit 20</code> <code>--page</code> Page number <code>--page 2</code> <code>--format</code> Output format <code>--format json</code>"},{"location":"reference/quick-reference/#trial-status-values","title":"Trial Status Values","text":"Status Description <code>RECRUITING</code> Currently enrolling <code>ACTIVE_NOT_RECRUITING</code> Ongoing, not enrolling <code>NOT_YET_RECRUITING</code> Will start recruiting <code>COMPLETED</code> Trial has ended <code>SUSPENDED</code> Temporarily halted <code>TERMINATED</code> Stopped early"},{"location":"reference/quick-reference/#trial-phase-values","title":"Trial Phase Values","text":"Phase Description <code>EARLY_PHASE1</code> Early Phase 1 <code>PHASE1</code> Phase 1 <code>PHASE2</code> Phase 2 <code>PHASE3</code> Phase 3 <code>PHASE4</code> Phase 4"},{"location":"reference/quick-reference/#clinical-significance","title":"Clinical Significance","text":"Value Description <code>pathogenic</code> Causes disease <code>likely_pathogenic</code> Probably causes disease <code>uncertain_significance</code> Unknown impact <code>likely_benign</code> Probably harmless <code>benign</code> Does not cause disease"},{"location":"reference/quick-reference/#gene-symbol-quick-lookup","title":"Gene Symbol Quick Lookup","text":""},{"location":"reference/quick-reference/#common-gene-aliases","title":"Common Gene Aliases","text":"Common Name Official Symbol HER2 ERBB2 HER3 ERBB3 EGFR EGFR ALK ALK c-MET MET PD-1 PDCD1 PD-L1 CD274 CTLA-4 CTLA4"},{"location":"reference/quick-reference/#location-coordinates","title":"Location Coordinates","text":""},{"location":"reference/quick-reference/#major-us-cities","title":"Major US Cities","text":"City Latitude Longitude New York 40.7128 -74.0060 Los Angeles 34.0522 -118.2437 Chicago 41.8781 -87.6298 Houston 29.7604 -95.3698 Philadelphia 39.9526 -75.1652 Boston 42.3601 -71.0589 Atlanta 33.7490 -84.3880 Miami 25.7617 -80.1918 Seattle 47.6062 -122.3321 San Francisco 37.7749 -122.4194"},{"location":"reference/quick-reference/#environment-variables","title":"Environment Variables","text":"<pre><code># API Keys\nexport NCI_API_KEY=\"your-nci-key\"\nexport ALPHAGENOME_API_KEY=\"your-alphagenome-key\"\nexport CBIO_TOKEN=\"your-cbioportal-token\"\n\n# Configuration\nexport BIOMCP_LOG_LEVEL=\"DEBUG\"\nexport BIOMCP_CACHE_DIR=\"/path/to/cache\"\nexport BIOMCP_TIMEOUT=300\nexport BIOMCP_MAX_CONCURRENT=5\n</code></pre>"},{"location":"reference/quick-reference/#output-format-examples","title":"Output Format Examples","text":""},{"location":"reference/quick-reference/#json-output","title":"JSON Output","text":"<pre><code>biomcp article search --gene BRAF --format json | jq '.articles[0]'\n</code></pre>"},{"location":"reference/quick-reference/#extract-specific-fields","title":"Extract Specific Fields","text":"<pre><code># Get PMIDs only\nbiomcp article search --gene TP53 --format json | \\\n  jq -r '.articles[].pmid'\n\n# Get trial NCT IDs\nbiomcp trial search --condition melanoma --format json | \\\n  jq -r '.trials[].nct_id'\n</code></pre>"},{"location":"reference/quick-reference/#save-to-file","title":"Save to File","text":"<pre><code>biomcp article search --gene BRCA1 --format json &gt; results.json\n</code></pre>"},{"location":"reference/quick-reference/#mcp-tool-names","title":"MCP Tool Names","text":""},{"location":"reference/quick-reference/#core-tools","title":"Core Tools","text":"<ul> <li><code>search</code> - Unified search</li> <li><code>fetch</code> - Get details</li> <li><code>think</code> - Sequential thinking</li> </ul>"},{"location":"reference/quick-reference/#article-tools","title":"Article Tools","text":"<ul> <li><code>article_searcher</code></li> <li><code>article_getter</code></li> </ul>"},{"location":"reference/quick-reference/#trial-tools","title":"Trial Tools","text":"<ul> <li><code>trial_searcher</code></li> <li><code>trial_getter</code></li> <li><code>trial_protocol_getter</code></li> <li><code>trial_references_getter</code></li> <li><code>trial_outcomes_getter</code></li> <li><code>trial_locations_getter</code></li> </ul>"},{"location":"reference/quick-reference/#variant-tools","title":"Variant Tools","text":"<ul> <li><code>variant_searcher</code></li> <li><code>variant_getter</code></li> <li><code>alphagenome_predictor</code></li> </ul>"},{"location":"reference/quick-reference/#biothings-tools","title":"BioThings Tools","text":"<ul> <li><code>gene_getter</code></li> <li><code>disease_getter</code></li> <li><code>drug_getter</code></li> </ul>"},{"location":"reference/quick-reference/#nci-tools","title":"NCI Tools","text":"<ul> <li><code>nci_organization_searcher</code></li> <li><code>nci_organization_getter</code></li> <li><code>nci_intervention_searcher</code></li> <li><code>nci_intervention_getter</code></li> <li><code>nci_biomarker_searcher</code></li> <li><code>nci_disease_searcher</code></li> </ul>"},{"location":"reference/quick-reference/#query-language-syntax","title":"Query Language Syntax","text":""},{"location":"reference/quick-reference/#unified-search-examples","title":"Unified Search Examples","text":"<pre><code>gene:BRAF AND disease:melanoma\ngene:EGFR AND (mutation OR variant)\ndrugs.tradename:gleevec\ndiseases.name:\"lung cancer\"\nchemicals.mesh:D000069439\n</code></pre>"},{"location":"reference/quick-reference/#field-prefixes","title":"Field Prefixes","text":"<ul> <li><code>gene:</code> - Gene symbol</li> <li><code>disease:</code> - Disease/condition</li> <li><code>chemical:</code> - Drug/chemical</li> <li><code>variant:</code> - Genetic variant</li> <li><code>pmid:</code> - PubMed ID</li> <li><code>doi:</code> - Digital Object ID</li> </ul>"},{"location":"reference/quick-reference/#common-workflows","title":"Common Workflows","text":""},{"location":"reference/quick-reference/#find-articles-about-a-mutation","title":"Find Articles About a Mutation","text":"<pre><code># Step 1: Search articles\nbiomcp article search --gene BRAF --keyword \"V600E|p.V600E\"\n\n# Step 2: Get full article\nbiomcp article get [PMID]\n</code></pre>"},{"location":"reference/quick-reference/#check-trial-eligibility","title":"Check Trial Eligibility","text":"<pre><code># Step 1: Search trials\nbiomcp trial search --condition melanoma --status RECRUITING\n\n# Step 2: Get trial details\nbiomcp trial get NCT03006926\n</code></pre>"},{"location":"reference/quick-reference/#variant-analysis","title":"Variant Analysis","text":"<pre><code># Step 1: Search variant\nbiomcp variant search --gene BRCA1 --significance pathogenic\n\n# Step 2: Get variant details\nbiomcp variant get rs80357906\n\n# Step 3: Search related articles\nbiomcp article search --gene BRCA1 --variant rs80357906\n</code></pre>"},{"location":"reference/quick-reference/#error-code-quick-reference","title":"Error Code Quick Reference","text":""},{"location":"reference/quick-reference/#common-http-codes","title":"Common HTTP Codes","text":"<ul> <li><code>400</code> - Bad request (check parameters)</li> <li><code>401</code> - Unauthorized (check API key)</li> <li><code>404</code> - Not found (verify ID)</li> <li><code>429</code> - Rate limited (wait and retry)</li> <li><code>500</code> - Server error (retry later)</li> </ul>"},{"location":"reference/quick-reference/#biomcp-error-patterns","title":"BioMCP Error Patterns","text":"<ul> <li><code>1xxx</code> - Article errors</li> <li><code>2xxx</code> - Trial errors</li> <li><code>3xxx</code> - Variant errors</li> <li><code>4xxx</code> - Gene/drug/disease errors</li> <li><code>5xxx</code> - Authentication errors</li> <li><code>6xxx</code> - Rate limit errors</li> <li><code>7xxx</code> - Validation errors</li> </ul>"},{"location":"reference/quick-reference/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"reference/quick-reference/#1-use-official-gene-symbols","title":"1. Use Official Gene Symbols","text":"<pre><code># Wrong\nbiomcp article search --gene HER2  # \u274c\n\n# Right\nbiomcp article search --gene ERBB2  # \u2705\n</code></pre>"},{"location":"reference/quick-reference/#2-combine-multiple-searches","title":"2. Combine Multiple Searches","text":"<pre><code># Search multiple databases in parallel\n(\n  biomcp article search --gene BRAF --format json &gt; articles.json &amp;\n  biomcp trial search --condition melanoma --format json &gt; trials.json &amp;\n  biomcp variant search --gene BRAF --format json &gt; variants.json &amp;\n  wait\n)\n</code></pre>"},{"location":"reference/quick-reference/#3-process-large-results","title":"3. Process Large Results","text":"<pre><code># Paginate through results\nfor page in {1..10}; do\n  biomcp article search --gene TP53 --page $page --limit 100\ndone\n</code></pre>"},{"location":"reference/quick-reference/#4-debug-api-issues","title":"4. Debug API Issues","text":"<pre><code># Enable debug logging\nexport BIOMCP_LOG_LEVEL=DEBUG\nbiomcp article search --gene BRAF --verbose\n</code></pre>"},{"location":"reference/quick-reference/#getting-help","title":"Getting Help","text":"<pre><code># General help\nbiomcp --help\n\n# Command help\nbiomcp article search --help\n\n# Check documentation\nopen https://biomcp.org/\n\n# Report issues\nopen https://github.com/genomoncology/biomcp/issues\n</code></pre>"},{"location":"reference/visual-architecture/","title":"Visual Architecture Guide","text":""},{"location":"reference/visual-architecture/#system-architecture","title":"System Architecture","text":"<p>BioMCP follows a clean architecture pattern with three main layers:</p>"},{"location":"reference/visual-architecture/#1-user-interface-layer","title":"1. User Interface Layer","text":"<ul> <li>biomcp CLI: Command-line interface for direct usage</li> <li>Claude Desktop: AI assistant integration via MCP</li> <li>Python SDK: Programmatic access for custom applications</li> </ul>"},{"location":"reference/visual-architecture/#2-biomcp-core-layer","title":"2. BioMCP Core Layer","text":"<ul> <li>MCP Server: Handles Model Context Protocol communication</li> <li>Cache System: Smart caching for API responses</li> <li>Router: Unified query routing across data sources</li> </ul>"},{"location":"reference/visual-architecture/#3-data-source-layer","title":"3. Data Source Layer","text":"<ul> <li>PubMed/PubTator3: Biomedical literature and annotations</li> <li>ClinicalTrials.gov: Clinical trial registry</li> <li>MyVariant.info: Genetic variant database</li> <li>cBioPortal: Cancer genomics data</li> <li>NCI CTS API: National Cancer Institute trial data</li> <li>BioThings APIs: Gene, drug, and disease information</li> </ul>"},{"location":"reference/visual-architecture/#data-flow","title":"Data Flow","text":"<ol> <li> <p>Request Processing:</p> </li> <li> <p>User sends query via CLI, Claude, or SDK</p> </li> <li>BioMCP server receives and validates request</li> <li> <p>Router determines appropriate data source(s)</p> </li> <li> <p>Caching Strategy:</p> </li> <li> <p>Check cache for existing results</p> </li> <li>If cache miss, fetch from external API</li> <li>Store results with appropriate TTL</li> <li> <p>Return formatted results to user</p> </li> <li> <p>Response Formatting:</p> </li> <li>Raw API data is normalized</li> <li>Domain-specific enrichment applied</li> <li>Results formatted for consumption</li> </ol>"},{"location":"reference/visual-architecture/#architecture-references","title":"Architecture References","text":"<ul> <li>Detailed Architecture Diagrams</li> <li>Quick Architecture Reference</li> </ul>"},{"location":"reference/visual-architecture/#key-architecture-patterns","title":"Key Architecture Patterns","text":""},{"location":"reference/visual-architecture/#domain-separation","title":"Domain Separation","text":"<p>Each data source has its own module with dedicated:</p> <ul> <li>Search functions</li> <li>Result parsers</li> <li>Error handlers</li> <li>Cache strategies</li> </ul>"},{"location":"reference/visual-architecture/#unified-interface","title":"Unified Interface","text":"<p>All domains expose consistent methods:</p> <ul> <li><code>search()</code>: Query for multiple results</li> <li><code>fetch()</code>: Get detailed record by ID</li> <li>Common parameter names across domains</li> </ul>"},{"location":"reference/visual-architecture/#smart-caching","title":"Smart Caching","text":"<ul> <li>API responses cached 15-30 minutes</li> <li>Cache keys include query parameters</li> <li>Automatic cache invalidation on errors</li> <li>Per-domain cache configuration</li> </ul>"},{"location":"reference/visual-architecture/#error-resilience","title":"Error Resilience","text":"<ul> <li>Graceful degradation when APIs unavailable</li> <li>Specific error messages for troubleshooting</li> <li>Automatic retries with exponential backoff</li> <li>Fallback to cached data when possible</li> </ul>"},{"location":"tutorials/biothings-prompts/","title":"BioThings Integration Example Prompts","text":"<p>This guide provides example prompts for AI assistants to effectively use the BioThings suite integration in BioMCP.</p>"},{"location":"tutorials/biothings-prompts/#overview-of-biothings-suite","title":"Overview of BioThings Suite","text":"<p>BioMCP integrates with the complete BioThings suite of APIs:</p> <ul> <li>MyGene.info - Gene information and annotations</li> <li>MyDisease.info - Disease ontology and synonyms</li> <li>MyVariant.info - Genetic variant annotations (pre-existing integration, enhanced with BioThings client)</li> <li>MyChem.info - Drug/chemical information and annotations</li> </ul> <p>All four services share common infrastructure through the BioThings client module, providing consistent error handling, rate limiting, and response parsing.</p>"},{"location":"tutorials/biothings-prompts/#gene-information-retrieval","title":"Gene Information Retrieval","text":""},{"location":"tutorials/biothings-prompts/#basic-gene-lookup","title":"Basic Gene Lookup","text":"<pre><code>\"What is the TP53 gene?\"\n\"Tell me about BRAF\"\n\"Get information on the EGFR gene\"\n\"What does the BRCA1 gene do?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"TP53\")</code> \u2192 Returns official name, summary, aliases</p>"},{"location":"tutorials/biothings-prompts/#gene-by-id","title":"Gene by ID","text":"<pre><code>\"Look up gene with Entrez ID 7157\"\n\"What is gene 673?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"7157\")</code> \u2192 Returns TP53 information</p>"},{"location":"tutorials/biothings-prompts/#gene-context-for-research","title":"Gene Context for Research","text":"<pre><code>\"I need to understand the KRAS gene before searching for mutations\"\n\"What type of protein does BRAF encode?\"\n\"Give me the official name and aliases for MYC\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#disease-information-retrieval","title":"Disease Information Retrieval","text":""},{"location":"tutorials/biothings-prompts/#basic-disease-lookup","title":"Basic Disease Lookup","text":"<pre><code>\"What is GIST?\"\n\"Tell me about melanoma\"\n\"Define non-small cell lung cancer\"\n\"What is Erdheim-Chester disease?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"GIST\")</code> \u2192 Returns definition, synonyms, ontology IDs</p>"},{"location":"tutorials/biothings-prompts/#disease-by-ontology-id","title":"Disease by Ontology ID","text":"<pre><code>\"Look up disease MONDO:0018076\"\n\"What is DOID:1909?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"MONDO:0018076\")</code> \u2192 Returns disease information</p>"},{"location":"tutorials/biothings-prompts/#disease-synonyms-for-research","title":"Disease Synonyms for Research","text":"<pre><code>\"What are all the names for gastrointestinal stromal tumor?\"\n\"Find synonyms for NSCLC\"\n\"What other terms are used for melanoma?\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#variant-information-retrieval-myvariantinfo","title":"Variant Information Retrieval (MyVariant.info)","text":"<p>MyVariant.info is part of the BioThings suite and provides comprehensive variant annotations. BioMCP has extensive integration with specialized features:</p>"},{"location":"tutorials/biothings-prompts/#basic-variant-lookup","title":"Basic Variant Lookup","text":"<pre><code>\"Get information about rs7412\"\n\"What is the BRAF V600E variant?\"\n\"Look up variant chr7:140453136-140453136\"\n</code></pre> <p>Expected tool usage: <code>variant_getter(\"rs7412\")</code> \u2192 Returns variant annotations with external database links</p>"},{"location":"tutorials/biothings-prompts/#variant-search-with-filters","title":"Variant Search with Filters","text":"<pre><code>\"Find pathogenic variants in TP53\"\n\"Search for BRCA1 variants with high impact\"\n\"Get all loss-of-function variants in KRAS\"\n</code></pre> <p>Expected tool usage: <code>variant_searcher(gene=\"TP53\", significance=\"pathogenic\")</code> \u2192 Returns filtered variant list</p>"},{"location":"tutorials/biothings-prompts/#variant-with-cancer-context","title":"Variant with Cancer Context","text":"<pre><code>\"What cancer types have BRAF V600E mutations?\"\n\"Get TCGA data for TP53 R273H\"\n</code></pre> <p>Expected tool usage: Variant tools automatically integrate cBioPortal, TCGA, and 1000 Genomes data when available</p>"},{"location":"tutorials/biothings-prompts/#drug-information-retrieval-mycheminfo","title":"Drug Information Retrieval (MyChem.info)","text":"<p>MyChem.info is part of the BioThings suite and provides comprehensive drug/chemical information.</p>"},{"location":"tutorials/biothings-prompts/#basic-drug-lookup","title":"Basic Drug Lookup","text":"<pre><code>\"What is imatinib?\"\n\"Tell me about aspirin\"\n\"Get information on pembrolizumab\"\n\"What does metformin do?\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"imatinib\")</code> \u2192 Returns drug information with database links</p>"},{"location":"tutorials/biothings-prompts/#drug-by-id","title":"Drug by ID","text":"<pre><code>\"Look up DrugBank ID DB00619\"\n\"What is CHEMBL941?\"\n\"Get details for PubChem CID 5291\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"DB00619\")</code> \u2192 Returns drug details by identifier</p>"},{"location":"tutorials/biothings-prompts/#drug-properties-and-mechanism","title":"Drug Properties and Mechanism","text":"<pre><code>\"What is the mechanism of action of imatinib?\"\n\"Find the chemical formula for aspirin\"\n\"What are the trade names for adalimumab?\"\n\"How does pembrolizumab work?\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"pembrolizumab\")</code> \u2192 Returns mechanism, indications, and properties</p>"},{"location":"tutorials/biothings-prompts/#integrated-research-workflows","title":"Integrated Research Workflows","text":""},{"location":"tutorials/biothings-prompts/#variant-analysis-with-gene-context","title":"Variant Analysis with Gene Context","text":"<pre><code>\"Analyze the BRAF V600E mutation - first tell me about the gene, then find pathogenic variants\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Analyzing BRAF V600E mutation\", thoughtNumber=1)</code></li> <li><code>gene_getter(\"BRAF\")</code> \u2192 Gene context</li> <li><code>variant_searcher(gene=\"BRAF\", hgvsp=\"V600E\", significance=\"pathogenic\")</code> \u2192 Variant details</li> </ol>"},{"location":"tutorials/biothings-prompts/#clinical-trial-search-with-disease-expansion","title":"Clinical Trial Search with Disease Expansion","text":"<pre><code>\"Find clinical trials for GIST patients\"\n\"Search for trials treating gastrointestinal stromal tumors\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>trial_searcher(conditions=[\"GIST\"], expand_synonyms=True)</code></li> <li>Automatically searches for: GIST OR \"gastrointestinal stromal tumor\" OR \"GI stromal tumor\"</li> </ul>"},{"location":"tutorials/biothings-prompts/#comprehensive-gene-disease-research","title":"Comprehensive Gene-Disease Research","text":"<pre><code>\"I'm researching EGFR mutations in lung cancer. Start with the gene, then the disease, then find relevant trials\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Researching EGFR in lung cancer\", thoughtNumber=1)</code></li> <li><code>gene_getter(\"EGFR\")</code> \u2192 Gene information</li> <li><code>disease_getter(\"lung cancer\")</code> \u2192 Disease context and synonyms</li> <li><code>trial_searcher(conditions=[\"lung cancer\"], interventions=[\"EGFR inhibitor\"])</code> \u2192 Trials with synonym expansion</li> </ol>"},{"location":"tutorials/biothings-prompts/#multi-gene-analysis","title":"Multi-Gene Analysis","text":"<pre><code>\"Compare TP53, BRAF, and KRAS genes\"\n\"Tell me about the RAS family genes: KRAS, NRAS, HRAS\"\n</code></pre> <p>Expected tool usage: Multiple <code>gene_getter()</code> calls for each gene</p>"},{"location":"tutorials/biothings-prompts/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"tutorials/biothings-prompts/#gene-alias-resolution","title":"Gene Alias Resolution","text":"<pre><code>\"What is the official name for the p53 gene?\"\n\"Is TRP53 the same as TP53?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"p53\")</code> \u2192 Will resolve to TP53</p>"},{"location":"tutorials/biothings-prompts/#disease-name-disambiguation","title":"Disease Name Disambiguation","text":"<pre><code>\"Is GIST the same as gastrointestinal stromal tumor?\"\n\"What's the MONDO ID for melanoma?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"GIST\")</code> \u2192 Shows all synonyms and IDs</p>"},{"location":"tutorials/biothings-prompts/#trial-search-without-synonym-expansion","title":"Trial Search Without Synonym Expansion","text":"<pre><code>\"Find trials specifically mentioning 'GIST' not other names\"\n</code></pre> <p>Expected tool usage: <code>trial_searcher(conditions=[\"GIST\"], expand_synonyms=False)</code></p>"},{"location":"tutorials/biothings-prompts/#integrated-literature-and-gene-search","title":"Integrated Literature and Gene Search","text":"<pre><code>\"Find recent papers about TP53 mutations - first tell me about the gene\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>gene_getter(\"TP53\")</code> \u2192 Gene context</li> <li><code>article_searcher(genes=[\"TP53\"], keywords=[\"mutation\"])</code> \u2192 Literature</li> </ol>"},{"location":"tutorials/biothings-prompts/#drug-target-research","title":"Drug-Target Research","text":"<pre><code>\"I'm researching imatinib for CML treatment. Get drug info, then find trials\"\n\"What targets does pembrolizumab hit? Then find related articles\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Researching imatinib for CML\", thoughtNumber=1)</code></li> <li><code>drug_getter(\"imatinib\")</code> \u2192 Drug information and mechanism</li> <li><code>trial_searcher(interventions=[\"imatinib\"], conditions=[\"chronic myeloid leukemia\"])</code></li> </ol>"},{"location":"tutorials/biothings-prompts/#tips-for-ai-assistants","title":"Tips for AI Assistants","text":"<ol> <li>Always use think() first for complex biomedical queries</li> <li>Gene context helps interpretation: Get gene info before analyzing variants</li> <li>Disease synonyms improve search: Use expand_synonyms=True (default) for comprehensive results</li> <li>Drug mechanisms matter: Get drug info before searching trials to understand targets</li> <li>Real-time data: All BioThings data is fetched live, ensuring current information</li> <li>Combine tools: Gene + disease + variant + drug tools work together for comprehensive analysis</li> </ol>"},{"location":"tutorials/biothings-prompts/#common-patterns","title":"Common Patterns","text":""},{"location":"tutorials/biothings-prompts/#pattern-1-gene-variant-clinical-impact","title":"Pattern 1: Gene \u2192 Variant \u2192 Clinical Impact","text":"<pre><code>gene_getter(\"BRAF\") \u2192\nvariant_searcher(gene=\"BRAF\", significance=\"pathogenic\") \u2192\narticle_searcher(genes=[\"BRAF\"], diseases=[\"melanoma\"])\n</code></pre>"},{"location":"tutorials/biothings-prompts/#pattern-2-disease-trials-locations","title":"Pattern 2: Disease \u2192 Trials \u2192 Locations","text":"<pre><code>disease_getter(\"NSCLC\") \u2192\ntrial_searcher(conditions=[\"NSCLC\"], expand_synonyms=True) \u2192\ntrial_locations_getter(nct_id=\"NCT...\")\n</code></pre>"},{"location":"tutorials/biothings-prompts/#pattern-3-multi-gene-pathway-analysis","title":"Pattern 3: Multi-Gene Pathway Analysis","text":"<pre><code>gene_getter(\"EGFR\") \u2192\ngene_getter(\"KRAS\") \u2192\ngene_getter(\"BRAF\") \u2192\narticle_searcher(genes=[\"EGFR\", \"KRAS\", \"BRAF\"], keywords=[\"pathway\"])\n</code></pre>"},{"location":"tutorials/biothings-prompts/#unified-search-with-biothings-domains","title":"Unified Search with BioThings Domains","text":"<p>BioMCP's unified search now supports gene, drug, and disease domains alongside articles, trials, and variants:</p>"},{"location":"tutorials/biothings-prompts/#domain-specific-search","title":"Domain-Specific Search","text":"<pre><code>\"Search for BRAF in the gene domain\"\n\"Find imatinib in drugs\"\n\"Look up melanoma in diseases\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>search(domain=\"gene\", keywords=[\"BRAF\"])</code></li> <li><code>search(domain=\"drug\", keywords=[\"imatinib\"])</code></li> <li><code>search(domain=\"disease\", keywords=[\"melanoma\"])</code></li> </ul>"},{"location":"tutorials/biothings-prompts/#unified-query-language-with-biothings","title":"Unified Query Language with BioThings","text":"<pre><code>\"genes.symbol:BRAF AND genes.type:protein-coding\"\n\"drugs.tradename:gleevec\"\n\"diseases.name:melanoma OR diseases.synonym:malignant melanoma\"\n</code></pre> <p>Expected tool usage: Query parser automatically routes to appropriate domains</p>"},{"location":"tutorials/biothings-prompts/#cross-domain-gene-searches","title":"Cross-Domain Gene Searches","text":"<pre><code>\"gene:BRAF\"  # Searches articles, variants, genes, and trials\n\"Search everything about TP53\"\n</code></pre> <p>Expected behavior:</p> <ul> <li>Gene queries trigger searches across multiple domains</li> <li>Results include gene info, variants, articles, and related trials</li> </ul>"},{"location":"tutorials/biothings-prompts/#cross-domain-disease-searches","title":"Cross-Domain Disease Searches","text":"<pre><code>\"disease:melanoma\"  # Searches articles, trials, and diseases\n\"Find all information about NSCLC\"\n</code></pre> <p>Expected behavior:</p> <ul> <li>Disease queries search articles, trials, and disease databases</li> <li>Disease synonyms are automatically expanded in trial searches</li> </ul>"},{"location":"tutorials/biothings-prompts/#combined-domain-queries","title":"Combined Domain Queries","text":"<pre><code>\"gene:BRAF AND disease:melanoma\"\n\"drugs.indication:leukemia AND trials.phase:3\"\n\"genes.symbol:EGFR AND articles.year:&gt;2023\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#unified-fetch","title":"Unified Fetch","text":"<pre><code>\"Fetch BRAF from gene domain\"\n\"Get imatinib details from drugs\"\n\"Retrieve melanoma information from diseases\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>fetch(id=\"BRAF\", domain=\"gene\")</code></li> <li><code>fetch(id=\"imatinib\", domain=\"drug\")</code></li> <li><code>fetch(id=\"melanoma\", domain=\"disease\")</code></li> </ul>"},{"location":"tutorials/biothings-prompts/#error-handling","title":"Error Handling","text":"<p>If a gene/disease is not found:</p> <ul> <li>Check for typos or alternative names</li> <li>Try searching with partial names</li> <li>Use official symbols for genes (e.g., \"TP53\" not \"p53 gene\")</li> <li>For diseases, try both common and medical names</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/","title":"Using Claude Code with BioMCP for AlphaGenome Variant Analysis","text":"<p>This tutorial demonstrates how to use Claude Code with BioMCP to analyze genetic variants using Google DeepMind's AlphaGenome. We'll explore both the MCP server integration and CLI approaches, showing how Claude Code can seamlessly work with both interfaces.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Code: Latest version with MCP support</li> <li>Python 3.11+: Required for BioMCP and AlphaGenome</li> <li>uv: Modern Python package manager (installation guide)</li> <li>AlphaGenome API Key: Get free access at Google DeepMind AlphaGenome</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#setup-overview","title":"Setup Overview","text":"<p>BioMCP offers two interfaces that work perfectly with Claude Code:</p> <ol> <li>MCP Server: Integrated directly into Claude Code for seamless workflows</li> <li>CLI: Command-line interface for direct terminal access</li> </ol> <p>Both produce identical results, giving you flexibility in how you work.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-1-mcp-server-setup","title":"Part 1: MCP Server Setup","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-1-install-biomcp-cli","title":"Step 1: Install BioMCP CLI","text":"<pre><code># Install BioMCP CLI globally (note: biomcp-python, not biomcp!)\nuv tool install -q biomcp-python\n\n# Verify installation\nbiomcp --version\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-2-configure-mcp-server","title":"Step 2: Configure MCP Server","text":"<p>Add BioMCP to your Claude Code MCP configuration:</p> <pre><code># Basic setup (requires ALPHAGENOME_API_KEY environment variable)\nclaude mcp add biomcp -- uv run --with biomcp-python biomcp run\n\n# Or with API key in configuration\nclaude mcp add biomcp -e ALPHAGENOME_API_KEY=your-api-key-here -- uv run --with biomcp-python biomcp run\n</code></pre> <p>Verify the setup:</p> <pre><code>claude mcp list\nclaude mcp get biomcp\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-3-set-environment-variable","title":"Step 3: Set Environment Variable","text":"<pre><code># Add to your shell profile (~/.zshrc or ~/.bashrc)\nexport ALPHAGENOME_API_KEY='your-api-key-here'\n\n# Or set per-session\nexport ALPHAGENOME_API_KEY='your-api-key-here'\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-4-install-alphagenome","title":"Step 4: Install AlphaGenome","text":"<pre><code># Clone and install AlphaGenome\ngit clone https://github.com/google-deepmind/alphagenome.git\ncd alphagenome &amp;&amp; uv pip install .\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-2-testing-with-claude-code","title":"Part 2: Testing with Claude Code","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#example-dlg1-exon-skipping-variant","title":"Example: DLG1 Exon Skipping Variant","text":"<p>Let's analyze the variant <code>chr3:197081044:TACTC&gt;T</code> from the AlphaGenome paper, which demonstrates exon skipping in the DLG1 gene.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#using-mcp-server-recommended","title":"Using MCP Server (Recommended)","text":"<pre><code># Claude Code automatically uses MCP when available\nmcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr3\",\n    position=197081044,\n    reference=\"TACTC\",\n    alternate=\"T\"\n)\n</code></pre> <p>Result:</p> <pre><code>## AlphaGenome Variant Effect Predictions\n\n**Variant**: chr3:197081044 TACTC&gt;T\n**Analysis window**: 131,072 bp\n\n### Gene Expression\n\n- **MELTF**: +2.57 log\u2082 fold change (\u2191 increases expression)\n\n### Chromatin Accessibility\n\n- **EFO:0005719 DNase-seq**: +17.27 log\u2082 change (\u2191 increases accessibility)\n\n### Splicing\n\n- Potential splicing alterations detected\n\n### Summary\n\n- Analyzed 11796 regulatory tracks\n- 6045 tracks show substantial changes (|log\u2082| &gt; 0.5)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#using-cli-interface","title":"Using CLI Interface","text":"<pre><code># Same analysis via CLI\nexport ALPHAGENOME_API_KEY='your-api-key-here'\nuv run biomcp variant predict chr3 197081044 TACTC T\n</code></pre> <p>Result: Identical output to MCP server.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-3-why-both-interfaces-matter","title":"Part 3: Why Both Interfaces Matter","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#mcp-server-advantages","title":"MCP Server Advantages \ud83d\udd0c","text":"<ul> <li>Persistent State: No need to re-export environment variables</li> <li>Workflow Integration: Seamless chaining with other biomedical tools</li> <li>Structured Data: Direct programmatic access to results</li> <li>Auto-Documentation: Built-in parameter validation</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#cli-advantages","title":"CLI Advantages \ud83d\udcbb","text":"<ul> <li>Immediate Access: No server setup required</li> <li>Debugging: Direct command-line testing</li> <li>Scripting: Easy integration into bash scripts</li> <li>Standalone Use: Works without Claude Code</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#claude-code-perspective","title":"Claude Code Perspective","text":"<p>As Claude Code, both interfaces work equally well. The MCP approach provides slight benefits:</p> <ul> <li>Results persist across conversation turns</li> <li>Built-in error handling and validation</li> <li>Automatic integration with thinking and search workflows</li> <li>No need to manage environment variables per session</li> </ul> <p>Trade-off: MCP requires initial setup, while CLI is immediately available.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-4-advanced-usage-examples","title":"Part 4: Advanced Usage Examples","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#multi-variant-analysis","title":"Multi-Variant Analysis","text":"<pre><code># Analyze multiple variants from AlphaGenome paper\nvariants = [\n    (\"chr3\", 197081044, \"TACTC\", \"T\"),      # DLG1 exon skipping\n    (\"chr21\", 46126238, \"G\", \"C\"),          # COL6A2 splice junction\n    (\"chr16\", 173694, \"A\", \"G\")             # HBA2 polyadenylation\n]\n\nfor chr, pos, ref, alt in variants:\n    result = mcp__biomcp__alphagenome_predictor(\n        chromosome=chr,\n        position=pos,\n        reference=ref,\n        alternate=alt\n    )\n    print(f\"Most affected gene: {result}\")\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#tissue-specific-analysis","title":"Tissue-Specific Analysis","text":"<pre><code># Analyze with tissue context\nmcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    tissue_types=[\"UBERON:0000310\"]  # breast tissue\n)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#combined-biomcp-workflow","title":"Combined BioMCP Workflow","text":"<pre><code># 1. First, search for known annotations\nvariant_data = mcp__biomcp__variant_searcher(gene=\"BRAF\")\n\n# 2. Then predict regulatory effects\nregulatory_effects = mcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\"\n)\n\n# 3. Search literature for context\nliterature = mcp__biomcp__article_searcher(\n    genes=[\"BRAF\"],\n    variants=[\"V600E\"]\n)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-5-validation-and-quality-assurance","title":"Part 5: Validation and Quality Assurance","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#how-we-validated-the-integration","title":"How We Validated the Integration","text":"<ol> <li>Raw API Testing: Directly tested Google's AlphaGenome API</li> <li>Source Code Analysis: Verified BioMCP uses correct API methods (<code>score_variant</code> + <code>get_recommended_scorers</code>)</li> <li>Cross-Validation: Confirmed identical results across all three approaches:</li> <li>Raw Python API: MELTF +2.57 log\u2082</li> <li>BioMCP CLI: MELTF +2.57 log\u2082</li> <li>BioMCP MCP: MELTF +2.57 log\u2082</li> </ol>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#key-scientific-finding","title":"Key Scientific Finding","text":"<p>The variant <code>chr3:197081044:TACTC&gt;T</code> most strongly affects MELTF (+2.57 log\u2082 fold change), not DLG1 as initially expected. This demonstrates that AlphaGenome considers the full regulatory landscape, not just the nearest gene.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-6-best-practices","title":"Part 6: Best Practices","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#for-mcp-usage","title":"For MCP Usage","text":"<ul> <li>Use structured thinking with <code>mcp__biomcp__think</code> for complex analyses</li> <li>Leverage <code>call_benefit</code> parameter to improve result quality</li> <li>Chain multiple tools for comprehensive variant characterization</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#for-cli-usage","title":"For CLI Usage","text":"<ul> <li>Set <code>ALPHAGENOME_API_KEY</code> in your shell profile</li> <li>Use <code>--help</code> to explore all available parameters</li> <li>Combine with other CLI tools via pipes and scripts</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#general-tips","title":"General Tips","text":"<ul> <li>Start with default 131kb analysis window</li> <li>Use tissue-specific analysis when relevant</li> <li>Validate surprising results with literature search</li> <li>Consider both gene expression and chromatin accessibility effects</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#conclusion","title":"Conclusion","text":"<p>BioMCP's dual interface approach (MCP + CLI) provides robust variant analysis capabilities. Claude Code works seamlessly with both, offering flexibility for different workflows. The MCP integration provides slight advantages for interactive analysis, while the CLI excels for scripting and debugging.</p> <p>The combination of AlphaGenome's predictive power with BioMCP's comprehensive biomedical data access creates a powerful platform for genetic variant analysis and interpretation.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>AlphaGenome Paper</li> <li>Claude Code MCP Guide</li> <li>uv Documentation</li> </ul>"},{"location":"tutorials/nci-prompts/","title":"NCI Tools Example Prompts","text":"<p>This guide provides example prompts for AI assistants to effectively use the NCI (National Cancer Institute) Clinical Trials Search API tools in BioMCP.</p>"},{"location":"tutorials/nci-prompts/#overview-of-nci-tools","title":"Overview of NCI Tools","text":"<p>BioMCP integrates with the NCI Clinical Trials Search API to provide:</p> <ul> <li>Organization Search &amp; Lookup - Find cancer research centers, hospitals, and trial sponsors</li> <li>Intervention Search &amp; Lookup - Search for drugs, devices, procedures, and other interventions</li> </ul> <p>These tools require an NCI API key from: https://clinicaltrialsapi.cancer.gov/</p>"},{"location":"tutorials/nci-prompts/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/nci-prompts/#api-key-required","title":"API Key Required","text":"<p>All example prompts in this guide should include your NCI API key. Add this to the end of each prompt:</p> <pre><code>\"... my NCI API key is YOUR_API_KEY\"\n</code></pre>"},{"location":"tutorials/nci-prompts/#location-searches","title":"Location Searches","text":"<p>ALWAYS use city AND state together when searching organizations by location. The NCI API has Elasticsearch limitations that cause errors with broad searches.</p> <p>\u2705 Good: <code>nci_organization_searcher(city=\"Cleveland\", state=\"OH\")</code> \u274c Bad: <code>nci_organization_searcher(city=\"Cleveland\")</code> or <code>nci_organization_searcher(state=\"OH\")</code></p>"},{"location":"tutorials/nci-prompts/#api-parameter-notes","title":"API Parameter Notes","text":"<ul> <li>The NCI APIs do not support offset-based pagination (<code>from</code> parameter)</li> <li>Organization location parameters use <code>org_</code> prefix (e.g., <code>org_city</code>, <code>org_state_or_province</code>)</li> <li>When using <code>size</code> parameter, the API may not return a <code>total</code> count</li> </ul>"},{"location":"tutorials/nci-prompts/#avoiding-api-errors","title":"Avoiding API Errors","text":"<ul> <li>Use specific organization names when possible</li> <li>Combine multiple filters (name + type, city + state)</li> <li>Start with more specific searches, then broaden if needed</li> </ul>"},{"location":"tutorials/nci-prompts/#organization-tools","title":"Organization Tools","text":""},{"location":"tutorials/nci-prompts/#organization-search","title":"Organization Search","text":""},{"location":"tutorials/nci-prompts/#basic-organization-search","title":"Basic Organization Search","text":"<pre><code>\"Find cancer centers in California, my NCI API key is YOUR_API_KEY\"\n\"Search for MD Anderson Cancer Center, my NCI API key is YOUR_API_KEY\"\n\"List academic cancer research centers in New York, my NCI API key is YOUR_API_KEY\"\n\"Find all NCI-designated cancer centers, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_organization_searcher(state=\"CA\", organization_type=\"Academic\")</code></p>"},{"location":"tutorials/nci-prompts/#organization-by-location","title":"Organization by Location","text":"<p>IMPORTANT: Always use city AND state together to avoid API errors!</p> <pre><code>\"Show me cancer treatment centers in Boston, MA, my NCI API key is YOUR_API_KEY\"\n\"Find clinical trial sites in Houston, Texas, my NCI API key is YOUR_API_KEY\"\n\"List all cancer research organizations in Cleveland, OH, my NCI API key is YOUR_API_KEY\"\n\"Search for industry sponsors in San Francisco, CA, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_organization_searcher(city=\"Boston\", state=\"MA\")</code> \u2713 Never use: <code>nci_organization_searcher(city=\"Boston\")</code> \u2717 or <code>nci_organization_searcher(state=\"MA\")</code> \u2717</p>"},{"location":"tutorials/nci-prompts/#organization-by-type","title":"Organization by Type","text":"<pre><code>\"Find all government cancer research facilities, my NCI API key is YOUR_API_KEY\"\n\"List pharmaceutical companies running cancer trials, my NCI API key is YOUR_API_KEY\"\n\"Show me academic medical centers conducting trials, my NCI API key is YOUR_API_KEY\"\n\"Find community hospitals participating in cancer research, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_organization_searcher(organization_type=\"Industry\")</code></p>"},{"location":"tutorials/nci-prompts/#organization-details","title":"Organization Details","text":"<pre><code>\"Get details about organization NCI-2011-03337, my NCI API key is YOUR_API_KEY\"\n\"Show me contact information for this cancer center, my NCI API key is YOUR_API_KEY\"\n\"What trials is this organization conducting? My NCI API key is YOUR_API_KEY\"\n\"Give me the full profile of this research institution, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>organization_getter(organization_id=\"NCI-2011-03337\")</code></p>"},{"location":"tutorials/nci-prompts/#intervention-tools","title":"Intervention Tools","text":""},{"location":"tutorials/nci-prompts/#intervention-search","title":"Intervention Search","text":""},{"location":"tutorials/nci-prompts/#drug-search","title":"Drug Search","text":"<pre><code>\"Find all trials using pembrolizumab, my NCI API key is YOUR_API_KEY\"\n\"Search for PD-1 inhibitor drugs in trials, my NCI API key is YOUR_API_KEY\"\n\"List all immunotherapy drugs being tested, my NCI API key is YOUR_API_KEY\"\n\"Find trials using Keytruda or similar drugs, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_intervention_searcher(name=\"pembrolizumab\", intervention_type=\"Drug\")</code></p>"},{"location":"tutorials/nci-prompts/#device-search","title":"Device Search","text":"<pre><code>\"Search for medical devices in cancer trials, my NCI API key is YOUR_API_KEY\"\n\"Find trials using surgical robots, my NCI API key is YOUR_API_KEY\"\n\"List radiation therapy devices being tested, my NCI API key is YOUR_API_KEY\"\n\"Show me trials with diagnostic devices, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_intervention_searcher(intervention_type=\"Device\")</code></p>"},{"location":"tutorials/nci-prompts/#procedure-search","title":"Procedure Search","text":"<pre><code>\"Find surgical procedures in cancer trials, my NCI API key is YOUR_API_KEY\"\n\"Search for minimally invasive surgery trials, my NCI API key is YOUR_API_KEY\"\n\"List trials with radiation therapy procedures, my NCI API key is YOUR_API_KEY\"\n\"Show me trials testing new biopsy techniques, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_intervention_searcher(intervention_type=\"Procedure\")</code></p>"},{"location":"tutorials/nci-prompts/#other-interventions","title":"Other Interventions","text":"<pre><code>\"Find behavioral interventions for cancer patients, my NCI API key is YOUR_API_KEY\"\n\"Search for dietary interventions in trials, my NCI API key is YOUR_API_KEY\"\n\"List genetic therapy trials, my NCI API key is YOUR_API_KEY\"\n\"Show me trials with exercise interventions, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_intervention_searcher(intervention_type=\"Behavioral\")</code></p>"},{"location":"tutorials/nci-prompts/#intervention-details","title":"Intervention Details","text":"<pre><code>\"Get full details about intervention INT123456, my NCI API key is YOUR_API_KEY\"\n\"Show me the mechanism of action for this drug, my NCI API key is YOUR_API_KEY\"\n\"Is this intervention FDA approved? My NCI API key is YOUR_API_KEY\"\n\"What trials are using this intervention? My NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>intervention_getter(intervention_id=\"INT123456\")</code></p>"},{"location":"tutorials/nci-prompts/#biomarker-tools","title":"Biomarker Tools","text":""},{"location":"tutorials/nci-prompts/#biomarker-search","title":"Biomarker Search","text":""},{"location":"tutorials/nci-prompts/#basic-biomarker-search","title":"Basic Biomarker Search","text":"<pre><code>\"Find PD-L1 expression biomarkers, my NCI API key is YOUR_API_KEY\"\n\"Search for EGFR mutations used in trials, my NCI API key is YOUR_API_KEY\"\n\"List biomarkers tested by IHC, my NCI API key is YOUR_API_KEY\"\n\"Find HER2 positive biomarkers, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_biomarker_searcher(name=\"PD-L1\")</code></p>"},{"location":"tutorials/nci-prompts/#biomarker-by-type","title":"Biomarker by Type","text":"<pre><code>\"Show me all reference gene biomarkers, my NCI API key is YOUR_API_KEY\"\n\"Find branch biomarkers, my NCI API key is YOUR_API_KEY\"\n\"List all biomarkers of type reference_gene, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_biomarker_searcher(biomarker_type=\"reference_gene\")</code></p>"},{"location":"tutorials/nci-prompts/#important-note-on-biomarker-types","title":"Important Note on Biomarker Types","text":"<p>The NCI API only supports two biomarker types:</p> <ul> <li><code>reference_gene</code>: Gene-based biomarkers</li> <li><code>branch</code>: Branch/pathway biomarkers</li> </ul> <p>Note: The API does NOT support searching by gene symbol or assay type directly.</p>"},{"location":"tutorials/nci-prompts/#nci-disease-tools","title":"NCI Disease Tools","text":""},{"location":"tutorials/nci-prompts/#disease-search","title":"Disease Search","text":""},{"location":"tutorials/nci-prompts/#basic-disease-search","title":"Basic Disease Search","text":"<pre><code>\"Find melanoma in NCI vocabulary, my NCI API key is YOUR_API_KEY\"\n\"Search for lung cancer types, my NCI API key is YOUR_API_KEY\"\n\"List breast cancer subtypes, my NCI API key is YOUR_API_KEY\"\n\"Find official name for GIST, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_disease_searcher(name=\"melanoma\")</code></p>"},{"location":"tutorials/nci-prompts/#disease-with-synonyms","title":"Disease with Synonyms","text":"<pre><code>\"Find all names for gastrointestinal stromal tumor, my NCI API key is YOUR_API_KEY\"\n\"Search for NSCLC and all its synonyms, my NCI API key is YOUR_API_KEY\"\n\"List all terms for triple-negative breast cancer, my NCI API key is YOUR_API_KEY\"\n\"Find alternative names for melanoma, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected tool usage: <code>nci_disease_searcher(name=\"GIST\", include_synonyms=True)</code></p>"},{"location":"tutorials/nci-prompts/#combined-workflows","title":"Combined Workflows","text":""},{"location":"tutorials/nci-prompts/#finding-trials-at-specific-centers","title":"Finding Trials at Specific Centers","text":"<pre><code>\"First find cancer centers in California, then show me their trials, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected workflow:</p> <ol> <li><code>nci_organization_searcher(state=\"CA\")</code></li> <li>For each organization, search trials with that sponsor</li> </ol>"},{"location":"tutorials/nci-prompts/#drug-development-pipeline","title":"Drug Development Pipeline","text":"<pre><code>\"Search for CAR-T cell therapies and show me which organizations are developing them, my NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected workflow:</p> <ol> <li><code>nci_intervention_searcher(name=\"CAR-T\", intervention_type=\"Biological\")</code></li> <li>For each intervention, get details to see associated trials</li> <li>Extract organization information from trial data</li> </ol>"},{"location":"tutorials/nci-prompts/#regional-cancer-research","title":"Regional Cancer Research","text":"<pre><code>\"What cancer drugs are being tested in Boston area hospitals? My NCI API key is YOUR_API_KEY\"\n</code></pre> <p>Expected workflow:</p> <ol> <li><code>nci_organization_searcher(city=\"Boston\", state=\"MA\")</code></li> <li><code>trial_searcher(location=\"Boston, MA\", source=\"nci\")</code> with organization filters</li> <li>Extract intervention information from trials</li> </ol>"},{"location":"tutorials/nci-prompts/#important-notes","title":"Important Notes","text":""},{"location":"tutorials/nci-prompts/#api-key-handling","title":"API Key Handling","text":"<p>All NCI tools require an API key. The tools will check for:</p> <ol> <li>API key provided in the function call</li> <li><code>NCI_API_KEY</code> environment variable</li> <li>User-provided key in their message (e.g., \"my NCI API key is...\")</li> </ol>"},{"location":"tutorials/nci-prompts/#synonym-support","title":"Synonym Support","text":"<p>The intervention searcher includes a <code>synonyms</code> parameter (default: True) that will search for:</p> <ul> <li>Drug trade names (e.g., \"Keytruda\" finds \"pembrolizumab\")</li> <li>Alternative spellings</li> <li>Related terms</li> </ul>"},{"location":"tutorials/nci-prompts/#pagination","title":"Pagination","text":"<p>Both search tools support pagination:</p> <ul> <li><code>page</code>: Page number (1-based)</li> <li><code>page_size</code>: Results per page (max 100)</li> </ul>"},{"location":"tutorials/nci-prompts/#organization-types","title":"Organization Types","text":"<p>Valid organization types include:</p> <ul> <li>Academic</li> <li>Industry</li> <li>Government</li> <li>Community</li> <li>Network</li> <li>Other</li> </ul>"},{"location":"tutorials/nci-prompts/#intervention-types","title":"Intervention Types","text":"<p>Valid intervention types include:</p> <ul> <li>Drug</li> <li>Device</li> <li>Biological</li> <li>Procedure</li> <li>Radiation</li> <li>Behavioral</li> <li>Genetic</li> <li>Dietary</li> <li>Other</li> </ul>"},{"location":"tutorials/nci-prompts/#error-handling","title":"Error Handling","text":"<p>Common errors and solutions:</p> <ol> <li>\"NCI API key required\": User needs to provide an API key</li> <li>\"No results found\": Try broader search terms or remove filters</li> <li>\"Invalid organization/intervention ID\": Verify the ID format</li> <li>Rate limiting: The API has rate limits; wait before retrying</li> <li>\"Search Too Broad\" (Elasticsearch error): The search returns too many results</li> <li>This happens when searching with broad criteria</li> <li>Prevention: Always use city AND state together for location searches</li> <li>Add organization name (even partial) to narrow results</li> <li>Avoid searching by state alone or organization type alone</li> </ol>"},{"location":"tutorials/openfda-integration/","title":"OpenFDA Integration Guide","text":""},{"location":"tutorials/openfda-integration/#overview","title":"Overview","text":"<p>BioMCP now integrates with the FDA's openFDA API to provide access to critical drug safety and regulatory information. This integration adds three major data sources to BioMCP's capabilities:</p> <ol> <li>Drug Adverse Events (FAERS) - FDA Adverse Event Reporting System data</li> <li>Drug Labels (SPL) - Official FDA drug product labeling</li> <li>Device Events (MAUDE) - Medical device adverse event reports</li> </ol> <p>This guide covers how to use these new tools effectively for precision oncology research.</p>"},{"location":"tutorials/openfda-integration/#quick-start","title":"Quick Start","text":""},{"location":"tutorials/openfda-integration/#installation-setup","title":"Installation &amp; Setup","text":"<p>The OpenFDA integration is included in the standard BioMCP installation:</p> <pre><code># Install BioMCP\npip install biomcp-python\n\n# Optional: Set API key for higher rate limits\nexport OPENFDA_API_KEY=\"your-api-key-here\"\n</code></pre> <p>Note: An API key is optional but recommended. Without one, you're limited to 40 requests/minute. With a key, you get 240 requests/minute. Get a free API key here.</p>"},{"location":"tutorials/openfda-integration/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"tutorials/openfda-integration/#search-for-drug-adverse-events","title":"Search for drug adverse events","text":"<pre><code># Find adverse events for a specific drug\nbiomcp openfda adverse search --drug imatinib\n\n# Search for specific reactions\nbiomcp openfda adverse search --reaction nausea --serious\n\n# Get detailed report\nbiomcp openfda adverse get REPORT123456\n</code></pre>"},{"location":"tutorials/openfda-integration/#search-drug-labels","title":"Search drug labels","text":"<pre><code># Find drugs for specific indications\nbiomcp openfda label search --indication melanoma\n\n# Search for drugs with boxed warnings\nbiomcp openfda label search --boxed-warning\n\n# Get complete label\nbiomcp openfda label get SET_ID_HERE\n</code></pre>"},{"location":"tutorials/openfda-integration/#search-device-events","title":"Search device events","text":"<pre><code># Search for genomic test device issues\nbiomcp openfda device search --device \"FoundationOne\"\n\n# Search by manufacturer\nbiomcp openfda device search --manufacturer Illumina\n\n# Get detailed device event\nbiomcp openfda device get MDR123456\n</code></pre>"},{"location":"tutorials/openfda-integration/#mcp-tool-usage","title":"MCP Tool Usage","text":""},{"location":"tutorials/openfda-integration/#for-ai-agents","title":"For AI Agents","text":"<p>The OpenFDA tools are available as MCP tools for AI agents. Each tool includes built-in reminders to use the <code>think</code> tool first for complex queries.</p>"},{"location":"tutorials/openfda-integration/#available-tools","title":"Available Tools","text":"<ul> <li><code>openfda_adverse_searcher</code> - Search drug adverse events</li> <li><code>openfda_adverse_getter</code> - Get specific adverse event report</li> <li><code>openfda_label_searcher</code> - Search drug labels</li> <li><code>openfda_label_getter</code> - Get complete drug label</li> <li><code>openfda_device_searcher</code> - Search device adverse events</li> <li><code>openfda_device_getter</code> - Get specific device event report</li> </ul>"},{"location":"tutorials/openfda-integration/#example-tool-usage","title":"Example Tool Usage","text":"<pre><code># Search for adverse events\nresult = await openfda_adverse_searcher(\n    drug=\"pembrolizumab\",\n    serious=True,\n    limit=25\n)\n\n# Get drug label\nlabel = await openfda_label_getter(\n    set_id=\"abc-123-def\",\n    sections=[\"indications_and_usage\", \"warnings_and_precautions\"]\n)\n\n# Search genomic devices\ndevices = await openfda_device_searcher(\n    device=\"sequencer\",\n    genomics_only=True,  # Filter to genomic/diagnostic devices\n    problem=\"false positive\"\n)\n</code></pre>"},{"location":"tutorials/openfda-integration/#data-sources-explained","title":"Data Sources Explained","text":""},{"location":"tutorials/openfda-integration/#drug-adverse-events-faers","title":"Drug Adverse Events (FAERS)","text":"<p>The FDA Adverse Event Reporting System contains reports of adverse events and medication errors submitted to FDA. Key features:</p> <ul> <li>Voluntary reporting: Reports come from healthcare professionals, patients, and manufacturers</li> <li>No causation proof: Reports don't establish that a drug caused the event</li> <li>Rich detail: Includes patient demographics, drug information, reactions, and outcomes</li> <li>Real-world data: Captures post-market safety signals</li> </ul> <p>Best for: Understanding potential side effects, safety signals, drug interactions</p>"},{"location":"tutorials/openfda-integration/#drug-labels-spl","title":"Drug Labels (SPL)","text":"<p>Structured Product Labeling contains the official FDA-approved prescribing information. Includes:</p> <ul> <li>Indications and usage: FDA-approved uses</li> <li>Dosage and administration: How to prescribe</li> <li>Contraindications: When not to use</li> <li>Warnings and precautions: Safety information</li> <li>Drug interactions: Known interactions</li> <li>Clinical studies: Trial data supporting approval</li> </ul> <p>Best for: Official prescribing guidelines, approved indications, contraindications</p>"},{"location":"tutorials/openfda-integration/#device-events-maude","title":"Device Events (MAUDE)","text":"<p>Manufacturer and User Facility Device Experience database contains medical device adverse events. For BioMCP, we focus on genomic/diagnostic devices:</p> <ul> <li>Genomic test devices: Issues with sequencing platforms, diagnostic panels</li> <li>In vitro diagnostics: Problems with biomarker tests</li> <li>Device malfunctions: Technical failures affecting test results</li> <li>Patient impact: How device issues affected patient care</li> </ul> <p>Best for: Understanding reliability of genomic tests, device-related diagnostic issues</p>"},{"location":"tutorials/openfda-integration/#advanced-features","title":"Advanced Features","text":""},{"location":"tutorials/openfda-integration/#genomic-device-filtering","title":"Genomic Device Filtering","text":"<p>By default, device searches filter to genomic/diagnostic devices relevant to precision oncology:</p> <pre><code># Search only genomic devices (default)\nbiomcp openfda device search --device test\n\n# Search ALL medical devices\nbiomcp openfda device search --device test --all-devices\n</code></pre> <p>The genomic filter includes FDA product codes for:</p> <ul> <li>Next Generation Sequencing panels</li> <li>Gene mutation detection systems</li> <li>Tumor profiling tests</li> <li>Hereditary variant detection systems</li> </ul>"},{"location":"tutorials/openfda-integration/#pagination-support","title":"Pagination Support","text":"<p>All search tools support pagination for large result sets:</p> <pre><code># Get second page of results\nbiomcp openfda adverse search --drug aspirin --page 2 --limit 50\n</code></pre>"},{"location":"tutorials/openfda-integration/#section-specific-label-retrieval","title":"Section-Specific Label Retrieval","text":"<p>When retrieving drug labels, you can specify which sections to include:</p> <pre><code># Get only specific sections\nbiomcp openfda label get SET_ID --sections \"indications_and_usage,adverse_reactions\"\n</code></pre>"},{"location":"tutorials/openfda-integration/#integration-with-other-biomcp-tools","title":"Integration with Other BioMCP Tools","text":""},{"location":"tutorials/openfda-integration/#complementary-data-sources","title":"Complementary Data Sources","text":"<p>OpenFDA data complements existing BioMCP tools:</p> Tool Data Source Best For <code>drug_getter</code> MyChem.info Chemical properties, mechanisms <code>openfda_label_searcher</code> FDA Labels Official indications, prescribing <code>openfda_adverse_searcher</code> FAERS Safety signals, side effects <code>trial_searcher</code> ClinicalTrials.gov Active trials, eligibility"},{"location":"tutorials/openfda-integration/#workflow-examples","title":"Workflow Examples","text":""},{"location":"tutorials/openfda-integration/#complete-drug-profile","title":"Complete Drug Profile","text":"<pre><code># 1. Get drug chemical info\ndrug_info = await drug_getter(\"imatinib\")\n\n# 2. Get FDA label\nlabel = await openfda_label_searcher(name=\"imatinib\")\n\n# 3. Check adverse events\nsafety = await openfda_adverse_searcher(drug=\"imatinib\", serious=True)\n\n# 4. Find current trials\ntrials = await trial_searcher(interventions=[\"imatinib\"])\n</code></pre>"},{"location":"tutorials/openfda-integration/#device-reliability-check","title":"Device Reliability Check","text":"<pre><code># 1. Search for device issues\nevents = await openfda_device_searcher(\n    device=\"FoundationOne CDx\",\n    problem=\"false\"\n)\n\n# 2. Get specific event details\nif events:\n    details = await openfda_device_getter(\"MDR_KEY_HERE\")\n</code></pre>"},{"location":"tutorials/openfda-integration/#important-considerations","title":"Important Considerations","text":""},{"location":"tutorials/openfda-integration/#data-limitations","title":"Data Limitations","text":"<ol> <li> <p>Adverse Events:</p> </li> <li> <p>Reports don't prove causation</p> </li> <li>Reporting is voluntary, so not all events are captured</li> <li>Duplicate reports may exist</li> <li> <p>Include appropriate disclaimers when presenting data</p> </li> <li> <p>Drug Labels:</p> </li> <li> <p>May not reflect the most recent changes</p> </li> <li>Off-label uses not included</li> <li> <p>Generic drugs may have different inactive ingredients</p> </li> <li> <p>Device Events:</p> </li> <li>Not all device problems are reported</li> <li>User error vs device malfunction can be unclear</li> <li>Reports may lack complete information</li> </ol>"},{"location":"tutorials/openfda-integration/#rate-limits","title":"Rate Limits","text":"<ul> <li>Without API key: 40 requests/minute per IP</li> <li>With API key: 240 requests/minute per key</li> <li>Burst limit: 4 requests/second</li> </ul>"},{"location":"tutorials/openfda-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Always use disclaimers: Include FDA's disclaimer about adverse events not proving causation</li> <li>Check multiple sources: Combine OpenFDA data with other BioMCP tools</li> <li>Filter appropriately: Use genomic device filtering for relevant results</li> <li>Handle no results gracefully: Many specific queries may return no results</li> <li>Respect rate limits: Use API key for production use</li> </ol>"},{"location":"tutorials/openfda-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/openfda-integration/#common-issues","title":"Common Issues","text":"<p>No results found</p> <ul> <li>Try broader search terms</li> <li>Check spelling of drug/device names</li> <li>Remove filters to expand search</li> </ul> <p>Rate limit errors</p> <ul> <li>Add API key to environment</li> <li>Reduce request frequency</li> <li>Batch queries when possible</li> </ul> <p>Timeout errors</p> <ul> <li>OpenFDA API may be slow/down</li> <li>Retry after a brief wait</li> <li>Consider caching frequent queries</li> </ul>"},{"location":"tutorials/openfda-integration/#getting-help","title":"Getting Help","text":"<ul> <li>OpenFDA documentation: https://open.fda.gov/apis/</li> <li>OpenFDA status: https://api.fda.gov/status</li> <li>BioMCP issues: https://github.com/genomoncology/biomcp/issues</li> </ul>"},{"location":"tutorials/openfda-integration/#api-reference","title":"API Reference","text":""},{"location":"tutorials/openfda-integration/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>OPENFDA_API_KEY</code>: Your openFDA API key (optional but recommended)</li> </ul>"},{"location":"tutorials/openfda-integration/#cli-commands","title":"CLI Commands","text":"<pre><code># Adverse Events\nbiomcp openfda adverse search [OPTIONS]\n  --drug TEXT           Drug name to search\n  --reaction TEXT       Reaction to search\n  --serious/--all       Filter serious events\n  --limit INT           Results per page (max 100)\n  --page INT            Page number\n\nbiomcp openfda adverse get REPORT_ID\n\n# Drug Labels\nbiomcp openfda label search [OPTIONS]\n  --name TEXT           Drug name\n  --indication TEXT     Indication to search\n  --boxed-warning       Has boxed warning\n  --section TEXT        Label section\n  --limit INT           Results per page\n  --page INT            Page number\n\nbiomcp openfda label get SET_ID [OPTIONS]\n  --sections TEXT       Comma-separated sections\n\n# Device Events\nbiomcp openfda device search [OPTIONS]\n  --device TEXT         Device name\n  --manufacturer TEXT   Manufacturer name\n  --problem TEXT        Problem description\n  --product-code TEXT   FDA product code\n  --genomics-only/--all-devices\n  --limit INT           Results per page\n  --page INT            Page number\n\nbiomcp openfda device get MDR_KEY\n</code></pre>"},{"location":"tutorials/openfda-integration/#example-outputs","title":"Example Outputs","text":""},{"location":"tutorials/openfda-integration/#adverse-event-search","title":"Adverse Event Search","text":"<pre><code>## FDA Adverse Event Reports\n\n**Drug**: imatinib | **Serious Events**: Yes\n**Total Reports Found**: 1,234 reports\n\n### Top Reported Reactions:\n\n- **NAUSEA**: 234 reports (19.0%)\n- **FATIGUE**: 189 reports (15.3%)\n- **RASH**: 156 reports (12.6%)\n\n### Sample Reports (showing 3 of 1,234):\n\n...\n</code></pre>"},{"location":"tutorials/openfda-integration/#drug-label-search","title":"Drug Label Search","text":"<pre><code>## FDA Drug Labels\n\n**Drug**: pembrolizumab\n**Total Labels Found**: 5 labels\n\n### Results (showing 5 of 5):\n\n#### 1. KEYTRUDA\n\n**Also known as**: pembrolizumab\n**FDA Application**: BLA125514\n**Manufacturer**: Merck Sharp &amp; Dohme\n**Route**: INTRAVENOUS\n\n\u26a0\ufe0f **BOXED WARNING**: Immune-mediated adverse reactions...\n\n**Indications**: KEYTRUDA is indicated for the treatment of...\n</code></pre>"},{"location":"tutorials/openfda-integration/#device-event-search","title":"Device Event Search","text":"<pre><code>## FDA Device Adverse Event Reports\n\n**Device**: FoundationOne | **Type**: Genomic/Diagnostic Devices\n**Total Reports Found**: 12 reports\n\n### Top Reported Problems:\n\n- **False negative result**: 5 reports (41.7%)\n- **Software malfunction**: 3 reports (25.0%)\n\n### Sample Reports (showing 3 of 12):\n\n...\n</code></pre>"},{"location":"tutorials/openfda-prompts/","title":"OpenFDA Example Prompts for AI Agents","text":"<p>This document provides example prompts that demonstrate effective use of BioMCP's OpenFDA integration for various precision oncology use cases.</p>"},{"location":"tutorials/openfda-prompts/#drug-safety-assessment","title":"Drug Safety Assessment","text":""},{"location":"tutorials/openfda-prompts/#basic-safety-profile","title":"Basic Safety Profile","text":"<pre><code>What are the most common adverse events reported for pembrolizumab?\nInclude both serious and non-serious events.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan safety assessment approach</li> <li><code>openfda_adverse_searcher(drug=\"pembrolizumab\", limit=50)</code></li> <li>Analyze and summarize top reactions</li> </ol>"},{"location":"tutorials/openfda-prompts/#comparative-safety-analysis","title":"Comparative Safety Analysis","text":"<pre><code>Compare the adverse event profiles of imatinib and dasatinib for CML treatment.\nFocus on serious events and their frequencies.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan comparative analysis</li> <li><code>openfda_adverse_searcher(drug=\"imatinib\", serious=True)</code></li> <li><code>openfda_adverse_searcher(drug=\"dasatinib\", serious=True)</code></li> <li>Compare and contrast findings</li> </ol>"},{"location":"tutorials/openfda-prompts/#drug-interaction-investigation","title":"Drug Interaction Investigation","text":"<pre><code>A patient on warfarin needs to start erlotinib for NSCLC. What drug interactions\nand adverse events should we monitor based on FDA data?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Consider interaction risks</li> <li><code>openfda_label_searcher(name=\"erlotinib\")</code> - Check drug interactions section</li> <li><code>openfda_adverse_searcher(drug=\"erlotinib\", reaction=\"bleeding\")</code></li> <li><code>openfda_adverse_searcher(drug=\"erlotinib\", reaction=\"INR\")</code></li> </ol>"},{"location":"tutorials/openfda-prompts/#treatment-planning","title":"Treatment Planning","text":""},{"location":"tutorials/openfda-prompts/#indication-verification","title":"Indication Verification","text":"<pre><code>Is trastuzumab deruxtecan FDA-approved for HER2-low breast cancer?\nWhat are the specific approved indications?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan indication search</li> <li><code>openfda_label_searcher(name=\"trastuzumab deruxtecan\")</code></li> <li><code>openfda_label_getter(set_id=\"...\")</code> - Get full indications section</li> <li>Extract and summarize approved uses</li> </ol>"},{"location":"tutorials/openfda-prompts/#contraindication-screening","title":"Contraindication Screening","text":"<pre><code>Patient has severe hepatic impairment. Which targeted therapy drugs for\nmelanoma have contraindications or warnings for liver dysfunction?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Identify melanoma drugs to check</li> <li><code>openfda_label_searcher(indication=\"melanoma\")</code></li> <li>For each drug: <code>openfda_label_getter(set_id=\"...\", sections=[\"contraindications\", \"warnings_and_precautions\"])</code></li> <li>Summarize liver-related contraindications</li> </ol>"},{"location":"tutorials/openfda-prompts/#dosing-guidelines","title":"Dosing Guidelines","text":"<pre><code>What is the FDA-recommended dosing for osimertinib in EGFR-mutated NSCLC,\nincluding dose modifications for adverse events?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan dosing information retrieval</li> <li><code>openfda_label_searcher(name=\"osimertinib\")</code></li> <li><code>openfda_label_getter(set_id=\"...\", sections=[\"dosage_and_administration\", \"dose_modifications\"])</code></li> <li>Extract dosing guidelines</li> </ol>"},{"location":"tutorials/openfda-prompts/#device-reliability-assessment","title":"Device Reliability Assessment","text":""},{"location":"tutorials/openfda-prompts/#genomic-test-reliability","title":"Genomic Test Reliability","text":"<pre><code>What adverse events have been reported for NGS-based cancer diagnostic devices?\nShow me any false positive or accuracy issues.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Consider test reliability factors</li> <li><code>openfda_device_searcher(genomics_only=True, limit=25)</code> - Get all genomic device events</li> <li><code>openfda_device_searcher(problem=\"false positive\", genomics_only=True)</code></li> <li><code>openfda_device_searcher(problem=\"accuracy\", genomics_only=True)</code></li> <li>For significant events: <code>openfda_device_getter(mdr_report_key=\"...\")</code></li> </ol> <p>Note: The FDA database uses abbreviated names (e.g., \"F1CDX\" instead of \"FoundationOne CDx\"). For specific devices, try: <code>openfda_device_searcher(device=\"F1CDX\")</code> or search by key terms.</p>"},{"location":"tutorials/openfda-prompts/#laboratory-equipment-issues","title":"Laboratory Equipment Issues","text":"<pre><code>Our lab uses Illumina sequencers. What device malfunctions have been\nreported that could impact our genomic testing workflow?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Assess potential workflow impacts</li> <li><code>openfda_device_searcher(manufacturer=\"Illumina\", genomics_only=True)</code></li> <li>Analyze problem patterns</li> <li><code>openfda_device_getter(mdr_report_key=\"...\")</code> for critical issues</li> </ol>"},{"location":"tutorials/openfda-prompts/#comprehensive-drug-evaluation","title":"Comprehensive Drug Evaluation","text":""},{"location":"tutorials/openfda-prompts/#new-drug-assessment","title":"New Drug Assessment","text":"<pre><code>Provide a comprehensive safety and efficacy profile for sotorasib (Lumakras)\nincluding FDA approval, indications, major warnings, and post-market adverse events.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan comprehensive assessment</li> <li><code>drug_getter(\"sotorasib\")</code> - Basic drug info</li> <li><code>openfda_label_searcher(name=\"sotorasib\")</code></li> <li><code>openfda_label_getter(set_id=\"...\")</code> - Full label</li> <li><code>openfda_adverse_searcher(drug=\"sotorasib\", serious=True)</code></li> <li><code>trial_searcher(interventions=[\"sotorasib\"])</code> - Ongoing trials</li> </ol>"},{"location":"tutorials/openfda-prompts/#risk-benefit-analysis","title":"Risk-Benefit Analysis","text":"<pre><code>For a 75-year-old patient with metastatic melanoma, analyze the risk-benefit\nprofile of nivolumab plus ipilimumab combination therapy based on FDA data.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Structure risk-benefit analysis</li> <li><code>openfda_label_searcher(name=\"nivolumab\")</code></li> <li><code>openfda_label_searcher(name=\"ipilimumab\")</code></li> <li><code>openfda_label_getter(set_id=\"...\", sections=[\"geriatric_use\", \"warnings_and_precautions\"])</code></li> <li><code>openfda_adverse_searcher(drug=\"nivolumab\", serious=True)</code></li> <li><code>openfda_adverse_searcher(drug=\"ipilimumab\", serious=True)</code></li> </ol>"},{"location":"tutorials/openfda-prompts/#special-populations","title":"Special Populations","text":""},{"location":"tutorials/openfda-prompts/#pregnancy-considerations","title":"Pregnancy Considerations","text":"<pre><code>Which FDA-approved lung cancer treatments have pregnancy category data\nor specific warnings for pregnant patients?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan pregnancy safety search</li> <li><code>openfda_label_searcher(indication=\"lung cancer\")</code></li> <li>For each drug: <code>openfda_label_getter(set_id=\"...\", sections=[\"pregnancy\", \"use_in_specific_populations\"])</code></li> <li>Compile pregnancy categories and warnings</li> </ol>"},{"location":"tutorials/openfda-prompts/#pediatric-oncology","title":"Pediatric Oncology","text":"<pre><code>What FDA-approved indications and safety data exist for using\ncheckpoint inhibitors in pediatric cancer patients?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Identify checkpoint inhibitors</li> <li><code>openfda_label_searcher(name=\"pembrolizumab\")</code></li> <li><code>openfda_label_getter(set_id=\"...\", sections=[\"pediatric_use\"])</code></li> <li><code>openfda_adverse_searcher(drug=\"pembrolizumab\")</code> - Filter for pediatric if possible</li> <li>Repeat for other checkpoint inhibitors</li> </ol>"},{"location":"tutorials/openfda-prompts/#complex-queries","title":"Complex Queries","text":""},{"location":"tutorials/openfda-prompts/#multi-drug-regimen-safety","title":"Multi-Drug Regimen Safety","text":"<pre><code>Analyze potential safety concerns for the FOLFOX chemotherapy regimen\n(5-FU, leucovorin, oxaliplatin) based on FDA adverse event data.\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan multi-drug analysis</li> <li><code>openfda_adverse_searcher(drug=\"fluorouracil\")</code></li> <li><code>openfda_adverse_searcher(drug=\"leucovorin\")</code></li> <li><code>openfda_adverse_searcher(drug=\"oxaliplatin\")</code></li> <li>Identify overlapping toxicities</li> <li><code>openfda_label_searcher(name=\"oxaliplatin\")</code> - Check for combination warnings</li> </ol>"},{"location":"tutorials/openfda-prompts/#biomarker-driven-treatment-selection","title":"Biomarker-Driven Treatment Selection","text":"<pre><code>For a patient with BRAF V600E mutant melanoma with brain metastases,\nwhat FDA-approved treatments are available and what are their CNS-specific\nefficacy and safety considerations?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Structure biomarker-driven search</li> <li><code>article_searcher(genes=[\"BRAF\"], variants=[\"V600E\"], diseases=[\"melanoma\"])</code></li> <li><code>openfda_label_searcher(indication=\"melanoma\")</code></li> <li>For BRAF inhibitors: <code>openfda_label_getter(set_id=\"...\", sections=[\"clinical_studies\", \"warnings_and_precautions\"])</code></li> <li><code>openfda_adverse_searcher(drug=\"dabrafenib\", reaction=\"seizure\")</code></li> <li><code>openfda_adverse_searcher(drug=\"vemurafenib\", reaction=\"brain\")</code></li> </ol>"},{"location":"tutorials/openfda-prompts/#treatment-failure-analysis","title":"Treatment Failure Analysis","text":"<pre><code>A patient's lung adenocarcinoma progressed on osimertinib. Based on FDA data,\nwhat are the documented resistance mechanisms and alternative approved treatments?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Analyze resistance and alternatives</li> <li><code>openfda_label_getter(set_id=\"...\", sections=[\"clinical_studies\"])</code> for osimertinib</li> <li><code>article_searcher(genes=[\"EGFR\"], keywords=[\"resistance\", \"osimertinib\"])</code></li> <li><code>openfda_label_searcher(indication=\"non-small cell lung cancer\")</code></li> <li><code>trial_searcher(conditions=[\"NSCLC\"], keywords=[\"osimertinib resistant\"])</code></li> </ol>"},{"location":"tutorials/openfda-prompts/#safety-monitoring","title":"Safety Monitoring","text":""},{"location":"tutorials/openfda-prompts/#post-market-surveillance","title":"Post-Market Surveillance","text":"<pre><code>Have there been any new safety signals for CDK4/6 inhibitors\n(palbociclib, ribociclib, abemaciclib) in the past year?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Plan safety signal detection</li> <li><code>openfda_adverse_searcher(drug=\"palbociclib\", limit=100)</code></li> <li><code>openfda_adverse_searcher(drug=\"ribociclib\", limit=100)</code></li> <li><code>openfda_adverse_searcher(drug=\"abemaciclib\", limit=100)</code></li> <li>Analyze for unusual patterns or frequencies</li> </ol>"},{"location":"tutorials/openfda-prompts/#rare-adverse-event-investigation","title":"Rare Adverse Event Investigation","text":"<pre><code>Investigate reports of pneumonitis associated with immune checkpoint inhibitors.\nWhich drugs have the highest frequency and what are the typical outcomes?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Structure pneumonitis investigation</li> <li><code>openfda_adverse_searcher(drug=\"pembrolizumab\", reaction=\"pneumonitis\")</code></li> <li><code>openfda_adverse_searcher(drug=\"nivolumab\", reaction=\"pneumonitis\")</code></li> <li><code>openfda_adverse_searcher(drug=\"atezolizumab\", reaction=\"pneumonitis\")</code></li> <li>Compare frequencies and outcomes</li> <li><code>openfda_adverse_getter(report_id=\"...\")</code> for severe cases</li> </ol>"},{"location":"tutorials/openfda-prompts/#quality-assurance","title":"Quality Assurance","text":""},{"location":"tutorials/openfda-prompts/#diagnostic-test-validation","title":"Diagnostic Test Validation","text":"<pre><code>What quality issues have been reported for liquid biopsy ctDNA tests\nthat could affect treatment decisions?\n</code></pre> <p>Expected BioMCP Usage:</p> <ol> <li><code>think</code> - Identify quality factors</li> <li><code>openfda_device_searcher(device=\"liquid biopsy\", genomics_only=True)</code></li> <li><code>openfda_device_searcher(device=\"ctDNA\", genomics_only=True)</code></li> <li><code>openfda_device_searcher(device=\"circulating tumor\", genomics_only=True)</code></li> <li>Analyze failure modes</li> </ol>"},{"location":"tutorials/openfda-prompts/#tips-for-effective-prompts","title":"Tips for Effective Prompts","text":"<ol> <li>Be specific about the data needed: Specify if you want adverse events, labels, or device data</li> <li>Include relevant filters: Mention if focusing on serious events, specific populations, or genomic devices</li> <li>Request appropriate analysis: Ask for comparisons, trends, or specific data points</li> <li>Consider multiple data sources: Combine OpenFDA with literature and trial data for comprehensive answers</li> <li>Include time frames when relevant: Though OpenFDA doesn't support date filtering in queries, you can ask for analysis of recent reports</li> </ol>"},{"location":"tutorials/openfda-prompts/#integration-examples","title":"Integration Examples","text":""},{"location":"tutorials/openfda-prompts/#combining-with-literature-search","title":"Combining with Literature Search","text":"<pre><code>Find FDA adverse events for venetoclax in CLL, then search for published\ncase reports that provide more clinical context for the most serious events.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#combining-with-clinical-trials","title":"Combining with Clinical Trials","text":"<pre><code>What adverse events are reported for FDA-approved CAR-T therapies, and how\ndo these compare to adverse events being monitored in current clinical trials?\n</code></pre>"},{"location":"tutorials/openfda-prompts/#combining-with-variant-data","title":"Combining with Variant Data","text":"<pre><code>For patients with RET fusion-positive cancers, what FDA-approved targeted\ntherapies are available and what are their mutation-specific response rates?\n</code></pre>"},{"location":"tutorials/openfda-prompts/#using-your-openfda-api-key","title":"Using Your OpenFDA API Key","text":"<p>The OpenFDA API has rate limits: 40 requests/minute without a key, or 240 requests/minute with a key. You can get a free API key at https://open.fda.gov/apis/authentication/</p>"},{"location":"tutorials/openfda-prompts/#method-1-include-api-key-in-your-prompt","title":"Method 1: Include API Key in Your Prompt","text":"<p>You can provide your API key directly in your conversation with the AI:</p> <pre><code>My OpenFDA API key is: YOUR_API_KEY_HERE\n\nSearch for all serious adverse events reported for pembrolizumab in the last year.\nInclude both death and hospitalization events.\n</code></pre> <pre><code>Using my OpenFDA API key YOUR_API_KEY_HERE, compare the safety profiles of\nall FDA-approved BRAF inhibitors for melanoma treatment.\n</code></pre> <pre><code>I have an OpenFDA API key: YOUR_API_KEY_HERE\n\nAnalyze device malfunction reports for all NGS-based cancer diagnostic tests.\nFocus on false positive and false negative results that could impact treatment decisions.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#method-2-set-environment-variable-recommended-for-regular-use","title":"Method 2: Set Environment Variable (Recommended for Regular Use)","text":"<p>If you're using BioMCP regularly, set the environment variable once:</p> <pre><code>export OPENFDA_API_KEY=\"YOUR_API_KEY_HERE\"\n</code></pre> <p>Then your prompts don't need to include the key:</p> <pre><code>Retrieve the complete FDA label for trastuzumab deruxtecan, including all\nwarnings and contraindications for HER2-low breast cancer patients.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#method-3-cli-usage-with-api-key","title":"Method 3: CLI Usage with API Key","text":"<p>When using the BioMCP CLI directly:</p> <pre><code># Pass API key as parameter\nbiomcp openfda adverse search --drug pembrolizumab --serious --api-key YOUR_API_KEY_HERE\n\n# Or set environment variable first\nexport OPENFDA_API_KEY=\"YOUR_API_KEY_HERE\"\nbiomcp openfda device search --manufacturer Illumina --genomics-only\n</code></pre>"},{"location":"tutorials/openfda-prompts/#example-prompts-with-api-key","title":"Example Prompts with API Key","text":""},{"location":"tutorials/openfda-prompts/#comprehensive-drug-safety-analysis","title":"Comprehensive Drug Safety Analysis","text":"<pre><code>My OpenFDA API key is: YOUR_API_KEY_HERE\n\nPerform a comprehensive safety analysis of sotorasib (Lumakras) including:\n1. All serious adverse events from post-market surveillance\n2. Complete FDA label with all sections\n3. Any device issues if it's a companion diagnostic drug\n4. Compare its safety profile to other KRAS G12C inhibitors if available\n\nThis is for a clinical review, so I need detailed data from all available FDA sources.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#large-scale-adverse-event-analysis","title":"Large-Scale Adverse Event Analysis","text":"<pre><code>Using my OpenFDA API key YOUR_API_KEY_HERE, analyze adverse events for all\nFDA-approved checkpoint inhibitors (pembrolizumab, nivolumab, atezolizumab,\ndurvalumab, avelumab, cemiplimab).\n\nFor each drug:\n- Get the top 20 most frequent adverse events\n- Identify immune-related adverse events\n- Check for any black box warnings in their labels\n- Note any fatal events\n\nThis requires many API calls, so please use my API key for higher rate limits.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#multi-device-comparison","title":"Multi-Device Comparison","text":"<pre><code>I have an OpenFDA API key: YOUR_API_KEY_HERE\n\nCompare all FDA adverse event reports for NGS-based companion diagnostic devices\nfrom major manufacturers (Foundation Medicine, Guardant Health, Tempus, etc.).\nFocus on:\n- Test failure rates\n- Sample quality issues\n- False positive/negative reports\n- Software-related problems\n\nThis analysis requires querying multiple device records, so the API key will help\navoid rate limiting.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#batch-label-retrieval","title":"Batch Label Retrieval","text":"<pre><code>My OpenFDA API key is YOUR_API_KEY_HERE.\n\nRetrieve the complete FDA labels for all CDK4/6 inhibitors (palbociclib,\nribociclib, abemaciclib) and extract:\n- Approved indications\n- Dose modifications for adverse events\n- Drug-drug interactions\n- Special population considerations\n\nThen create a comparison table of their safety profiles and dosing guidelines.\n</code></pre>"},{"location":"tutorials/openfda-prompts/#when-to-provide-an-api-key","title":"When to Provide an API Key","text":"<p>You should provide your API key when:</p> <ol> <li>Performing large-scale analyses requiring many API calls</li> <li>Conducting comprehensive safety reviews across multiple drugs/devices</li> <li>Running batch operations like comparing multiple products</li> <li>Doing rapid iterative searches that might hit rate limits</li> <li>Performing systematic reviews requiring extensive data retrieval</li> </ol>"},{"location":"tutorials/openfda-prompts/#api-key-security-notes","title":"API Key Security Notes","text":"<ul> <li>Never share your actual API key in public forums or repositories</li> <li>The AI will use your key only for the current session</li> <li>Keys passed as parameters override environment variables</li> <li>The FDA API key is free and can be regenerated if compromised</li> </ul>"},{"location":"tutorials/openfda-prompts/#important-notes","title":"Important Notes","text":"<ul> <li>Always expect the AI to use the <code>think</code> tool first for complex queries</li> <li>The AI should include appropriate disclaimers about adverse events not proving causation</li> <li>Results are limited by FDA's data availability and reporting patterns</li> <li>The AI should suggest when additional data sources might provide complementary information</li> <li>With an API key, you can make 240 requests/minute vs 40 without</li> </ul>"},{"location":"tutorials/openfda-prompts/#known-limitations","title":"Known Limitations","text":""},{"location":"tutorials/openfda-prompts/#drug-shortage-data","title":"Drug Shortage Data","text":"<p>Important: The FDA does not currently provide a machine-readable API for drug shortage data. The shortage search tools will return an informative message directing users to the FDA's web-based shortage database. This is a limitation of FDA's current data infrastructure, not a bug in BioMCP.</p> <p>Alternative resources for drug shortage information:</p> <ul> <li>FDA Drug Shortages Database: https://www.accessdata.fda.gov/scripts/drugshortages/</li> <li>ASHP Drug Shortages: https://www.ashp.org/drug-shortages/current-shortages</li> </ul>"},{"location":"tutorials/openfda-prompts/#other-limitations","title":"Other Limitations","text":"<ul> <li>Device adverse event reports use abbreviated device names (e.g., \"F1CDX\" instead of \"FoundationOne CDx\")</li> <li>Adverse event reports represent voluntary submissions and may not reflect true incidence rates</li> <li>Recall information may have a delay of 24-48 hours from initial FDA announcement</li> </ul>"},{"location":"tutorials/pydantic-ai-integration/","title":"Pydantic AI Integration Guide","text":"<p>This guide explains how to integrate BioMCP with Pydantic AI for building biomedical AI agents.</p>"},{"location":"tutorials/pydantic-ai-integration/#server-modes-and-endpoints","title":"Server Modes and Endpoints","text":"<p>BioMCP supports two primary transport modes for Pydantic AI integration:</p>"},{"location":"tutorials/pydantic-ai-integration/#available-transport-modes","title":"Available Transport Modes","text":"Mode Endpoints Pydantic AI Client Use Case <code>stdio</code> N/A (subprocess) <code>MCPServerStdio</code> Local development, testing <code>streamable_http</code> <code>POST /mcp</code>, <code>GET /health</code> <code>MCPServerStreamableHTTP</code> Production HTTP deployments <code>worker</code> <code>POST /mcp</code>, <code>GET /health</code> <code>MCPServerStreamableHTTP</code> HTTP mode using streamable HTTP <p>Both <code>streamable_http</code> and <code>worker</code> modes now use FastMCP's native streamable HTTP implementation for full MCP protocol compliance. The SSE-based transport has been deprecated.</p>"},{"location":"tutorials/pydantic-ai-integration/#working-examples-for-pydantic-ai","title":"Working Examples for Pydantic AI","text":"<p>Here are the recommended configurations for connecting Pydantic AI to BioMCP:</p>"},{"location":"tutorials/pydantic-ai-integration/#1-stdio-mode-recommended-for-local-development","title":"1. STDIO Mode (Recommended for Local Development)","text":"<p>This mode runs BioMCP as a subprocess without needing an HTTP server:</p> <pre><code>import asyncio\nimport os\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStdio\n\nasync def main():\n    # Run BioMCP as a subprocess\n    server = MCPServerStdio(\n        \"python\",\n        args=[\"-m\", \"biomcp\", \"run\", \"--mode\", \"stdio\"]\n    )\n\n    # Use a real LLM model (requires API key)\n    model = \"openai:gpt-4o-mini\"  # Set OPENAI_API_KEY environment variable\n\n    agent = Agent(model, toolsets=[server])\n\n    async with agent:\n        # Example query that returns real results\n        result = await agent.run(\n            \"Find articles about BRAF V600E mutations in melanoma\"\n        )\n        print(result.output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#2-streamable-http-mode-recommended-for-production","title":"2. Streamable HTTP Mode (Recommended for Production)","text":"<p>For production deployments with proper MCP compliance (requires pydantic-ai&gt;=0.6.9):</p> <pre><code>import asyncio\nimport os\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\n\nasync def main():\n    # Connect to the /mcp endpoint\n    server = MCPServerStreamableHTTP(\"http://localhost:8000/mcp\")\n\n    # Use a real LLM model (requires API key)\n    # Options: openai:gpt-4o-mini, anthropic:claude-3-haiku-20240307, groq:llama-3.1-70b-versatile\n    model = \"openai:gpt-4o-mini\"  # Set OPENAI_API_KEY environment variable\n\n    agent = Agent(model, toolsets=[server])\n\n    async with agent:\n        # Example queries that return real results\n        result = await agent.run(\n            \"Find recent articles about BRAF V600E in melanoma\"\n        )\n        print(result.output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>To run the server for this mode:</p> <pre><code># Using streamable_http mode (recommended)\nbiomcp run --mode streamable_http --host 0.0.0.0 --port 8000\n\n# Or using worker mode (also uses streamable HTTP)\nbiomcp run --mode worker --host 0.0.0.0 --port 8000\n\n# Or using Docker\ndocker run -p 8000:8000 genomoncology/biomcp:latest biomcp run --mode streamable_http\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#3-direct-json-rpc-mode-alternative-http","title":"3. Direct JSON-RPC Mode (Alternative HTTP)","text":"<p>You can also use the JSON-RPC endpoint at the root path:</p> <pre><code>import httpx\nimport json\n\nasync def call_biomcp_jsonrpc(method, params=None):\n    \"\"\"Direct JSON-RPC calls to BioMCP\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"http://localhost:8000/\",\n            json={\n                \"jsonrpc\": \"2.0\",\n                \"id\": 1,\n                \"method\": method,\n                \"params\": params or {}\n            }\n        )\n        return response.json()\n\n# Example usage\nresult = await call_biomcp_jsonrpc(\"tools/list\")\nprint(\"Available tools:\", result)\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"tutorials/pydantic-ai-integration/#issue-testmodel-returns-empty-results","title":"Issue: TestModel returns empty results","text":"<p>Cause: TestModel is a mock model for testing - it doesn't execute real searches.</p> <p>Solution: This is expected behavior. TestModel returns <code>{\"search\":{\"results\":[]}}</code> by design. To get real results:</p> <ul> <li>Use a real LLM model with API key: <code>Agent(\"openai:gpt-4o-mini\", toolsets=[server])</code></li> <li>Use Groq for free tier: Sign up at console.groq.com, get API key, use <code>Agent(\"groq:llama-3.1-70b-versatile\", toolsets=[server])</code></li> <li>Or use BioMCP CLI directly (no API key needed): <code>biomcp article search --gene BRAF</code></li> </ul>"},{"location":"tutorials/pydantic-ai-integration/#issue-connection-refused","title":"Issue: Connection refused","text":"<p>Solution: Ensure the server is running with the correct host binding:</p> <pre><code>biomcp run --mode worker --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#issue-cors-errors-in-browser","title":"Issue: CORS errors in browser","text":"<p>Solution: The server includes CORS headers by default. If you still have issues, check if a proxy or firewall is blocking the headers.</p>"},{"location":"tutorials/pydantic-ai-integration/#issue-health-endpoint-returns-404","title":"Issue: Health endpoint returns 404","text":"<p>Solution: The health endpoint is available at <code>GET /health</code> in both worker and streamable_http modes. Ensure you're using the latest version:</p> <pre><code>pip install --upgrade biomcp-python\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#issue-sse-endpoint-not-found","title":"Issue: SSE endpoint not found","text":"<p>Solution: The SSE transport has been deprecated. Use streamable HTTP mode instead:</p> <pre><code># Old (deprecated)\n# from pydantic_ai.mcp import MCPServerSSE\n# server = MCPServerSSE(\"http://localhost:8000/sse\")\n\n# New (recommended)\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\nserver = MCPServerStreamableHTTP(\"http://localhost:8000/mcp\")\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#testing-your-connection","title":"Testing Your Connection","text":"<p>Here are test scripts to verify your setup for different modes:</p>"},{"location":"tutorials/pydantic-ai-integration/#testing-stdio-mode-local-development","title":"Testing STDIO Mode (Local Development)","text":"<pre><code>import asyncio\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.mcp import MCPServerStdio\n\nasync def test_stdio_connection():\n    # Use TestModel to verify connection (won't return real data)\n    server = MCPServerStdio(\n        \"python\",\n        args=[\"-m\", \"biomcp\", \"run\", \"--mode\", \"stdio\"]\n    )\n\n    agent = Agent(\n        model=TestModel(call_tools=[\"search\"]),\n        toolsets=[server]\n    )\n\n    async with agent:\n        print(f\"\u2705 STDIO Connection successful!\")\n\n        # Test a simple search (returns mock data)\n        result = await agent.run(\"Test search for BRAF\")\n        print(f\"\u2705 Tool execution successful!\")\n        print(f\"Note: TestModel returns mock data: {result.output}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test_stdio_connection())\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#testing-streamable-http-mode-production","title":"Testing Streamable HTTP Mode (Production)","text":"<p>First, ensure the server is running:</p> <pre><code># Start the server in a separate terminal\nbiomcp run --mode streamable_http --port 8000\n</code></pre> <p>Then test the connection:</p> <pre><code>import asyncio\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\n\nasync def test_streamable_http_connection():\n    # Connect to the running server's /mcp endpoint\n    server = MCPServerStreamableHTTP(\"http://localhost:8000/mcp\")\n\n    # Create agent with TestModel (no API keys needed)\n    agent = Agent(\n        model=TestModel(call_tools=[\"search\"]),\n        toolsets=[server]\n    )\n\n    async with agent:\n        print(\"\u2705 Streamable HTTP Connection successful!\")\n\n        # Test a query\n        result = await agent.run(\"Find articles about BRAF\")\n        print(\"\u2705 Tool execution successful!\")\n        if result.output:\n            print(f\"\ud83d\udcc4 Received {len(result.output)} characters of output\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test_streamable_http_connection())\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#important-understanding-testmodel-vs-real-results","title":"Important: Understanding TestModel vs Real Results","text":"<p>TestModel is a MOCK model - it doesn't execute real searches:</p> <ul> <li>TestModel simulates tool calls but returns empty results: <code>{\"search\":{\"results\":[]}}</code></li> <li>This is by design - TestModel is for testing the connection flow, not getting real data</li> <li>To get actual search results, you need to use a real LLM model</li> </ul> <p>To get real results:</p> <ol> <li>Use a real LLM model (requires API key):</li> </ol> <pre><code># Replace TestModel with a real model\nagent = Agent(\n    \"openai:gpt-4o-mini\",  # or \"anthropic:claude-3-haiku\"\n    toolsets=[server]\n)\n</code></pre> <ol> <li>Use BioMCP CLI directly (no API key needed):</li> </ol> <pre><code># Get real search results via CLI\nbiomcp article search --gene BRAF --disease melanoma --json\n</code></pre> <ol> <li>For integration testing without API keys:</li> </ol> <pre><code>import subprocess\nimport json\n\n# Use CLI to get real results\nresult = subprocess.run(\n    [\"biomcp\", \"article\", \"search\", \"--gene\", \"BRAF\", \"--json\"],\n    capture_output=True,\n    text=True\n)\ndata = json.loads(result.stdout)\nprint(f\"Found {len(data['articles'])} real articles\")\n</code></pre> <p>Note: The Streamable HTTP tests in our test suite verify this functionality works correctly. If you encounter connection issues, ensure:</p> <ol> <li>The server is fully started before connecting</li> <li>You're using pydantic-ai &gt;= 0.6.9</li> <li>The port is not blocked by a firewall</li> </ol>"},{"location":"tutorials/pydantic-ai-integration/#complete-working-example-with-real-results","title":"Complete Working Example with Real Results","text":"<p>Here's a complete example that connects to BioMCP via Streamable HTTP and retrieves real biomedical data:</p> <pre><code>#!/usr/bin/env python3\n\"\"\"\nWorking example of Pydantic AI + BioMCP with Streamable HTTP.\nThis will get real search results from your BioMCP server.\n\nRequires one of:\n- export OPENAI_API_KEY='your-key'\n- export ANTHROPIC_API_KEY='your-key'\n- export GROQ_API_KEY='your-key'  (free tier at console.groq.com)\n\"\"\"\n\nimport asyncio\nimport os\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\n\n\nasync def main():\n    # Server configuration\n    SERVER_URL = \"http://localhost:8000/mcp\"  # Adjust port as needed\n\n    # Detect which API key is available\n    if os.getenv(\"OPENAI_API_KEY\"):\n        model = \"openai:gpt-4o-mini\"\n        print(\"Using OpenAI GPT-4o-mini\")\n    elif os.getenv(\"ANTHROPIC_API_KEY\"):\n        model = \"anthropic:claude-3-haiku-20240307\"\n        print(\"Using Claude 3 Haiku\")\n    elif os.getenv(\"GROQ_API_KEY\"):\n        model = \"groq:llama-3.1-70b-versatile\"  # Free tier available\n        print(\"Using Groq Llama 3.1\")\n    else:\n        print(\"No API key found! Please set OPENAI_API_KEY, ANTHROPIC_API_KEY, or GROQ_API_KEY\")\n        return\n\n    # Connect to BioMCP server\n    server = MCPServerStreamableHTTP(SERVER_URL)\n    agent = Agent(model, toolsets=[server])\n\n    async with agent:\n        print(\"Connected to BioMCP!\\n\")\n\n        # Search for articles (includes cBioPortal data for genes)\n        result = await agent.run(\n            \"Search for 2 recent articles about BRAF V600E mutations in melanoma. \"\n            \"List the title and first author for each.\"\n        )\n        print(\"Article Search Results:\")\n        print(result.output)\n        print(\"\\n\" + \"=\"*60 + \"\\n\")\n\n        # Search for clinical trials\n        result2 = await agent.run(\n            \"Find 2 clinical trials for melanoma with BRAF mutations \"\n            \"that are currently recruiting. Show NCT ID and title.\"\n        )\n        print(\"Clinical Trial Results:\")\n        print(result2.output)\n        print(\"\\n\" + \"=\"*60 + \"\\n\")\n\n        # Search for variant information\n        result3 = await agent.run(\n            \"Search for pathogenic TP53 variants. Show 2 examples.\"\n        )\n        print(\"Variant Search Results:\")\n        print(result3.output)\n\n\nif __name__ == \"__main__\":\n    # Start your BioMCP server first:\n    # biomcp run --mode streamable_http --port 8000\n\n    asyncio.run(main())\n</code></pre> <p>Running this example:</p> <ol> <li>Start the BioMCP server:</li> </ol> <pre><code>biomcp run --mode streamable_http --port 8000\n</code></pre> <ol> <li>Set your API key (choose one):</li> </ol> <pre><code>export OPENAI_API_KEY='your-key'        # OpenAI\nexport ANTHROPIC_API_KEY='your-key'     # Anthropic\nexport GROQ_API_KEY='your-key'          # Groq (free tier available)\n</code></pre> <ol> <li>Run the script:</li> </ol> <pre><code>python biomcp_example.py\n</code></pre> <p>This will return actual biomedical data from PubMed, ClinicalTrials.gov, and variant databases!</p>"},{"location":"tutorials/pydantic-ai-integration/#using-biomcp-tools-with-pydantic-ai","title":"Using BioMCP Tools with Pydantic AI","text":"<p>Once connected, you can use BioMCP's biomedical research tools:</p> <pre><code>import os\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStdio\n\nasync def biomedical_research_example():\n    server = MCPServerStdio(\n        \"python\",\n        args=[\"-m\", \"biomcp\", \"run\", \"--mode\", \"stdio\"]\n    )\n\n    # Choose model based on available API key\n    if os.getenv(\"OPENAI_API_KEY\"):\n        model = \"openai:gpt-4o-mini\"\n    elif os.getenv(\"GROQ_API_KEY\"):\n        model = \"groq:llama-3.1-70b-versatile\"  # Free tier available\n    else:\n        raise ValueError(\"Please set OPENAI_API_KEY or GROQ_API_KEY\")\n\n    agent = Agent(model, toolsets=[server])\n\n    async with agent:\n        # Important: Always use the think tool first for complex queries\n        result = await agent.run(\"\"\"\n            First use the think tool to plan your approach, then:\n            1. Search for articles about immunotherapy resistance in melanoma\n            2. Find clinical trials testing combination therapies\n            3. Look up genetic markers associated with treatment response\n        \"\"\")\n\n        print(result.output)\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#production-deployment-considerations","title":"Production Deployment Considerations","text":"<p>For production deployments:</p> <ol> <li>Use STDIO mode for local development or when running in containerized environments where the agent and BioMCP can run in the same container</li> <li>Use Streamable HTTP mode when you need HTTP-based communication between separate services (recommended for production)</li> <li>Both <code>worker</code> and <code>streamable_http</code> modes now use the same underlying streamable HTTP transport</li> <li>Require a real LLM model - TestModel won't work for production as it only returns mock data</li> <li>Consider API costs - Use cheaper models like <code>gpt-4o-mini</code> or Groq's free tier for testing</li> <li>Implement proper error handling and retry logic for network failures</li> <li>Set appropriate timeouts for long-running biomedical searches</li> <li>Cache frequently accessed data to reduce API calls to backend services</li> </ol>"},{"location":"tutorials/pydantic-ai-integration/#important-notes","title":"Important Notes","text":"<ul> <li>Real LLM required for results: TestModel is only for testing connections - use a real LLM (OpenAI, Anthropic, Groq) to get actual biomedical data</li> <li>SSE transport is deprecated: The old SSE-based transport (<code>/sse</code> endpoint) has been removed in favor of streamable HTTP</li> <li>Worker mode now uses streamable HTTP: The <code>worker</code> mode has been updated to use streamable HTTP transport internally</li> <li>Health endpoint: The <code>/health</code> endpoint is available in both HTTP modes for monitoring</li> <li>Free tier option: Groq offers a free API tier at console.groq.com for testing without costs</li> </ul>"},{"location":"tutorials/pydantic-ai-integration/#migration-guide-from-sse-to-streamable-http","title":"Migration Guide from SSE to Streamable HTTP","text":"<p>If you're upgrading from an older version that used SSE transport:</p>"},{"location":"tutorials/pydantic-ai-integration/#code-changes","title":"Code Changes","text":"<pre><code># Old code (deprecated)\nfrom pydantic_ai.mcp import MCPServerSSE\nserver = MCPServerSSE(\"http://localhost:8000/sse\")\n\n# New code (recommended)\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\nserver = MCPServerStreamableHTTP(\"http://localhost:8000/mcp\")\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#server-command-changes","title":"Server Command Changes","text":"<pre><code># Old: SSE endpoints were at /sse\n# biomcp run --mode worker  # Used to expose /sse endpoint\n\n# New: Both modes now use /mcp endpoint with streamable HTTP\nbiomcp run --mode worker         # Now uses /mcp with streamable HTTP\nbiomcp run --mode streamable_http # Also uses /mcp with streamable HTTP\n</code></pre>"},{"location":"tutorials/pydantic-ai-integration/#key-differences","title":"Key Differences","text":"<ol> <li>Endpoint Change: <code>/sse</code> \u2192 <code>/mcp</code></li> <li>Protocol: Server-Sent Events \u2192 Streamable HTTP (supports both JSON and SSE)</li> <li>Client Library: <code>MCPServerSSE</code> \u2192 <code>MCPServerStreamableHTTP</code></li> <li>Compatibility: Requires pydantic-ai &gt;= 0.6.9 for <code>MCPServerStreamableHTTP</code></li> </ol>"},{"location":"tutorials/pydantic-ai-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Review the MCP Tools Reference for available biomedical research tools</li> <li>See CLI Guide for more server configuration options</li> <li>Check Transport Protocol Guide for detailed protocol information</li> </ul>"},{"location":"tutorials/pydantic-ai-integration/#support","title":"Support","text":"<p>If you continue to experience issues:</p> <ol> <li>Verify your BioMCP version: <code>biomcp --version</code></li> <li>Check server logs for error messages</li> <li>Open an issue on GitHub with:</li> <li>Your BioMCP version</li> <li>Server startup command</li> <li>Complete error messages</li> <li>Minimal reproduction code</li> </ol>"},{"location":"tutorials/remote-connection/","title":"Connecting to Remote BioMCP","text":"<p>This guide walks you through connecting Claude to the remote BioMCP server, providing instant access to biomedical research tools without any local installation.</p>"},{"location":"tutorials/remote-connection/#overview","title":"Overview","text":"<p>The remote BioMCP server (https://remote.biomcp.org/mcp) provides cloud-hosted access to all BioMCP tools. This eliminates the need for local installation while maintaining full functionality.</p> <p>!!! success \"Benefits of Remote Connection\" - No Installation Required: Start using BioMCP immediately - Always Up-to-Date: Automatically receive the latest features and improvements - Cloud-Powered: Leverage server-side resources for faster searches - Secure Authentication: Uses Google OAuth for secure access</p> <p>Privacy Notice</p> <p>We log user emails and queries to improve the service. All data is handled according to our privacy policy.</p>"},{"location":"tutorials/remote-connection/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"tutorials/remote-connection/#step-1-access-custom-connectors","title":"Step 1: Access Custom Connectors","text":"<p>Navigate to the Custom Connectors section in your Claude interface. This is where you'll configure the connection to BioMCP.</p> <p></p>"},{"location":"tutorials/remote-connection/#step-2-add-custom-connector","title":"Step 2: Add Custom Connector","text":"<p>Click the Add Custom Connector button and enter the following details:</p> <ul> <li>Name: BioMCP</li> <li>URL: <code>https://remote.biomcp.org/mcp</code></li> </ul> <p></p>"},{"location":"tutorials/remote-connection/#step-3-verify-connector-is-enabled","title":"Step 3: Verify Connector is Enabled","text":"<p>After adding, you should see BioMCP listed with an \"Enabled\" status. This confirms the connector was added successfully.</p> <p></p>"},{"location":"tutorials/remote-connection/#step-4-connect-to-biomcp","title":"Step 4: Connect to BioMCP","text":"<p>Return to the main Connectors section where you'll now see BioMCP available for connection. Click the Connect button.</p> <p></p>"},{"location":"tutorials/remote-connection/#step-5-authenticate-with-google","title":"Step 5: Authenticate with Google","text":"<p>You'll be redirected to Google OAuth for authentication. Sign in with any valid Google account. This step ensures secure access to the service.</p> <p></p> <p>!!! note \"Authentication\" - Any valid Google account works - Your email is logged for service improvement - Authentication is handled securely through Google OAuth</p>"},{"location":"tutorials/remote-connection/#step-6-connection-success","title":"Step 6: Connection Success","text":"<p>Once authenticated, you'll see a successful connection message displaying the available tool count. As of January 2025, there are 23 tools available (this number may increase as new features are added).</p> <p></p>"},{"location":"tutorials/remote-connection/#verifying-your-connection","title":"Verifying Your Connection","text":"<p>After successful connection, you can verify BioMCP is working by asking Claude:</p> <pre><code>What tools do you have available from BioMCP?\n</code></pre> <p>Claude should list the available tools including:</p> <ul> <li>Article search and retrieval (PubMed/PubTator3)</li> <li>Clinical trials search (ClinicalTrials.gov and NCI)</li> <li>Variant analysis (MyVariant.info)</li> <li>Gene, drug, and disease information</li> <li>Sequential thinking for complex research</li> </ul>"},{"location":"tutorials/remote-connection/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/remote-connection/#connection-failed","title":"Connection Failed","text":"<ul> <li>Ensure you entered the URL exactly as shown: <code>https://remote.biomcp.org/mcp</code></li> <li>Check your internet connection</li> <li>Try disconnecting and reconnecting</li> </ul>"},{"location":"tutorials/remote-connection/#authentication-issues","title":"Authentication Issues","text":"<ul> <li>Make sure you're using a valid Google account</li> <li>Clear your browser cache if authentication hangs</li> <li>Try using a different browser if issues persist</li> </ul>"},{"location":"tutorials/remote-connection/#tools-not-available","title":"Tools Not Available","text":"<ul> <li>Disconnect and reconnect to BioMCP</li> <li>Refresh your Claude session</li> <li>Contact support if tools remain unavailable</li> </ul>"},{"location":"tutorials/remote-connection/#next-steps","title":"Next Steps","text":"<p>Now that you're connected to BioMCP, you can:</p> <ol> <li>Search biomedical literature: \"Find recent papers on BRAF mutations in melanoma\"</li> <li>Analyze clinical trials: \"What trials are recruiting for lung cancer with EGFR mutations?\"</li> <li>Interpret variants: \"What is the clinical significance of TP53 p.R273H?\"</li> <li>Explore drug information: \"Tell me about pembrolizumab's mechanism and indications\"</li> </ol>"},{"location":"tutorials/remote-connection/#support","title":"Support","text":"<p>For issues or questions about the remote BioMCP connection:</p> <ul> <li>GitHub Issues: https://github.com/genomoncology/biomcp/issues</li> <li>Documentation: https://biomcp.org</li> </ul>"},{"location":"user-guides/01-command-line-interface/","title":"Command Line Interface Reference","text":"<p>BioMCP provides a comprehensive command-line interface for biomedical data retrieval and analysis. This guide covers all available commands, options, and usage patterns.</p>"},{"location":"user-guides/01-command-line-interface/#installation","title":"Installation","text":"<pre><code># Using uv (recommended)\nuv tool install biomcp\n\n# Using pip\npip install biomcp-python\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#global-options","title":"Global Options","text":"<p>These options work with all commands:</p> <pre><code>biomcp [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --version  Show the version and exit\n  --help     Show help message and exit\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#commands-overview","title":"Commands Overview","text":"Domain Commands Purpose article search, get Search and retrieve biomedical literature trial search, get Find and fetch clinical trial information variant search, get, predict Analyze genetic variants and predict effects gene get Retrieve gene information and annotations drug get Look up drug/chemical information disease get Get disease definitions and synonyms organization search Search NCI organization database intervention search Find interventions (drugs, devices, procedures) biomarker search Search biomarkers used in trials health check Monitor API status and system health"},{"location":"user-guides/01-command-line-interface/#article-commands","title":"Article Commands","text":"<p>For practical examples and workflows, see How to Find Articles and cBioPortal Data.</p>"},{"location":"user-guides/01-command-line-interface/#article-search","title":"article search","text":"<p>Search PubMed/PubTator3 for biomedical literature with automatic cBioPortal integration.</p> <pre><code>biomcp article search [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--gene, -g TEXT</code>: Gene symbol(s) to search for</li> <li><code>--variant, -v TEXT</code>: Genetic variant(s) to search for</li> <li><code>--disease, -d TEXT</code>: Disease/condition(s) to search for</li> <li><code>--chemical, -c TEXT</code>: Chemical/drug name(s) to search for</li> <li><code>--keyword, -k TEXT</code>: Keyword(s) to search for (supports OR with <code>|</code>)</li> <li><code>--pmid TEXT</code>: Specific PubMed ID(s) to retrieve</li> <li><code>--limit INTEGER</code>: Maximum results to return (default: 10)</li> <li><code>--no-preprints</code>: Exclude preprints from results</li> <li><code>--no-cbioportal</code>: Disable automatic cBioPortal integration</li> <li><code>--format [json|markdown]</code>: Output format (default: markdown)</li> </ul> <p>Examples:</p> <pre><code># Basic gene search with automatic cBioPortal data\nbiomcp article search --gene BRAF --disease melanoma\n\n# Multiple filters\nbiomcp article search --gene EGFR --disease \"lung cancer\" --chemical erlotinib\n\n# OR logic in keywords (find different variant notations)\nbiomcp article search --gene PTEN --keyword \"R173|Arg173|p.R173\"\n\n# Exclude preprints\nbiomcp article search --gene TP53 --no-preprints --limit 20\n\n# JSON output for programmatic use\nbiomcp article search --gene KRAS --format json &gt; results.json\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#article-get","title":"article get","text":"<p>Retrieve a specific article by PubMed ID or DOI.</p> <pre><code>biomcp article get IDENTIFIER\n</code></pre> <p>Arguments:</p> <ul> <li><code>IDENTIFIER</code>: PubMed ID (e.g., \"38768446\") or DOI (e.g., \"10.1101/2024.01.20.23288905\")</li> </ul> <p>Examples:</p> <pre><code># Get article by PubMed ID\nbiomcp article get 38768446\n\n# Get preprint by DOI\nbiomcp article get \"10.1101/2024.01.20.23288905\"\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#trial-commands","title":"Trial Commands","text":"<p>For practical examples and workflows, see How to Find Trials with NCI and BioThings.</p>"},{"location":"user-guides/01-command-line-interface/#trial-search","title":"trial search","text":"<p>Search ClinicalTrials.gov or NCI CTS API for clinical trials.</p> <pre><code>biomcp trial search [OPTIONS]\n</code></pre> <p>Basic Options:</p> <ul> <li><code>--condition TEXT</code>: Disease/condition to search</li> <li><code>--intervention TEXT</code>: Treatment/intervention to search</li> <li><code>--term TEXT</code>: General search terms</li> <li><code>--nct-id TEXT</code>: Specific NCT ID(s)</li> <li><code>--limit INTEGER</code>: Maximum results (default: 10)</li> <li><code>--source [ctgov|nci]</code>: Data source (default: ctgov)</li> <li><code>--api-key TEXT</code>: API key for NCI source</li> </ul> <p>Study Characteristics:</p> <ul> <li><code>--status TEXT</code>: Trial status (RECRUITING, ACTIVE_NOT_RECRUITING, etc.)</li> <li><code>--study-type TEXT</code>: Type of study (INTERVENTIONAL, OBSERVATIONAL)</li> <li><code>--phase TEXT</code>: Trial phase (EARLY_PHASE1, PHASE1, PHASE2, PHASE3, PHASE4)</li> <li><code>--study-purpose TEXT</code>: Primary purpose (TREATMENT, PREVENTION, etc.)</li> <li><code>--age-group TEXT</code>: Target age group (CHILD, ADULT, OLDER_ADULT)</li> </ul> <p>Location Options:</p> <ul> <li><code>--country TEXT</code>: Country name</li> <li><code>--state TEXT</code>: State/province</li> <li><code>--city TEXT</code>: City name</li> <li><code>--latitude FLOAT</code>: Geographic latitude</li> <li><code>--longitude FLOAT</code>: Geographic longitude</li> <li><code>--distance INTEGER</code>: Search radius in miles</li> </ul> <p>Advanced Filters:</p> <ul> <li><code>--start-date TEXT</code>: Trial start date (YYYY-MM-DD)</li> <li><code>--end-date TEXT</code>: Trial end date (YYYY-MM-DD)</li> <li><code>--intervention-type TEXT</code>: Type of intervention</li> <li><code>--sponsor-type TEXT</code>: Type of sponsor</li> <li><code>--is-fda-regulated</code>: FDA-regulated trials only</li> <li><code>--expanded-access</code>: Trials offering expanded access</li> </ul> <p>Examples:</p> <pre><code># Find recruiting melanoma trials\nbiomcp trial search --condition melanoma --status RECRUITING\n\n# Search by location (requires coordinates)\nbiomcp trial search --condition \"lung cancer\" \\\n  --latitude 41.4993 --longitude -81.6944 --distance 50\n\n# Use NCI source with advanced filters\nbiomcp trial search --condition melanoma --source nci \\\n  --required-mutations \"BRAF V600E\" --allow-brain-mets true \\\n  --api-key YOUR_KEY\n\n# Multiple filters\nbiomcp trial search --condition \"breast cancer\" \\\n  --intervention \"CDK4/6 inhibitor\" --phase PHASE3 \\\n  --status RECRUITING --country \"United States\"\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#trial-get","title":"trial get","text":"<p>Retrieve detailed information about a specific clinical trial.</p> <pre><code>biomcp trial get NCT_ID [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>NCT_ID</code>: Clinical trial identifier (e.g., NCT03006926)</li> </ul> <p>Options:</p> <ul> <li><code>--include TEXT</code>: Specific sections to include (Protocol, Locations, References, Outcomes)</li> <li><code>--source [ctgov|nci]</code>: Data source (default: ctgov)</li> <li><code>--api-key TEXT</code>: API key for NCI source</li> </ul> <p>Examples:</p> <pre><code># Get basic trial information\nbiomcp trial get NCT03006926\n\n# Get specific sections\nbiomcp trial get NCT03006926 --include Protocol --include Locations\n\n# Use NCI source\nbiomcp trial get NCT04280705 --source nci --api-key YOUR_KEY\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#variant-commands","title":"Variant Commands","text":"<p>For practical examples and workflows, see:</p> <ul> <li>Get Comprehensive Variant Annotations</li> <li>Predict Variant Effects with AlphaGenome</li> </ul>"},{"location":"user-guides/01-command-line-interface/#variant-search","title":"variant search","text":"<p>Search MyVariant.info for genetic variant annotations.</p> <pre><code>biomcp variant search [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--gene TEXT</code>: Gene symbol</li> <li><code>--hgvs TEXT</code>: HGVS notation</li> <li><code>--rsid TEXT</code>: dbSNP rsID</li> <li><code>--chromosome TEXT</code>: Chromosome</li> <li><code>--start INTEGER</code>: Genomic start position</li> <li><code>--end INTEGER</code>: Genomic end position</li> <li><code>--assembly [hg19|hg38]</code>: Genome assembly (default: hg38)</li> <li><code>--significance TEXT</code>: Clinical significance</li> <li><code>--min-frequency FLOAT</code>: Minimum allele frequency</li> <li><code>--max-frequency FLOAT</code>: Maximum allele frequency</li> <li><code>--min-cadd FLOAT</code>: Minimum CADD score</li> <li><code>--polyphen TEXT</code>: PolyPhen prediction</li> <li><code>--sift TEXT</code>: SIFT prediction</li> <li><code>--sources TEXT</code>: Data sources to include</li> <li><code>--limit INTEGER</code>: Maximum results (default: 10)</li> <li><code>--no-cbioportal</code>: Disable cBioPortal integration</li> </ul> <p>Note: When searching by gene, OncoKB clinical actionability data is automatically included for BRAF, ROS1, and TP53 (or all genes if ONCOKB_TOKEN is set).</p> <p>Examples:</p> <pre><code># Search pathogenic BRCA1 variants\nbiomcp variant search --gene BRCA1 --significance pathogenic\n\n# Search by HGVS notation\nbiomcp variant search --hgvs \"NM_007294.4:c.5266dupC\"\n\n# Filter by frequency and prediction scores\nbiomcp variant search --gene TP53 --max-frequency 0.01 \\\n  --min-cadd 20 --polyphen possibly_damaging\n\n# Search genomic region\nbiomcp variant search --chromosome 7 --start 140753336 --end 140753337\n\n# OncoKB integration (uses free demo server for BRAF, ROS1, TP53 automatically)\nbiomcp variant search --gene BRAF\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#variant-get","title":"variant get","text":"<p>Retrieve detailed information about a specific variant. The <code>--include-external</code> flag also retrieves clinical actionability data from OncoKB for variants in BRAF, ROS1, and TP53 (or all genes if ONCOKB_TOKEN is set).</p> <pre><code>biomcp variant get VARIANT_ID [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>VARIANT_ID</code>: Variant identifier (HGVS, rsID, or genomic)</li> </ul> <p>Options:</p> <ul> <li><code>--include-external / --no-external</code>: Include annotations from external sources (TCGA, 1000 Genomes, cBioPortal, OncoKB) (default: true)</li> <li><code>--json, -j</code>: Output in JSON format</li> <li><code>--assembly TEXT</code>: Genome assembly (hg19 or hg38, default: hg19)</li> </ul> <p>Examples:</p> <pre><code># Get variant by HGVS (defaults to hg19)\nbiomcp variant get \"NM_007294.4:c.5266dupC\"\n\n# Get variant by rsID\nbiomcp variant get rs121913529\n\n# Specify hg38 assembly\nbiomcp variant get rs113488022 --assembly hg38\n\n# JSON output with hg38\nbiomcp variant get rs113488022 --json --assembly hg38\n\n# Without external annotations\nbiomcp variant get rs113488022 --no-external\n\n# Get variant by genomic coordinates\nbiomcp variant get \"chr17:g.43082434G&gt;A\"\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#variant-predict","title":"variant predict","text":"<p>Predict variant effects using Google DeepMind's AlphaGenome (requires API key).</p> <pre><code>biomcp variant predict CHROMOSOME POSITION REFERENCE ALTERNATE [OPTIONS]\n</code></pre> <p>Arguments:</p> <ul> <li><code>CHROMOSOME</code>: Chromosome (e.g., chr7)</li> <li><code>POSITION</code>: Genomic position</li> <li><code>REFERENCE</code>: Reference allele</li> <li><code>ALTERNATE</code>: Alternate allele</li> </ul> <p>Options:</p> <ul> <li><code>--tissue TEXT</code>: Tissue type(s) using UBERON ontology</li> <li><code>--interval INTEGER</code>: Analysis window size (default: 20000)</li> <li><code>--api-key TEXT</code>: AlphaGenome API key</li> </ul> <p>Examples:</p> <pre><code># Basic prediction (requires ALPHAGENOME_API_KEY env var)\nbiomcp variant predict chr7 140753336 A T\n\n# Tissue-specific prediction\nbiomcp variant predict chr7 140753336 A T \\\n  --tissue UBERON:0002367  # breast tissue\n\n# With per-request API key\nbiomcp variant predict chr7 140753336 A T --api-key YOUR_KEY\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#genedrugdisease-commands","title":"Gene/Drug/Disease Commands","text":"<p>For practical examples using BioThings integration, see How to Find Trials with NCI and BioThings.</p>"},{"location":"user-guides/01-command-line-interface/#gene-get","title":"gene get","text":"<p>Retrieve gene information from MyGene.info.</p> <pre><code>biomcp gene get GENE_NAME\n</code></pre> <p>Examples:</p> <pre><code># Get gene information\nbiomcp gene get TP53\nbiomcp gene get BRAF\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#drug-get","title":"drug get","text":"<p>Retrieve drug/chemical information from MyChem.info.</p> <pre><code>biomcp drug get DRUG_NAME\n</code></pre> <p>Examples:</p> <pre><code># Get drug information\nbiomcp drug get imatinib\nbiomcp drug get pembrolizumab\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#disease-get","title":"disease get","text":"<p>Retrieve disease information from MyDisease.info.</p> <pre><code>biomcp disease get DISEASE_NAME\n</code></pre> <p>Examples:</p> <pre><code># Get disease information\nbiomcp disease get melanoma\nbiomcp disease get \"non-small cell lung cancer\"\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#nci-specific-commands","title":"NCI-Specific Commands","text":"<p>These commands require an NCI API key. For setup instructions and usage examples, see:</p> <ul> <li>Authentication and API Keys</li> <li>How to Find Trials with NCI and BioThings</li> </ul>"},{"location":"user-guides/01-command-line-interface/#organization-search","title":"organization search","text":"<p>Search NCI's organization database.</p> <pre><code>biomcp organization search [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--name TEXT</code>: Organization name</li> <li><code>--city TEXT</code>: City location</li> <li><code>--state TEXT</code>: State/province</li> <li><code>--country TEXT</code>: Country</li> <li><code>--org-type TEXT</code>: Organization type</li> <li><code>--api-key TEXT</code>: NCI API key</li> </ul> <p>Example:</p> <pre><code>biomcp organization search --name \"MD Anderson\" \\\n  --city Houston --state TX --api-key YOUR_KEY\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#intervention-search","title":"intervention search","text":"<p>Search NCI's intervention database.</p> <pre><code>biomcp intervention search [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--name TEXT</code>: Intervention name</li> <li><code>--intervention-type TEXT</code>: Type (Drug, Device, Procedure, etc.)</li> <li><code>--api-key TEXT</code>: NCI API key</li> </ul> <p>Example:</p> <pre><code>biomcp intervention search --name pembrolizumab \\\n  --intervention-type Drug --api-key YOUR_KEY\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#biomarker-search","title":"biomarker search","text":"<p>Search biomarkers used in clinical trials.</p> <pre><code>biomcp biomarker search [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--gene TEXT</code>: Gene symbol</li> <li><code>--biomarker-type TEXT</code>: Type of biomarker</li> <li><code>--api-key TEXT</code>: NCI API key</li> </ul> <p>Example:</p> <pre><code>biomcp biomarker search --gene EGFR \\\n  --biomarker-type mutation --api-key YOUR_KEY\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#health-command","title":"Health Command","text":"<p>For monitoring API status before bulk operations, see the Performance Optimizations Guide.</p>"},{"location":"user-guides/01-command-line-interface/#health-check","title":"health check","text":"<p>Monitor API endpoints and system health.</p> <pre><code>biomcp health check [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--apis-only</code>: Check only API endpoints</li> <li><code>--system-only</code>: Check only system resources</li> <li><code>--verbose, -v</code>: Show detailed information</li> </ul> <p>Examples:</p> <pre><code># Full health check\nbiomcp health check\n\n# Check APIs only\nbiomcp health check --apis-only\n\n# Detailed system check\nbiomcp health check --system-only --verbose\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#output-formats","title":"Output Formats","text":"<p>Most commands support both human-readable markdown and machine-readable JSON output:</p> <pre><code># Default markdown output\nbiomcp article search --gene BRAF\n\n# JSON for programmatic use\nbiomcp article search --gene BRAF --format json\n\n# Save to file\nbiomcp trial search --condition melanoma --format json &gt; trials.json\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#environment-variables","title":"Environment Variables","text":"<p>Configure default behavior with environment variables:</p> <pre><code># API Keys\nexport NCI_API_KEY=\"your-nci-key\"\nexport ALPHAGENOME_API_KEY=\"your-alphagenome-key\"\nexport CBIO_TOKEN=\"your-cbioportal-token\"\nexport ONCOKB_TOKEN=\"your-oncokb-token\"\n\n# Logging\nexport BIOMCP_LOG_LEVEL=\"DEBUG\"\nexport BIOMCP_CACHE_DIR=\"/path/to/cache\"\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#getting-help","title":"Getting Help","text":"<p>Every command has a built-in help flag:</p> <pre><code># General help\nbiomcp --help\n\n# Command-specific help\nbiomcp article search --help\nbiomcp trial get --help\nbiomcp variant predict --help\n</code></pre>"},{"location":"user-guides/01-command-line-interface/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ol> <li> <p>Use Official Gene Symbols: Always use HGNC-approved gene symbols (e.g., \"TP53\" not \"p53\")</p> </li> <li> <p>Combine Filters: Most commands support multiple filters for precise results:</p> </li> </ol> <pre><code>biomcp article search --gene EGFR --disease \"lung cancer\" \\\n  --chemical erlotinib --keyword \"resistance\"\n</code></pre> <ol> <li>Handle Large Results: Use <code>--limit</code> and <code>--format json</code> for processing:</li> </ol> <pre><code>biomcp article search --gene BRCA1 --limit 100 --format json | \\\n  jq '.results[] | {pmid: .pmid, title: .title}'\n</code></pre> <ol> <li>Location Searches: Always provide both latitude and longitude:</li> </ol> <pre><code># Find trials near Boston\nbiomcp trial search --condition cancer \\\n  --latitude 42.3601 --longitude -71.0589 --distance 25\n</code></pre> <ol> <li>Use OR Logic: The pipe character enables flexible searches:</li> </ol> <pre><code># Find articles mentioning any form of a variant\nbiomcp article search --gene BRAF --keyword \"V600E|p.V600E|c.1799T&gt;A\"\n</code></pre> <ol> <li>Check API Health: Before bulk operations, verify API status:    <pre><code>biomcp health check --apis-only\n</code></pre></li> </ol>"},{"location":"user-guides/01-command-line-interface/#next-steps","title":"Next Steps","text":"<ul> <li>Set up API keys for enhanced features</li> <li>Explore MCP tools for AI integration</li> <li>Read how-to guides for complex workflows</li> </ul>"},{"location":"user-guides/02-mcp-tools-reference/","title":"MCP Tools Reference","text":"<p>BioMCP provides 35 specialized tools for biomedical research through the Model Context Protocol (MCP). This reference covers all available tools, their parameters, and usage patterns.</p>"},{"location":"user-guides/02-mcp-tools-reference/#related-guides","title":"Related Guides","text":"<ul> <li>Conceptual Overview: Sequential Thinking with the Think Tool</li> <li>Practical Examples: See the How-to Guides for real-world usage patterns</li> <li>Integration Setup: Claude Desktop Integration</li> </ul>"},{"location":"user-guides/02-mcp-tools-reference/#tool-categories","title":"Tool Categories","text":"Category Count Tools Core Tools 3 <code>search</code>, <code>fetch</code>, <code>think</code> Article Tools 2 <code>article_searcher</code>, <code>article_getter</code> Trial Tools 6 <code>trial_searcher</code>, <code>trial_getter</code>, + 4 detail getters Variant Tools 3 <code>variant_searcher</code>, <code>variant_getter</code>, <code>alphagenome_predictor</code> BioThings Tools 3 <code>gene_getter</code>, <code>disease_getter</code>, <code>drug_getter</code> NCI Tools 6 Organization, intervention, biomarker, and disease tools OpenFDA Tools 12 Adverse events, labels, devices, approvals, recalls, shortages"},{"location":"user-guides/02-mcp-tools-reference/#core-unified-tools","title":"Core Unified Tools","text":""},{"location":"user-guides/02-mcp-tools-reference/#1-search","title":"1. search","text":"<p>Universal search across all biomedical domains with unified query language.</p> <pre><code>search(\n    query: str = None,              # Unified query syntax\n    domain: str = None,             # Target domain\n    genes: list[str] = None,        # Gene symbols\n    diseases: list[str] = None,     # Disease/condition terms\n    variants: list[str] = None,     # Variant notations\n    chemicals: list[str] = None,    # Drug/chemical names\n    keywords: list[str] = None,     # Additional keywords\n    conditions: list[str] = None,   # Trial conditions\n    interventions: list[str] = None,# Trial interventions\n    lat: float = None,              # Latitude for trials\n    long: float = None,             # Longitude for trials\n    page: int = 1,                  # Page number\n    page_size: int = 10,            # Results per page\n    api_key: str = None             # For NCI domains\n) -&gt; dict\n</code></pre> <p>Domains: <code>article</code>, <code>trial</code>, <code>variant</code>, <code>gene</code>, <code>drug</code>, <code>disease</code>, <code>nci_organization</code>, <code>nci_intervention</code>, <code>nci_biomarker</code>, <code>nci_disease</code>, <code>fda_adverse</code>, <code>fda_label</code>, <code>fda_device</code>, <code>fda_approval</code>, <code>fda_recall</code>, <code>fda_shortage</code></p> <p>Query Language Examples:</p> <ul> <li><code>\"gene:BRAF AND disease:melanoma\"</code></li> <li><code>\"drugs.tradename:gleevec\"</code></li> <li><code>\"gene:TP53 AND (mutation OR variant)\"</code></li> </ul> <p>Usage Examples:</p> <pre><code># Domain-specific search\nsearch(domain=\"article\", genes=[\"BRAF\"], diseases=[\"melanoma\"])\n\n# Unified query language\nsearch(query=\"gene:EGFR AND mutation:T790M\")\n\n# Clinical trials by location\nsearch(domain=\"trial\", conditions=[\"lung cancer\"], lat=40.7128, long=-74.0060)\n\n# FDA adverse events\nsearch(domain=\"fda_adverse\", chemicals=[\"aspirin\"])\n\n# FDA drug approvals\nsearch(domain=\"fda_approval\", chemicals=[\"keytruda\"])\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#2-fetch","title":"2. fetch","text":"<p>Retrieve detailed information for any biomedical record.</p> <pre><code>fetch(\n    id: str,                    # Record identifier\n    domain: str = None,         # Domain (auto-detected if not provided)\n    detail: str = None,         # Specific section for trials\n    api_key: str = None         # For NCI records\n) -&gt; dict\n</code></pre> <p>Supported IDs:</p> <ul> <li>Articles: PMID (e.g., \"38768446\"), DOI (e.g., \"10.1101/2024.01.20\")</li> <li>Trials: NCT ID (e.g., \"NCT03006926\")</li> <li>Variants: HGVS, rsID, genomic coordinates</li> <li>Genes/Drugs/Diseases: Names or database IDs</li> <li>FDA Records: Report IDs, Application Numbers (e.g., \"BLA125514\"), Recall Numbers, etc.</li> </ul> <p>Detail Options for Trials: <code>protocol</code>, <code>locations</code>, <code>outcomes</code>, <code>references</code>, <code>all</code></p> <p>Usage Examples:</p> <pre><code># Fetch article by PMID\nfetch(id=\"38768446\", domain=\"article\")\n\n# Fetch trial with specific details\nfetch(id=\"NCT03006926\", domain=\"trial\", detail=\"locations\")\n\n# Auto-detect domain\nfetch(id=\"rs121913529\")  # Variant\nfetch(id=\"BRAF\")         # Gene\n\n# Fetch FDA records\nfetch(id=\"BLA125514\", domain=\"fda_approval\")  # Drug approval\nfetch(id=\"D-0001-2023\", domain=\"fda_recall\")   # Drug recall\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#3-think","title":"3. think","text":"<p>Sequential thinking tool for structured problem-solving.</p> <pre><code>think(\n    thought: str,               # Current reasoning step\n    thoughtNumber: int,         # Sequential number (1, 2, 3...)\n    totalThoughts: int = None,  # Estimated total thoughts\n    nextThoughtNeeded: bool = True  # Continue thinking?\n) -&gt; str\n</code></pre> <p>CRITICAL: Always use <code>think</code> BEFORE any other BioMCP operation!</p> <p>Usage Pattern:</p> <pre><code># Step 1: Problem decomposition\nthink(\n    thought=\"Breaking down query: need to find BRAF inhibitor trials...\",\n    thoughtNumber=1,\n    nextThoughtNeeded=True\n)\n\n# Step 2: Search strategy\nthink(\n    thought=\"Will search trials for BRAF V600E melanoma, then articles...\",\n    thoughtNumber=2,\n    nextThoughtNeeded=True\n)\n\n# Final step: Synthesis\nthink(\n    thought=\"Ready to synthesize findings from 5 trials and 12 articles...\",\n    thoughtNumber=3,\n    nextThoughtNeeded=False  # Analysis complete\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#article-tools","title":"Article Tools","text":""},{"location":"user-guides/02-mcp-tools-reference/#4-article_searcher","title":"4. article_searcher","text":"<p>Search PubMed/PubTator3 for biomedical literature.</p> <pre><code>article_searcher(\n    chemicals: list[str] = None,\n    diseases: list[str] = None,\n    genes: list[str] = None,\n    keywords: list[str] = None,    # Supports OR with \"|\"\n    variants: list[str] = None,\n    include_preprints: bool = True,\n    include_cbioportal: bool = True,\n    page: int = 1,\n    page_size: int = 10\n) -&gt; str\n</code></pre> <p>Features:</p> <ul> <li>Automatic cBioPortal integration for gene searches</li> <li>Preprint inclusion from bioRxiv/medRxiv</li> <li>OR logic in keywords: <code>\"V600E|p.V600E|c.1799T&gt;A\"</code></li> </ul> <p>Example:</p> <pre><code># Search with multiple filters\narticle_searcher(\n    genes=[\"BRAF\"],\n    diseases=[\"melanoma\"],\n    keywords=[\"resistance|resistant\"],\n    include_cbioportal=True\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#5-article_getter","title":"5. article_getter","text":"<p>Fetch detailed article information.</p> <pre><code>article_getter(\n    pmid: str  # PubMed ID, PMC ID, or DOI\n) -&gt; str\n</code></pre> <p>Supports:</p> <ul> <li>PubMed IDs: \"38768446\"</li> <li>PMC IDs: \"PMC7498215\"</li> <li>DOIs: \"10.1101/2024.01.20.23288905\"</li> </ul>"},{"location":"user-guides/02-mcp-tools-reference/#trial-tools","title":"Trial Tools","text":""},{"location":"user-guides/02-mcp-tools-reference/#6-trial_searcher","title":"6. trial_searcher","text":"<p>Search ClinicalTrials.gov with comprehensive filters.</p> <pre><code>trial_searcher(\n    conditions: list[str] = None,\n    interventions: list[str] = None,\n    other_terms: list[str] = None,\n    recruiting_status: str = \"ANY\",  # \"OPEN\", \"CLOSED\", \"ANY\"\n    phase: str = None,               # \"PHASE1\", \"PHASE2\", etc.\n    lat: float = None,               # Location-based search\n    long: float = None,\n    distance: int = None,            # Miles from coordinates\n    age_group: str = None,           # \"CHILD\", \"ADULT\", \"OLDER_ADULT\"\n    sex: str = None,                 # \"MALE\", \"FEMALE\", \"ALL\"\n    study_type: str = None,          # \"INTERVENTIONAL\", \"OBSERVATIONAL\"\n    funder_type: str = None,         # \"NIH\", \"INDUSTRY\", etc.\n    page: int = 1,\n    page_size: int = 10\n) -&gt; str\n</code></pre> <p>Location Search Example:</p> <pre><code># Trials near Boston\ntrial_searcher(\n    conditions=[\"breast cancer\"],\n    lat=42.3601,\n    long=-71.0589,\n    distance=50,\n    recruiting_status=\"OPEN\"\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#7-11-trial-detail-getters","title":"7-11. Trial Detail Getters","text":"<pre><code># Get complete trial information\ntrial_getter(nct_id: str) -&gt; str\n\n# Get specific sections\ntrial_protocol_getter(nct_id: str) -&gt; str     # Core protocol info\ntrial_locations_getter(nct_id: str) -&gt; str    # Sites and contacts\ntrial_outcomes_getter(nct_id: str) -&gt; str     # Outcome measures\ntrial_references_getter(nct_id: str) -&gt; str   # Publications\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#variant-tools","title":"Variant Tools","text":""},{"location":"user-guides/02-mcp-tools-reference/#12-variant_searcher","title":"12. variant_searcher","text":"<p>Search MyVariant.info for genetic variants.</p> <pre><code>variant_searcher(\n    gene: str = None,\n    hgvs: str = None,\n    hgvsp: str = None,              # Protein HGVS\n    hgvsc: str = None,              # Coding DNA HGVS\n    rsid: str = None,\n    region: str = None,             # \"chr7:140753336-140753337\"\n    significance: str = None,        # Clinical significance\n    frequency_min: float = None,\n    frequency_max: float = None,\n    cadd_score_min: float = None,\n    sift_prediction: str = None,\n    polyphen_prediction: str = None,\n    sources: list[str] = None,\n    include_cbioportal: bool = True,\n    page: int = 1,\n    page_size: int = 10\n) -&gt; str\n</code></pre> <p>Significance Options: <code>pathogenic</code>, <code>likely_pathogenic</code>, <code>uncertain_significance</code>, <code>likely_benign</code>, <code>benign</code></p> <p>Example:</p> <pre><code># Find rare pathogenic BRCA1 variants\nvariant_searcher(\n    gene=\"BRCA1\",\n    significance=\"pathogenic\",\n    frequency_max=0.001,\n    cadd_score_min=20\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#13-variant_getter","title":"13. variant_getter","text":"<p>Fetch comprehensive variant details.</p> <pre><code>variant_getter(\n    variant_id: str,              # HGVS, rsID, or MyVariant ID\n    include_external: bool = True  # Include TCGA, 1000 Genomes\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#14-alphagenome_predictor","title":"14. alphagenome_predictor","text":"<p>Predict variant effects using Google DeepMind's AlphaGenome.</p> <pre><code>alphagenome_predictor(\n    chromosome: str,              # e.g., \"chr7\"\n    position: int,                # 1-based position\n    reference: str,               # Reference allele\n    alternate: str,               # Alternate allele\n    interval_size: int = 131072,  # Analysis window\n    tissue_types: list[str] = None,  # UBERON terms\n    significance_threshold: float = 0.5,\n    api_key: str = None          # AlphaGenome API key\n) -&gt; str\n</code></pre> <p>Requires: AlphaGenome API key (environment variable or per-request)</p> <p>Tissue Examples:</p> <ul> <li><code>UBERON:0002367</code> - prostate gland</li> <li><code>UBERON:0001155</code> - colon</li> <li><code>UBERON:0002048</code> - lung</li> </ul> <p>Example:</p> <pre><code># Predict BRAF V600E effects\nalphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    tissue_types=[\"UBERON:0002367\"],  # prostate\n    api_key=\"your-key\"\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#biothings-tools","title":"BioThings Tools","text":""},{"location":"user-guides/02-mcp-tools-reference/#15-gene_getter","title":"15. gene_getter","text":"<p>Get gene information from MyGene.info.</p> <pre><code>gene_getter(\n    gene_id_or_symbol: str  # Gene symbol or Entrez ID\n) -&gt; str\n</code></pre> <p>Returns: Official name, aliases, summary, genomic location, database links</p>"},{"location":"user-guides/02-mcp-tools-reference/#16-disease_getter","title":"16. disease_getter","text":"<p>Get disease information from MyDisease.info.</p> <pre><code>disease_getter(\n    disease_id_or_name: str  # Disease name or ontology ID\n) -&gt; str\n</code></pre> <p>Returns: Definition, synonyms, MONDO/DOID IDs, associated phenotypes</p>"},{"location":"user-guides/02-mcp-tools-reference/#17-drug_getter","title":"17. drug_getter","text":"<p>Get drug/chemical information from MyChem.info.</p> <pre><code>drug_getter(\n    drug_id_or_name: str  # Drug name or database ID\n) -&gt; str\n</code></pre> <p>Returns: Chemical structure, mechanism, indications, trade names, identifiers</p>"},{"location":"user-guides/02-mcp-tools-reference/#nci-specific-tools","title":"NCI-Specific Tools","text":"<p>All NCI tools require an API key from api.cancer.gov.</p>"},{"location":"user-guides/02-mcp-tools-reference/#18-19-organization-tools","title":"18-19. Organization Tools","text":"<pre><code># Search organizations\nnci_organization_searcher(\n    name: str = None,\n    organization_type: str = None,\n    city: str = None,              # Must use with state\n    state: str = None,             # Must use with city\n    api_key: str = None\n) -&gt; str\n\n# Get organization details\nnci_organization_getter(\n    organization_id: str,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#20-21-intervention-tools","title":"20-21. Intervention Tools","text":"<pre><code># Search interventions\nnci_intervention_searcher(\n    name: str = None,\n    intervention_type: str = None,  # \"Drug\", \"Device\", etc.\n    synonyms: bool = True,\n    api_key: str = None\n) -&gt; str\n\n# Get intervention details\nnci_intervention_getter(\n    intervention_id: str,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#22-biomarker-search","title":"22. Biomarker Search","text":"<pre><code>nci_biomarker_searcher(\n    name: str = None,\n    biomarker_type: str = None,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#23-disease-search-nci","title":"23. Disease Search (NCI)","text":"<pre><code>nci_disease_searcher(\n    name: str = None,\n    include_synonyms: bool = True,\n    category: str = None,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#openfda-tools","title":"OpenFDA Tools","text":"<p>All OpenFDA tools support optional API keys for higher rate limits (240/min vs 40/min). Get a free key at open.fda.gov/apis/authentication.</p>"},{"location":"user-guides/02-mcp-tools-reference/#24-openfda_adverse_searcher","title":"24. openfda_adverse_searcher","text":"<p>Search FDA Adverse Event Reporting System (FAERS).</p> <pre><code>openfda_adverse_searcher(\n    drug: str = None,\n    reaction: str = None,\n    serious: bool = None,        # Filter serious events only\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None          # Optional OpenFDA API key\n) -&gt; str\n</code></pre> <p>Example:</p> <pre><code># Find serious bleeding events for warfarin\nopenfda_adverse_searcher(\n    drug=\"warfarin\",\n    reaction=\"bleeding\",\n    serious=True,\n    api_key=\"your-key\"  # Optional\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#25-openfda_adverse_getter","title":"25. openfda_adverse_getter","text":"<p>Get detailed adverse event report.</p> <pre><code>openfda_adverse_getter(\n    report_id: str,              # Safety report ID\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#26-openfda_label_searcher","title":"26. openfda_label_searcher","text":"<p>Search FDA drug product labels.</p> <pre><code>openfda_label_searcher(\n    name: str = None,\n    indication: str = None,      # Search by indication\n    boxed_warning: bool = False, # Filter for boxed warnings\n    section: str = None,         # Specific label section\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#27-openfda_label_getter","title":"27. openfda_label_getter","text":"<p>Get complete drug label information.</p> <pre><code>openfda_label_getter(\n    set_id: str,                 # Label set ID\n    sections: list[str] = None,  # Specific sections to retrieve\n    api_key: str = None\n) -&gt; str\n</code></pre> <p>Label Sections: <code>indications_and_usage</code>, <code>contraindications</code>, <code>warnings_and_precautions</code>, <code>dosage_and_administration</code>, <code>adverse_reactions</code>, <code>drug_interactions</code>, <code>pregnancy</code>, <code>pediatric_use</code>, <code>geriatric_use</code></p>"},{"location":"user-guides/02-mcp-tools-reference/#28-openfda_device_searcher","title":"28. openfda_device_searcher","text":"<p>Search FDA device adverse event reports (MAUDE).</p> <pre><code>openfda_device_searcher(\n    device: str = None,\n    manufacturer: str = None,\n    problem: str = None,\n    product_code: str = None,    # FDA product code\n    genomics_only: bool = True,  # Filter genomic/diagnostic devices\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None\n) -&gt; str\n</code></pre> <p>Note: FDA uses abbreviated device names (e.g., \"F1CDX\" for \"FoundationOne CDx\").</p>"},{"location":"user-guides/02-mcp-tools-reference/#29-openfda_device_getter","title":"29. openfda_device_getter","text":"<p>Get detailed device event report.</p> <pre><code>openfda_device_getter(\n    mdr_report_key: str,         # MDR report key\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#30-openfda_approval_searcher","title":"30. openfda_approval_searcher","text":"<p>Search FDA drug approval records (Drugs@FDA).</p> <pre><code>openfda_approval_searcher(\n    drug: str = None,\n    application_number: str = None,  # NDA/BLA number\n    approval_year: str = None,       # YYYY format\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#31-openfda_approval_getter","title":"31. openfda_approval_getter","text":"<p>Get drug approval details.</p> <pre><code>openfda_approval_getter(\n    application_number: str,     # NDA/BLA number\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#32-openfda_recall_searcher","title":"32. openfda_recall_searcher","text":"<p>Search FDA drug recall records.</p> <pre><code>openfda_recall_searcher(\n    drug: str = None,\n    recall_class: str = None,    # \"1\", \"2\", or \"3\"\n    status: str = None,          # \"ongoing\" or \"completed\"\n    reason: str = None,\n    since_date: str = None,      # YYYYMMDD format\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None\n) -&gt; str\n</code></pre> <p>Recall Classes:</p> <ul> <li>Class 1: Dangerous or defective products that could cause serious health problems or death</li> <li>Class 2: Products that might cause temporary health problems or pose slight threat</li> <li>Class 3: Products unlikely to cause adverse health consequences</li> </ul>"},{"location":"user-guides/02-mcp-tools-reference/#33-openfda_recall_getter","title":"33. openfda_recall_getter","text":"<p>Get drug recall details.</p> <pre><code>openfda_recall_getter(\n    recall_number: str,          # FDA recall number\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#34-openfda_shortage_searcher","title":"34. openfda_shortage_searcher","text":"<p>Search FDA drug shortage database.</p> <pre><code>openfda_shortage_searcher(\n    drug: str = None,\n    status: str = None,          # \"current\" or \"resolved\"\n    therapeutic_category: str = None,\n    limit: int = 25,\n    skip: int = 0,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#35-openfda_shortage_getter","title":"35. openfda_shortage_getter","text":"<p>Get drug shortage details.</p> <pre><code>openfda_shortage_getter(\n    drug_name: str,\n    api_key: str = None\n) -&gt; str\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#best-practices","title":"Best Practices","text":""},{"location":"user-guides/02-mcp-tools-reference/#1-always-think-first","title":"1. Always Think First","text":"<pre><code># \u2705 CORRECT - Think before searching\nthink(thought=\"Planning BRAF melanoma research...\", thoughtNumber=1)\nresults = article_searcher(genes=[\"BRAF\"], diseases=[\"melanoma\"])\n\n# \u274c INCORRECT - Skipping think tool\nresults = article_searcher(genes=[\"BRAF\"])  # Poor results!\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#2-use-unified-tools-for-flexibility","title":"2. Use Unified Tools for Flexibility","text":"<pre><code># Unified search supports complex queries\nresults = search(query=\"gene:EGFR AND (mutation:T790M OR mutation:C797S)\")\n\n# Unified fetch auto-detects domain\ndetails = fetch(id=\"NCT03006926\")  # Knows it's a trial\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#3-leverage-domain-specific-features","title":"3. Leverage Domain-Specific Features","text":"<pre><code># Article search with cBioPortal\narticles = article_searcher(\n    genes=[\"KRAS\"],\n    include_cbioportal=True  # Adds cancer genomics context\n)\n\n# Variant search with multiple filters\nvariants = variant_searcher(\n    gene=\"TP53\",\n    significance=\"pathogenic\",\n    frequency_max=0.01,\n    cadd_score_min=25\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#4-handle-api-keys-properly","title":"4. Handle API Keys Properly","text":"<pre><code># For personal use - environment variable\n# export NCI_API_KEY=\"your-key\"\nnci_results = search(domain=\"nci_organization\", name=\"Mayo Clinic\")\n\n# For shared environments - per-request\nnci_results = search(\n    domain=\"nci_organization\",\n    name=\"Mayo Clinic\",\n    api_key=\"user-provided-key\"\n)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#5-use-appropriate-page-sizes","title":"5. Use Appropriate Page Sizes","text":"<pre><code># Large result sets - increase page_size\nresults = article_searcher(\n    genes=[\"TP53\"],\n    page_size=50  # Get more results at once\n)\n\n# Iterative exploration - use pagination\npage1 = trial_searcher(conditions=[\"cancer\"], page=1, page_size=10)\npage2 = trial_searcher(conditions=[\"cancer\"], page=2, page_size=10)\n</code></pre>"},{"location":"user-guides/02-mcp-tools-reference/#error-handling","title":"Error Handling","text":"<p>All tools include comprehensive error handling:</p> <ul> <li>Invalid parameters: Clear error messages with valid options</li> <li>API failures: Graceful degradation with informative messages</li> <li>Rate limits: Automatic retry with exponential backoff</li> <li>Missing API keys: Helpful instructions for obtaining keys</li> </ul>"},{"location":"user-guides/02-mcp-tools-reference/#tool-selection-guide","title":"Tool Selection Guide","text":"If you need to... Use this tool Search across multiple domains <code>search</code> with query language Get any record by ID <code>fetch</code> with auto-detection Plan your research approach <code>think</code> (always first!) Find recent papers <code>article_searcher</code> Locate clinical trials <code>trial_searcher</code> Analyze genetic variants <code>variant_searcher</code> + <code>variant_getter</code> Predict variant effects <code>alphagenome_predictor</code> Get gene/drug/disease info <code>gene_getter</code>, <code>drug_getter</code>, <code>disease_getter</code> Access NCI databases <code>nci_*</code> tools with API key Check drug adverse events <code>openfda_adverse_searcher</code> Review FDA drug labels <code>openfda_label_searcher</code> + <code>openfda_label_getter</code> Investigate device issues <code>openfda_device_searcher</code> Find drug approvals <code>openfda_approval_searcher</code> Check drug recalls <code>openfda_recall_searcher</code> Monitor drug shortages <code>openfda_shortage_searcher</code>"},{"location":"user-guides/02-mcp-tools-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Review Sequential Thinking methodology</li> <li>Explore How-to Guides for complex workflows</li> <li>Set up API Keys for enhanced features</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/","title":"Integrating with IDEs and Clients","text":"<p>BioMCP can be integrated into your development workflow through multiple approaches. This guide covers integration with IDEs, Python applications, and MCP-compatible clients.</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#integration-methods-overview","title":"Integration Methods Overview","text":"Method Best For Installation Usage Pattern Cursor IDE Interactive development Smithery CLI Natural language queries Python SDK Application development pip/uv Direct function calls MCP Client AI assistants &amp; protocols Subprocess Tool-based communication"},{"location":"user-guides/03-integrating-with-ides-and-clients/#cursor-ide-integration","title":"Cursor IDE Integration","text":"<p>Cursor IDE provides the most seamless integration for interactive biomedical research during development.</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#installation","title":"Installation","text":"<ol> <li> <p>Prerequisites:</p> </li> <li> <p>Cursor IDE installed</p> </li> <li> <p>Smithery account and token</p> </li> <li> <p>Install BioMCP:</p> </li> </ol> <pre><code>npx -y @smithery/cli@latest install @genomoncology/biomcp --client cursor\n</code></pre> <ol> <li>Configuration:</li> <li>The Smithery CLI automatically configures Cursor</li> <li>No manual configuration needed</li> </ol>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#usage-in-cursor","title":"Usage in Cursor","text":"<p>Once installed, you can query biomedical data using natural language:</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#clinical-trials","title":"Clinical Trials","text":"<pre><code>\"Find Phase 3 clinical trials for lung cancer with immunotherapy\"\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#research-articles","title":"Research Articles","text":"<pre><code>\"Summarize recent research on EGFR mutations in lung cancer\"\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#genetic-variants","title":"Genetic Variants","text":"<pre><code>\"What's the clinical significance of the BRAF V600E mutation?\"\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#complex-queries","title":"Complex Queries","text":"<pre><code>\"Compare treatment outcomes for ALK-positive vs EGFR-mutant NSCLC\"\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#cursor-tips","title":"Cursor Tips","text":"<ol> <li>Be Specific: Include gene names, disease types, and treatment modalities</li> <li>Iterate: Refine queries based on initial results</li> <li>Cross-Reference: Ask for both articles and trials on the same topic</li> <li>Export Results: Copy formatted results for documentation</li> </ol>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#python-sdk-integration","title":"Python SDK Integration","text":"<p>The Python SDK provides programmatic access to BioMCP for building applications.</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#installation_1","title":"Installation","text":"<pre><code># Using pip\npip install biomcp-python\n\n# Using uv\nuv add biomcp-python\n\n# For scripts\nuv pip install biomcp-python\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom biomcp import BioMCP\n\nasync def main():\n    # Initialize client\n    client = BioMCP()\n\n    # Search for articles\n    articles = await client.articles.search(\n        genes=[\"BRAF\"],\n        diseases=[\"melanoma\"],\n        limit=5\n    )\n\n    # Search for trials\n    trials = await client.trials.search(\n        conditions=[\"breast cancer\"],\n        interventions=[\"CDK4/6 inhibitor\"],\n        recruiting_status=\"RECRUITING\"\n    )\n\n    # Get variant details\n    variant = await client.variants.get(\"rs121913529\")\n\n    return articles, trials, variant\n\n# Run the async function\nresults = asyncio.run(main())\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guides/03-integrating-with-ides-and-clients/#domain-specific-modules","title":"Domain-Specific Modules","text":"<pre><code>from biomcp import BioMCP\nfrom biomcp.variants import search_variants, get_variant\nfrom biomcp.trials import search_trials, get_trial\nfrom biomcp.articles import search_articles, fetch_articles\n\n# Direct module usage\nasync def variant_analysis():\n    # Search pathogenic TP53 variants\n    results = await search_variants(\n        gene=\"TP53\",\n        significance=\"pathogenic\",\n        frequency_max=0.01,\n        limit=20\n    )\n\n    # Get detailed annotations\n    for variant in results:\n        details = await get_variant(variant.id)\n        print(f\"{variant.id}: {details.clinical_significance}\")\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#output-formats","title":"Output Formats","text":"<pre><code># JSON for programmatic use\narticles_json = await client.articles.search(\n    genes=[\"KRAS\"],\n    format=\"json\"\n)\n\n# Markdown for display\narticles_md = await client.articles.search(\n    genes=[\"KRAS\"],\n    format=\"markdown\"\n)\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#error-handling","title":"Error Handling","text":"<pre><code>from biomcp.exceptions import BioMCPError, APIError, ValidationError\n\ntry:\n    results = await client.articles.search(genes=[\"INVALID_GENE\"])\nexcept ValidationError as e:\n    print(f\"Invalid input: {e}\")\nexcept APIError as e:\n    print(f\"API error: {e}\")\nexcept BioMCPError as e:\n    print(f\"General error: {e}\")\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#example-building-a-variant-report","title":"Example: Building a Variant Report","text":"<pre><code>import asyncio\nfrom biomcp import BioMCP\n\nasync def generate_variant_report(gene: str, mutation: str):\n    client = BioMCP()\n\n    # 1. Get gene information\n    gene_info = await client.genes.get(gene)\n\n    # 2. Search for the specific variant\n    variants = await client.variants.search(\n        gene=gene,\n        keywords=[mutation]\n    )\n\n    # 3. Find relevant articles\n    articles = await client.articles.search(\n        genes=[gene],\n        keywords=[mutation],\n        limit=10\n    )\n\n    # 4. Look for clinical trials\n    trials = await client.trials.search(\n        conditions=[\"cancer\"],\n        other_terms=[f\"{gene} {mutation}\"],\n        recruiting_status=\"RECRUITING\"\n    )\n\n    # 5. Generate report\n    report = f\"\"\"\n# Variant Report: {gene} {mutation}\n\n## Gene Information\n- **Official Name**: {gene_info.name}\n- **Summary**: {gene_info.summary}\n\n## Variant Details\nFound {len(variants)} matching variants\n\n## Literature ({len(articles)} articles)\nRecent publications discussing this variant...\n\n## Clinical Trials ({len(trials)} active trials)\nCurrently recruiting studies...\n\"\"\"\n\n    return report\n\n# Generate report\nreport = asyncio.run(generate_variant_report(\"BRAF\", \"V600E\"))\nprint(report)\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#mcp-client-integration","title":"MCP Client Integration","text":"<p>The Model Context Protocol (MCP) provides a standardized way to integrate BioMCP with AI assistants and other tools.</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#understanding-mcp","title":"Understanding MCP","text":"<p>MCP is a protocol for communication between:</p> <ul> <li>Clients: AI assistants, IDEs, or custom applications</li> <li>Servers: Tool providers like BioMCP</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#critical-requirement-think-tool","title":"Critical Requirement: Think Tool","text":"<p>IMPORTANT: When using MCP, you MUST call the <code>think</code> tool first before any search or fetch operations. This ensures systematic analysis and optimal results.</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#basic-mcp-integration","title":"Basic MCP Integration","text":"<pre><code>import asyncio\nimport subprocess\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nasync def run_biomcp_query():\n    # Start BioMCP server\n    server_params = StdioServerParameters(\n        command=\"uv\",\n        args=[\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"],\n        env={\"PYTHONUNBUFFERED\": \"1\"}\n    )\n\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            # Initialize and discover tools\n            await session.initialize()\n            tools = await session.list_tools()\n\n            # CRITICAL: Always think first!\n            await session.call_tool(\n                \"think\",\n                arguments={\n                    \"thought\": \"Analyzing BRAF V600E in melanoma...\",\n                    \"thoughtNumber\": 1,\n                    \"nextThoughtNeeded\": True\n                }\n            )\n\n            # Now search for articles\n            result = await session.call_tool(\n                \"article_searcher\",\n                arguments={\n                    \"genes\": [\"BRAF\"],\n                    \"diseases\": [\"melanoma\"],\n                    \"keywords\": [\"V600E\"]\n                }\n            )\n\n            return result\n\n# Run the query\nresult = asyncio.run(run_biomcp_query())\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#available-mcp-tools","title":"Available MCP Tools","text":"<p>BioMCP provides 24 tools through MCP:</p>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#core-tools-always-use-first","title":"Core Tools (Always Use First)","text":"<ul> <li><code>think</code> - Sequential reasoning (MANDATORY first step)</li> <li><code>search</code> - Unified search across domains</li> <li><code>fetch</code> - Retrieve specific records</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#domain-specific-tools","title":"Domain-Specific Tools","text":"<ul> <li>Articles: <code>article_searcher</code>, <code>article_getter</code></li> <li>Trials: <code>trial_searcher</code>, <code>trial_getter</code>, plus detail getters</li> <li>Variants: <code>variant_searcher</code>, <code>variant_getter</code>, <code>alphagenome_predictor</code></li> <li>BioThings: <code>gene_getter</code>, <code>disease_getter</code>, <code>drug_getter</code></li> <li>NCI: Organization, intervention, biomarker, disease tools</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#mcp-integration-patterns","title":"MCP Integration Patterns","text":""},{"location":"user-guides/03-integrating-with-ides-and-clients/#pattern-1-ai-assistant-integration","title":"Pattern 1: AI Assistant Integration","text":"<pre><code># Example for integrating with an AI assistant\nclass BioMCPAssistant:\n    def __init__(self):\n        self.session = None\n\n    async def connect(self):\n        # Initialize MCP connection\n        server_params = StdioServerParameters(\n            command=\"biomcp\",\n            args=[\"run\"]\n        )\n        # ... connection setup ...\n\n    async def process_query(self, user_query: str):\n        # 1. Always think first\n        await self.think_about_query(user_query)\n\n        # 2. Determine appropriate tools\n        tools_needed = self.analyze_query(user_query)\n\n        # 3. Execute tool calls\n        results = []\n        for tool in tools_needed:\n            result = await self.session.call_tool(tool.name, tool.args)\n            results.append(result)\n\n        # 4. Synthesize results\n        return self.format_response(results)\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#pattern-2-custom-client-implementation","title":"Pattern 2: Custom Client Implementation","text":"<pre><code>import json\nfrom typing import Any, Dict\n\nclass BioMCPClient:\n    \"\"\"Custom client for specific biomedical workflows\"\"\"\n\n    async def variant_to_trials_pipeline(self, variant_id: str):\n        \"\"\"Find trials for patients with specific variants\"\"\"\n\n        # Step 1: Think and plan\n        await self.think(\n            \"Planning variant-to-trials search pipeline...\",\n            thoughtNumber=1\n        )\n\n        # Step 2: Get variant details\n        variant = await self.call_tool(\"variant_getter\", {\n            \"variant_id\": variant_id\n        })\n\n        # Step 3: Extract gene and disease associations\n        gene = variant.get(\"gene\", {}).get(\"symbol\")\n        diseases = self.extract_diseases(variant)\n\n        # Step 4: Search for relevant trials\n        trials = await self.call_tool(\"trial_searcher\", {\n            \"conditions\": diseases,\n            \"other_terms\": [f\"{gene} mutation\"],\n            \"recruiting_status\": \"RECRUITING\"\n        })\n\n        return {\n            \"variant\": variant,\n            \"associated_trials\": trials\n        }\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#mcp-best-practices","title":"MCP Best Practices","text":"<ol> <li>Always Think First</li> </ol> <pre><code># \u2705 Correct\nawait think(thought=\"Planning research...\", thoughtNumber=1)\nawait search(...)\n\n# \u274c Wrong - skips thinking\nawait search(...)  # Will produce poor results\n</code></pre> <ol> <li>Use Appropriate Tools</li> </ol> <pre><code># For broad searches across domains\nawait call_tool(\"search\", {\"query\": \"gene:BRAF AND melanoma\"})\n\n# For specific domain searches\nawait call_tool(\"article_searcher\", {\"genes\": [\"BRAF\"]})\n</code></pre> <ol> <li>Handle Tool Responses <pre><code>try:\n    result = await session.call_tool(\"variant_getter\", {\n        \"variant_id\": \"rs121913529\"\n    })\n    # Process structured result\n    if result.get(\"error\"):\n        handle_error(result[\"error\"])\n    else:\n        process_variant(result[\"data\"])\nexcept Exception as e:\n    logger.error(f\"Tool call failed: {e}\")\n</code></pre></li> </ol>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#choosing-the-right-integration","title":"Choosing the Right Integration","text":""},{"location":"user-guides/03-integrating-with-ides-and-clients/#use-cursor-ide-when","title":"Use Cursor IDE When:","text":"<ul> <li>Doing interactive research during development</li> <li>Exploring biomedical data for new projects</li> <li>Need quick answers without writing code</li> <li>Want natural language queries</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#use-python-sdk-when","title":"Use Python SDK When:","text":"<ul> <li>Building production applications</li> <li>Need type-safe interfaces</li> <li>Want direct function calls</li> <li>Require custom error handling</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#use-mcp-client-when","title":"Use MCP Client When:","text":"<ul> <li>Integrating with AI assistants</li> <li>Building protocol-compliant tools</li> <li>Need standardized tool interfaces</li> <li>Want language-agnostic integration</li> </ul>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guides/03-integrating-with-ides-and-clients/#example-1-research-dashboard-python-sdk","title":"Example 1: Research Dashboard (Python SDK)","text":"<pre><code>from biomcp import BioMCP\nimport streamlit as st\n\nasync def create_dashboard():\n    client = BioMCP()\n\n    st.title(\"Biomedical Research Dashboard\")\n\n    # Gene input\n    gene = st.text_input(\"Enter gene symbol:\", \"BRAF\")\n\n    if st.button(\"Search\"):\n        # Fetch comprehensive data\n        col1, col2 = st.columns(2)\n\n        with col1:\n            st.subheader(\"Recent Articles\")\n            articles = await client.articles.search(genes=[gene], limit=5)\n            for article in articles:\n                st.write(f\"- [{article.title}]({article.url})\")\n\n        with col2:\n            st.subheader(\"Active Trials\")\n            trials = await client.trials.search(\n                other_terms=[gene],\n                recruiting_status=\"RECRUITING\",\n                limit=5\n            )\n            for trial in trials:\n                st.write(f\"- [{trial.nct_id}]({trial.url})\")\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#example-2-variant-analysis-pipeline-mcp","title":"Example 2: Variant Analysis Pipeline (MCP)","text":"<pre><code>async def comprehensive_variant_analysis(session, hgvs: str):\n    \"\"\"Complete variant analysis workflow using MCP\"\"\"\n\n    # Think about the analysis\n    await session.call_tool(\"think\", {\n        \"thought\": f\"Planning comprehensive analysis for {hgvs}\",\n        \"thoughtNumber\": 1\n    })\n\n    # Get variant details\n    variant = await session.call_tool(\"variant_getter\", {\n        \"variant_id\": hgvs\n    })\n\n    # Search related articles\n    articles = await session.call_tool(\"article_searcher\", {\n        \"variants\": [hgvs],\n        \"limit\": 10\n    })\n\n    # Find applicable trials\n    gene = variant.get(\"gene\", {}).get(\"symbol\")\n    trials = await session.call_tool(\"trial_searcher\", {\n        \"other_terms\": [f\"{gene} mutation\"],\n        \"recruiting_status\": \"RECRUITING\"\n    })\n\n    # Predict functional effects if genomic coordinates available\n    if variant.get(\"chrom\") and variant.get(\"pos\"):\n        prediction = await session.call_tool(\"alphagenome_predictor\", {\n            \"chromosome\": f\"chr{variant['chrom']}\",\n            \"position\": variant[\"pos\"],\n            \"reference\": variant[\"ref\"],\n            \"alternate\": variant[\"alt\"]\n        })\n\n    return {\n        \"variant\": variant,\n        \"articles\": articles,\n        \"trials\": trials,\n        \"prediction\": prediction\n    }\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guides/03-integrating-with-ides-and-clients/#common-issues","title":"Common Issues","text":"<ol> <li> <p>\"Think tool not called\" errors</p> </li> <li> <p>Always call think before other operations</p> </li> <li> <p>Include thoughtNumber parameter</p> </li> <li> <p>API rate limits</p> </li> <li> <p>Add delays between requests</p> </li> <li> <p>Use API keys for higher limits</p> </li> <li> <p>Connection failures</p> </li> <li> <p>Check network connectivity</p> </li> <li>Verify server is running</li> <li> <p>Ensure correct installation</p> </li> <li> <p>Invalid gene symbols</p> </li> <li>Use official HGNC symbols</li> <li>Check genenames.org</li> </ol>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code># Python SDK\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# MCP Client\nserver_params = StdioServerParameters(\n    command=\"biomcp\",\n    args=[\"run\", \"--log-level\", \"DEBUG\"]\n)\n</code></pre>"},{"location":"user-guides/03-integrating-with-ides-and-clients/#next-steps","title":"Next Steps","text":"<ul> <li>Explore tool-specific documentation</li> <li>Review API authentication</li> <li>Check example workflows for your use case</li> </ul>"},{"location":"workflows/all-workflows/","title":"BioMCP Research Workflows","text":"<p>Quick, practical workflows for common biomedical research tasks.</p>"},{"location":"workflows/all-workflows/#1-literature-review-workflow","title":"1. Literature Review Workflow","text":""},{"location":"workflows/all-workflows/#quick-start","title":"Quick Start","text":"<pre><code># Find key papers on BRAF V600E melanoma therapy\nbiomcp article search --gene BRAF --disease melanoma \\\n  --keyword \"V600E|therapy|treatment\" --limit 50 \\\n  --format json &gt; braf_papers.json\n</code></pre>"},{"location":"workflows/all-workflows/#full-workflow-script","title":"Full Workflow Script","text":"<pre><code>import asyncio\nfrom biomcp import BioMCPClient\n\nasync def literature_review(gene, disease, focus_terms):\n    async with BioMCPClient() as client:\n        # 1. Get gene context\n        gene_info = await client.genes.get(gene)\n\n        # 2. Search by topic\n        results = {}\n        for term in focus_terms:\n            articles = await client.articles.search(\n                genes=[gene],\n                diseases=[disease],\n                keywords=[term],\n                limit=30\n            )\n            results[term] = articles.articles\n\n        # 3. Generate summary\n        print(f\"\\n{gene} in {disease}: Found {sum(len(v) for v in results.values())} articles\")\n        for topic, articles in results.items():\n            print(f\"\\n{topic}: {len(articles)} articles\")\n            for a in articles[:3]:\n                print(f\"  - {a.title[:80]}... ({a.year})\")\n\n        return results\n\n# Run it\nasyncio.run(literature_review(\n    \"BRAF\",\n    \"melanoma\",\n    [\"resistance\", \"combination therapy\", \"immunotherapy\"]\n))\n</code></pre>"},{"location":"workflows/all-workflows/#key-points","title":"Key Points","text":"<ul> <li>Start broad, then narrow by topic</li> <li>Use OR syntax for variant notations</li> <li>Export results for citation management</li> <li>Set up weekly searches for updates</li> </ul>"},{"location":"workflows/all-workflows/#2-clinical-trial-matching-workflow","title":"2. Clinical Trial Matching Workflow","text":""},{"location":"workflows/all-workflows/#quick-start_1","title":"Quick Start","text":"<pre><code># Find trials for EGFR-mutant lung cancer near Boston\nbiomcp trial search --condition \"lung cancer\" \\\n  --term \"EGFR mutation\" --status RECRUITING \\\n  --latitude 42.3601 --longitude -71.0589 --distance 100\n</code></pre>"},{"location":"workflows/all-workflows/#patient-matching-script","title":"Patient Matching Script","text":"<pre><code>async def match_patient_to_trials(patient_profile):\n    async with BioMCPClient() as client:\n        # 1. Search trials with location\n        trials = await client.trials.search(\n            conditions=[patient_profile['diagnosis']],\n            other_terms=patient_profile['mutations'],\n            lat=patient_profile['lat'],\n            long=patient_profile['long'],\n            distance=patient_profile['max_distance'],\n            status=\"RECRUITING\"\n        )\n\n        # 2. Score trials\n        scored = []\n        for trial in trials.trials[:20]:\n            score = 0\n\n            # Location score\n            if trial.distance &lt; 50:\n                score += 25\n\n            # Phase score\n            if trial.phase == \"PHASE3\":\n                score += 20\n            elif trial.phase == \"PHASE2\":\n                score += 15\n\n            # Mutation match\n            if any(mut in str(trial.eligibility) for mut in patient_profile['mutations']):\n                score += 30\n\n            scored.append((score, trial))\n\n        # 3. Return top matches\n        scored.sort(reverse=True, key=lambda x: x[0])\n        return [(s, t) for s, t in scored[:5]]\n\n# Example patient\npatient = {\n    'diagnosis': 'non-small cell lung cancer',\n    'mutations': ['EGFR L858R'],\n    'lat': 42.3601,\n    'long': -71.0589,\n    'max_distance': 100\n}\n\nmatches = asyncio.run(match_patient_to_trials(patient))\n</code></pre>"},{"location":"workflows/all-workflows/#key-points_1","title":"Key Points","text":"<ul> <li>Always use coordinates for location search</li> <li>Check both ClinicalTrials.gov and NCI sources</li> <li>Contact trial sites directly for pre-screening</li> <li>Consider travel burden in recommendations</li> </ul>"},{"location":"workflows/all-workflows/#3-variant-interpretation-workflow","title":"3. Variant Interpretation Workflow","text":""},{"location":"workflows/all-workflows/#quick-start_2","title":"Quick Start","text":"<pre><code># Get variant annotations\nbiomcp variant get rs121913529  # By rsID\nbiomcp variant get \"NM_007294.4:c.5266dupC\"  # By HGVS\n\n# Search pathogenic variants\nbiomcp variant search --gene BRCA1 --significance pathogenic\n</code></pre>"},{"location":"workflows/all-workflows/#variant-analysis-script","title":"Variant Analysis Script","text":"<pre><code>async def interpret_variant(gene, variant_notation, cancer_type):\n    async with BioMCPClient() as client:\n        # 1. Get variant details\n        try:\n            variant = await client.variants.get(variant_notation)\n            significance = variant.clinical_significance\n            frequency = variant.frequencies.gnomad if hasattr(variant, 'frequencies') else None\n        except:\n            significance = \"Not found\"\n            frequency = None\n\n        # 2. Search literature\n        articles = await client.articles.search(\n            genes=[gene],\n            variants=[variant_notation],\n            diseases=[cancer_type],\n            limit=10\n        )\n\n        # 3. Find trials\n        trials = await client.trials.search(\n            conditions=[cancer_type],\n            other_terms=[f\"{gene} mutation\"],\n            status=\"RECRUITING\",\n            limit=5\n        )\n\n        # 4. Generate interpretation\n        print(f\"\\nVariant: {gene} {variant_notation}\")\n        print(f\"Significance: {significance}\")\n        print(f\"Population Frequency: {frequency or 'Unknown'}\")\n        print(f\"Literature: {len(articles.articles)} relevant papers\")\n        print(f\"Clinical Trials: {len(trials.trials)} active trials\")\n\n        # Actionability assessment\n        if significance in [\"Pathogenic\", \"Likely pathogenic\"]:\n            if trials.trials:\n                print(\"\u2713 ACTIONABLE - Clinical trials available\")\n            else:\n                print(\"\u26a0 Pathogenic but no targeted trials\")\n\n        return {\n            'significance': significance,\n            'frequency': frequency,\n            'articles': len(articles.articles),\n            'trials': len(trials.trials)\n        }\n\n# Run it\nasyncio.run(interpret_variant(\"BRAF\", \"p.V600E\", \"melanoma\"))\n</code></pre>"},{"location":"workflows/all-workflows/#key-points_2","title":"Key Points","text":"<ul> <li>Check multiple databases (MyVariant, ClinVar via articles)</li> <li>Consider cancer type for interpretation</li> <li>Look for FDA-approved therapies</li> <li>Document tier classification</li> </ul>"},{"location":"workflows/all-workflows/#4-quick-integration-patterns","title":"4. Quick Integration Patterns","text":""},{"location":"workflows/all-workflows/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple queries efficiently\nasync def batch_analysis(items):\n    async with BioMCPClient() as client:\n        tasks = []\n        for item in items:\n            if item['type'] == 'gene':\n                tasks.append(client.genes.get(item['id']))\n            elif item['type'] == 'variant':\n                tasks.append(client.variants.get(item['id']))\n\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n        return results\n</code></pre>"},{"location":"workflows/all-workflows/#error-handling","title":"Error Handling","text":"<pre><code>from biomcp.exceptions import NotFoundError, RateLimitError\nimport time\n\nasync def robust_search(search_func, **params):\n    retries = 3\n    for attempt in range(retries):\n        try:\n            return await search_func(**params)\n        except RateLimitError as e:\n            if attempt &lt; retries - 1:\n                time.sleep(2 ** attempt)  # Exponential backoff\n            else:\n                raise\n        except NotFoundError:\n            return None\n</code></pre>"},{"location":"workflows/all-workflows/#caching-results","title":"Caching Results","text":"<pre><code>from functools import lru_cache\nimport json\n\n# Simple file-based cache\ndef cache_results(filename):\n    def decorator(func):\n        async def wrapper(*args, **kwargs):\n            # Check cache\n            try:\n                with open(filename, 'r') as f:\n                    return json.load(f)\n            except FileNotFoundError:\n                pass\n\n            # Fetch and cache\n            result = await func(*args, **kwargs)\n            with open(filename, 'w') as f:\n                json.dump(result, f)\n            return result\n        return wrapper\n    return decorator\n\n@cache_results('gene_cache.json')\nasync def get_gene_info(gene):\n    async with BioMCPClient() as client:\n        return await client.genes.get(gene)\n</code></pre>"},{"location":"workflows/all-workflows/#complete-example-precision-medicine-report","title":"Complete Example: Precision Medicine Report","text":"<pre><code>async def generate_precision_medicine_report(patient):\n    \"\"\"Generate comprehensive report for molecular tumor board.\"\"\"\n\n    async with BioMCPClient() as client:\n        report = {\n            'patient_id': patient['id'],\n            'date': datetime.now().isoformat(),\n            'variants': [],\n            'trials': [],\n            'therapies': []\n        }\n\n        # Analyze each variant\n        for variant in patient['variants']:\n            # Get annotations\n            var_info = await robust_search(\n                client.variants.search,\n                gene=variant['gene'],\n                hgvs=variant['hgvs']\n            )\n\n            # Search literature\n            articles = await client.articles.search(\n                genes=[variant['gene']],\n                diseases=[patient['cancer_type']],\n                keywords=['therapy', 'treatment'],\n                limit=5\n            )\n\n            # Find trials\n            trials = await client.trials.search(\n                conditions=[patient['cancer_type']],\n                other_terms=[f\"{variant['gene']} mutation\"],\n                status=\"RECRUITING\",\n                limit=3\n            )\n\n            report['variants'].append({\n                'variant': variant,\n                'annotation': var_info,\n                'relevant_articles': len(articles.articles),\n                'available_trials': len(trials.trials)\n            })\n\n            report['trials'].extend(trials.trials)\n\n        # Generate summary\n        print(f\"\\nPrecision Medicine Report - {patient['id']}\")\n        print(f\"Cancer Type: {patient['cancer_type']}\")\n        print(f\"Variants Analyzed: {len(report['variants'])}\")\n        print(f\"Clinical Trials Found: {len(report['trials'])}\")\n\n        # Prioritize actionable findings\n        actionable = [v for v in report['variants']\n                     if v['available_trials'] &gt; 0]\n\n        if actionable:\n            print(f\"\\n\u2713 {len(actionable)} ACTIONABLE variants with trial options\")\n\n        return report\n\n# Example usage\npatient = {\n    'id': 'PT001',\n    'cancer_type': 'lung adenocarcinoma',\n    'variants': [\n        {'gene': 'EGFR', 'hgvs': 'p.L858R'},\n        {'gene': 'TP53', 'hgvs': 'p.R273H'}\n    ]\n}\n\nreport = asyncio.run(generate_precision_medicine_report(patient))\n</code></pre>"},{"location":"workflows/all-workflows/#tips-for-all-workflows","title":"Tips for All Workflows","text":"<ol> <li>Always start with the think tool (for AI assistants)</li> <li>Use official gene symbols - check genenames.org</li> <li>Batch API calls when possible</li> <li>Handle errors gracefully - APIs can be unavailable</li> <li>Cache frequently accessed data - respect rate limits</li> <li>Document your process - for reproducibility</li> </ol>"},{"location":"workflows/all-workflows/#next-steps","title":"Next Steps","text":"<ul> <li>Command Reference</li> <li>API Documentation</li> <li>Troubleshooting</li> </ul>"}]}