{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BioMCP: Biomedical Model Context Protocol Server","text":"<p>BioMCP is a specialized Model Context Protocol (MCP) server that connects AI assistants like Claude to biomedical data sources, including ClinicalTrials.gov, PubMed, MyVariant.info, and cBioPortal.</p>"},{"location":"#built-and-maintained-by","title":"Built and Maintained by","text":""},{"location":"#quick-start-claude-desktop-setup","title":"Quick Start: Claude Desktop Setup","text":"<p>The fastest way to get started with BioMCP is to set it up with Claude Desktop:</p> <ol> <li> <p>Install Claude Desktop from Anthropic</p> </li> <li> <p>Ensure <code>uv</code> is installed:</p> </li> </ol> <pre><code># Install uv if you don't have it\n# MacOS: brew install uv\n# Windows: pip install uv\n</code></pre> <ol> <li> <p>Configure Claude Desktop:</p> </li> <li> <p>Open Claude Desktop settings</p> </li> <li>Navigate to Developer section</li> <li>Click \"Edit Config\" and add:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n    }\n  }\n}\n</code></pre> <ul> <li> <p>Save and restart Claude Desktop</p> </li> <li> <p>Start chatting with Claude about biomedical topics!</p> </li> </ul> <p>For detailed setup instructions and examples, see our Claude Desktop Tutorial.</p>"},{"location":"#what-is-biomcp","title":"What is BioMCP?","text":"<p>BioMCP is a specialized MCP (Model Context Protocol) server that bridges the gap between AI systems and critical biomedical data sources. While Large Language Models (LLMs) like Claude have extensive general knowledge, they often lack real-time access to specialized databases needed for in-depth biomedical research.</p> <p>Using the Model Context Protocol, BioMCP provides Claude and other AI assistants with structured, real-time access to:</p> <ol> <li>Clinical Trials - Searchable access to ClinicalTrials.gov for finding relevant studies</li> <li>Research Literature - Query PubMed/PubTator3 for the latest biomedical research with automatic cBioPortal cancer genomics integration</li> <li>Genomic Variants - Explore detailed genetic variant information from MyVariant.info</li> <li>Cancer Genomics - Automatic integration with cBioPortal for mutation occurrence data in cancer studies</li> </ol> <p>Through MCP, AI assistants can seamlessly invoke BioMCP tools during conversations, retrieving precise biomedical information without the user needing to understand complex query syntax or database-specific parameters.</p>"},{"location":"#mcp-tools-and-capabilities","title":"MCP Tools and Capabilities","text":"<p>BioMCP provides 13 specialized tools through the MCP interface:</p>"},{"location":"#core-tools-3","title":"Core Tools (3)","text":""},{"location":"#think-tool-critical-always-use-first","title":"Think Tool (CRITICAL - ALWAYS USE FIRST!)","text":"<ul> <li><code>think</code>: A sequential thinking tool for systematic analysis of biomedical problems. MUST be used BEFORE any search operations to ensure comprehensive research planning and analysis.</li> </ul>"},{"location":"#unified-tools","title":"Unified Tools","text":"<ul> <li><code>search</code>: Powerful unified search across all biomedical data sources with cross-domain query support</li> <li><code>fetch</code>: Retrieve detailed information for specific articles, trials, or variants</li> </ul>"},{"location":"#individual-tools-10","title":"Individual Tools (10)","text":""},{"location":"#article-tools-2","title":"Article Tools (2)","text":"<ul> <li><code>article_searcher</code>: Search PubMed/PubTator3 and preprints with automatic cBioPortal integration</li> <li><code>article_getter</code>: Fetch detailed article content and metadata</li> </ul> <p>Note: When searching articles with gene parameters, cBioPortal data is automatically included, providing:</p> <ul> <li>Gene-level mutation summaries across cancer studies</li> <li>Mutation-specific search capabilities (e.g., BRAF V600E)</li> <li>Dynamic cancer type categorization</li> </ul> <p>NEW: OR Logic for Keywords: The article searcher now supports OR logic using pipe separators in keywords:</p> <ul> <li><code>\"R173|Arg173|p.R173\"</code> finds articles with any variant notation</li> <li><code>\"immunotherapy|checkpoint inhibitor\"</code> matches either term</li> <li>Multiple keywords are still combined with AND logic</li> </ul>"},{"location":"#clinical-trial-tools-5","title":"Clinical Trial Tools (5)","text":"<ul> <li><code>trial_searcher</code>: Search for trials by condition, intervention, location, phase, etc.</li> <li><code>trial_getter</code>: Fetch all details for a specific trial</li> <li><code>trial_protocol_getter</code>: Get protocol information only</li> <li><code>trial_references_getter</code>: Find publications related to trials</li> <li><code>trial_outcomes_getter</code>: Access trial results and outcome data</li> <li><code>trial_locations_getter</code>: Find where trials are conducted</li> </ul>"},{"location":"#genomic-variant-tools-2","title":"Genomic Variant Tools (2)","text":"<ul> <li><code>variant_searcher</code>: Search MyVariant.info with clinical and functional filters</li> <li><code>variant_getter</code>: Get comprehensive annotations including TCGA, 1000 Genomes, and cBioPortal data</li> </ul>"},{"location":"#mcp-resources","title":"MCP Resources","text":"<p>BioMCP provides the following resources through the MCP interface:</p>"},{"location":"#instructions-resource","title":"Instructions Resource","text":"<ul> <li><code>get_instructions</code>: Returns operational instructions and guidelines for effective use of BioMCP tools. This resource helps AI assistants understand best practices for biomedical research tasks.</li> </ul>"},{"location":"#researcher-persona-resource","title":"Researcher Persona Resource","text":"<ul> <li><code>get_researcher</code>: Provides a detailed biomedical researcher persona with extensive expertise across multiple domains. This persona helps AI assistants adopt appropriate research methodologies and communication styles for biomedical tasks.</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Claude Desktop Tutorial - Set up and use BioMCP with Claude Desktop</li> <li>MCP Inspector Tutorial - Test and debug BioMCP directly</li> <li>Python SDK Tutorial - Use BioMCP as a Python library</li> <li>MCP Client Tutorial - Integrate with MCP clients programmatically</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<ul> <li>AlphaGenome Setup Guide - Configure Google DeepMind's AlphaGenome for variant effect prediction</li> <li>AlphaGenome Prompt Examples - Example prompts and workflows for variant analysis with AI</li> <li>AlphaGenome with Docker - Run AlphaGenome in Docker containers</li> </ul>"},{"location":"#verification-and-testing","title":"Verification and Testing","text":"<p>The easiest way to test your BioMCP setup is with the MCP Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre> <p>This launches a web interface where you can test each BioMCP tool directly. For detailed instructions, see the MCP Inspector Tutorial.</p>"},{"location":"#additional-usage-options","title":"Additional Usage Options","text":"<p>While BioMCP is primarily designed as an MCP server for AI assistants, it can also be used in other ways:</p>"},{"location":"#command-line-interface","title":"Command Line Interface","text":"<p>BioMCP includes a comprehensive CLI for direct interaction with biomedical databases:</p> <pre><code># Examples of CLI usage\nbiomcp trial search --condition \"Melanoma\" --phase PHASE3\nbiomcp article search --gene BRAF --disease Melanoma  # Includes cBioPortal data\nbiomcp article search --gene BRAF --keyword V600E     # Mutation-specific search\nbiomcp variant search --gene TP53 --significance pathogenic\n</code></pre>"},{"location":"#python-sdk","title":"Python SDK","text":"<p>For programmatic access, BioMCP can be used as a Python library:</p> <pre><code># Install the package\npip install biomcp-python\n</code></pre> <p>See the Python SDK Tutorial for code examples.</p>"},{"location":"#mcp-client-integration","title":"MCP Client Integration","text":"<p>For developers building MCP-compatible applications, BioMCP can be integrated using the MCP client libraries. See the MCP Client Tutorial for details.</p>"},{"location":"#license","title":"License","text":"<p>BioMCP is licensed under the MIT License.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Europe PMC DOI Support for Article Fetching:</li> <li><code>article_getter</code> tool now accepts DOIs in addition to PMIDs</li> <li><code>fetch</code> unified tool supports DOIs for the article domain</li> <li>CLI <code>biomcp article get</code> command accepts both PMIDs and DOIs</li> <li>Automatically routes DOIs to Europe PMC API for preprint retrieval</li> <li>Supports mixed lists of PMIDs and DOIs in batch requests</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Preprint Fetch Error: Fixed \"Error 400: Could not retrieve publications\" when trying to fetch Europe PMC preprints found in search results</li> <li>Added DOI detection logic to distinguish from PMIDs</li> <li>Implemented Europe PMC article fetch functionality</li> <li>Updated routing logic in both unified and individual tools</li> </ul>"},{"location":"changelog/#040-2025-06-27","title":"[0.4.0] - 2025-06-27","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Dedicated Think Tool: Sequential thinking is now a separate, mandatory tool</li> <li><code>think</code> tool MUST be used before any search operations</li> <li>Provides systematic step-by-step analysis for all biomedical queries</li> <li>Includes automatic reminders if not used</li> <li>10 Individual Tools Restored: Direct access tools for specific functionality</li> <li>Article tools: <code>article_searcher</code>, <code>article_getter</code></li> <li>Trial tools: <code>trial_searcher</code>, <code>trial_getter</code>, <code>trial_protocol_getter</code>, <code>trial_references_getter</code>, <code>trial_outcomes_getter</code>, <code>trial_locations_getter</code></li> <li>Variant tools: <code>variant_searcher</code>, <code>variant_getter</code></li> <li>Enhanced cBioPortal Integration: Now available in individual tools</li> <li><code>article_searcher</code> and <code>variant_searcher</code> include <code>include_cbioportal</code> parameter</li> <li>Centralized helper module for consistent integration</li> <li>Thinking Usage Tracker: Monitors and encourages proper thinking tool usage</li> <li>Context-aware tracking across MCP sessions</li> <li>Automatic reminders in search results when thinking hasn't been used</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>13 Total Tools: 3 core tools (think, search, fetch) + 10 individual tools</li> <li>Sequential Thinking: Moved from <code>search(domain=\"thinking\")</code> to dedicated <code>think</code> tool</li> <li>Search Tool Simplified: Removed thinking domain and parameters from search tool</li> <li>Query Parameter: Changed from optional (<code>str | None = None</code>) to required with empty default (<code>str = \"\"</code>) for ChatGPT compatibility</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>MyVariant.info Timeouts: Fixed HTTP client not using configured 120s timeout</li> <li>Added \"myvariant\" to aggressive retry domains</li> <li>Improved error messages for timeout scenarios</li> <li>Optimized BRAF V600E query pattern</li> <li>Location Parameter Validation: Added proper validation for trial search location parameters</li> <li>Ensures lat/long are provided together</li> <li>Validates distance requires coordinates</li> </ul>"},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Code Organization: Created <code>cbioportal_helper.py</code> to centralize integration logic</li> <li>Type Safety: Added proper type annotations throughout new modules</li> <li>Error Handling: Consistent logger usage and error messages</li> </ul>"},{"location":"changelog/#030-2025-06-19","title":"[0.3.0] - 2025-06-19","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Unified Query Language: Integrated into the <code>search</code> tool</li> <li>Use <code>query</code> parameter for structured field syntax</li> <li>Natural language queries: <code>\"BRAF melanoma\"</code></li> <li>Field-specific queries: <code>\"gene:BRAF AND trials.condition:melanoma\"</code></li> <li>Cross-domain searches from a single query</li> <li>Support for boolean operators (AND, OR, NOT) and comparisons (&gt;, &lt;, ..)</li> <li>Schema Discovery: Access via <code>search(get_schema=True)</code></li> <li>Query Explanation: Use <code>explain_query=True</code> to see how queries are parsed</li> <li>Integrated Sequential Thinking: Access via <code>search(domain=\"thinking\")</code></li> <li>Clients should explicitly call this before biomedical searches</li> <li>Provides systematic step-by-step analysis</li> <li>Supports thought revision and branching</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Two Core Tools: <code>search</code> and <code>fetch</code> (following OpenAI MCP guidelines)</li> <li>Sequential Thinking Integration: Now accessible through <code>search(domain=\"thinking\")</code> instead of a separate tool</li> <li>Triple-Mode Search: The <code>search</code> tool supports sequential thinking, unified query, and legacy domain-based modes</li> <li>Backward Compatible: All existing integrations continue to work</li> </ul>"},{"location":"changelog/#enhanced","title":"Enhanced","text":"<ul> <li>Improved result formatting for all search domains</li> <li>Better handling of JSON string parameters from MCP clients</li> <li>More robust error handling and result parsing</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed variant fetch error with incorrect parameter names (<code>include_external</code> instead of <code>include_tcga</code>)</li> <li>Fixed article fetch error where <code>_article_details</code> was called with non-existent <code>fetch_full_text</code> parameter</li> <li>Fixed article search returning 0 results due to overly restrictive AND logic for keywords</li> <li>Fixed JSON parsing error in article fetch by calling <code>fetch_articles</code> directly with <code>output_json=True</code></li> <li>Fixed trial search \"'list' object has no attribute 'get'\" error by handling ClinicalTrials.gov API v2 response format</li> <li>Fixed trial search phase validation error by normalizing phase values (e.g., \"Phase 3\" \u2192 \"PHASE3\")</li> <li>Fixed trial search KeyError 'nct_id' by handling nested ClinicalTrials.gov API v2 structure in <code>format_results</code></li> <li>Fixed parameter validation errors by accepting both string and list types for search parameters</li> </ul>"},{"location":"changelog/#020-2025-06-19","title":"[0.2.0] - 2025-06-19","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>MCP Tools Consolidation: Consolidated 10 separate MCP tools into 2 unified tools (<code>search</code> and <code>fetch</code>) to align with OpenAI MCP guidelines</li> <li>Removed individual MCP tool decorators from legacy functions</li> <li>Legacy functions renamed with leading underscore to indicate internal use</li> <li>Sequential thinking tool removed from MCP interface (now internal)</li> </ul>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Unified Search Tool: Single <code>search</code> tool that handles articles, trials, and variants with domain parameter</li> <li>Unified Fetch Tool: Single <code>fetch</code> tool that retrieves details for any domain type</li> <li>OpenAI MCP Compatibility: Search results now follow OpenAI's standardized format with id, title, snippet, url, and metadata fields</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>CLI interface remains unchanged - all <code>biomcp</code> commands continue to work as before</li> <li>Internal functions preserved for backward compatibility with CLI</li> </ul>"},{"location":"changelog/#migration-guide","title":"Migration Guide","text":"<p>If you were using the MCP tools directly:</p> <ul> <li>Replace <code>article_searcher(...)</code> with <code>search(domain=\"article\", ...)</code></li> <li>Replace <code>trial_searcher(...)</code> with <code>search(domain=\"trial\", ...)</code></li> <li>Replace <code>variant_searcher(...)</code> with <code>search(domain=\"variant\", ...)</code></li> <li>Replace <code>article_details(pmid=X)</code> with <code>fetch(domain=\"article\", id=X)</code></li> <li>Replace <code>trial_protocol(nct_id=X)</code> with <code>fetch(domain=\"trial\", id=X, detail=\"protocol\")</code></li> <li>Remove usage of <code>sequential_thinking</code> tool (use LLM's internal reasoning instead)</li> </ul>"},{"location":"changelog/#011-2025-04-14","title":"[0.1.1] - 2025-04-14","text":"<ul> <li>Simplified <code>biomcp run</code>.</li> <li>Added tutorials on Claude Desktop, MCP Inspector, and Python SDK.</li> </ul>"},{"location":"changelog/#010-2025-04-08","title":"[0.1.0] - 2025-04-08","text":"<ul> <li>Initial release of BioMCP CLI and server.</li> <li>Support for searching ClinicalTrials.gov (<code>biomcp trial search</code>).</li> <li>Support for retrieving trial details (<code>biomcp trial get</code>).</li> <li>Support for searching PubMed/PubTator3 (<code>biomcp article search</code>).</li> <li>Support for retrieving article details (<code>biomcp article get</code>).</li> <li>Support for searching MyVariant.info (<code>biomcp variant search</code>).</li> <li>Support for retrieving variant details (<code>biomcp variant get</code>).</li> <li>Basic HTTP caching for API requests.</li> <li>Initial documentation structure.</li> </ul>"},{"location":"error-handling/","title":"Error Handling Guide","text":""},{"location":"error-handling/#overview","title":"Overview","text":"<p>BioMCP uses a consistent error handling pattern across all HTTP operations. This guide explains the error types, when they occur, and how to handle them.</p>"},{"location":"error-handling/#error-structure","title":"Error Structure","text":"<p>All HTTP operations return a tuple: <code>(data, error)</code> where one is always <code>None</code>.</p> <pre><code>data, error = await http_client.request_api(...)\nif error:\n    # Handle error\n    logger.error(f\"Request failed: {error.code} - {error.message}\")\nelse:\n    # Process data\n    process_result(data)\n</code></pre>"},{"location":"error-handling/#error-types","title":"Error Types","text":""},{"location":"error-handling/#network-errors","title":"Network Errors","text":"<ul> <li>When: Connection timeout, DNS resolution failure, network unreachable</li> <li>Error Code: Various HTTP client exceptions</li> <li>Handling: Retry with exponential backoff or fail gracefully</li> </ul>"},{"location":"error-handling/#http-status-errors","title":"HTTP Status Errors","text":"<ul> <li>When: Server returns 4xx or 5xx status codes</li> <li>Error Codes:</li> <li><code>400-499</code>: Client errors (bad request, unauthorized, not found)</li> <li><code>500-599</code>: Server errors (internal error, service unavailable)</li> <li>Handling:</li> <li>4xx: Fix request parameters or authentication</li> <li>5xx: Retry with backoff or use cached data</li> </ul>"},{"location":"error-handling/#circuit-breaker-errors","title":"Circuit Breaker Errors","text":"<ul> <li>When: Too many consecutive failures to a domain</li> <li>Error: Circuit breaker opens to prevent cascading failures</li> <li>Handling: Wait for recovery timeout or use alternative data source</li> </ul>"},{"location":"error-handling/#offline-mode-errors","title":"Offline Mode Errors","text":"<ul> <li>When: <code>BIOMCP_OFFLINE=true</code> and no cached data available</li> <li>Error: Request blocked in offline mode</li> <li>Handling: Use cached data only or inform user about offline status</li> </ul>"},{"location":"error-handling/#parse-errors","title":"Parse Errors","text":"<ul> <li>When: Response is not valid JSON or doesn't match expected schema</li> <li>Error: JSON decode error or validation error</li> <li>Handling: Log error and treat as service issue</li> </ul>"},{"location":"error-handling/#best-practices","title":"Best Practices","text":""},{"location":"error-handling/#1-always-check-errors","title":"1. Always Check Errors","text":"<pre><code># \u274c Bad - ignoring error\ndata, _ = await http_client.request_api(...)\nprocess(data)  # data might be None!\n\n# \u2705 Good - checking error\ndata, error = await http_client.request_api(...)\nif error:\n    logger.warning(f\"Failed to fetch data: {error}\")\n    return None\nprocess(data)\n</code></pre>"},{"location":"error-handling/#2-provide-context-in-error-messages","title":"2. Provide Context in Error Messages","text":"<pre><code># \u274c Bad - generic error\nif error:\n    logger.error(\"Request failed\")\n\n# \u2705 Good - contextual error\nif error:\n    logger.error(f\"Failed to fetch gene {gene_id} from cBioPortal: {error.message}\")\n</code></pre>"},{"location":"error-handling/#3-graceful-degradation","title":"3. Graceful Degradation","text":"<pre><code>async def get_variant_with_fallback(variant_id: str):\n    # Try primary source\n    data, error = await primary_source.get_variant(variant_id)\n    if not error:\n        return data\n\n    logger.warning(f\"Primary source failed: {error}, trying secondary\")\n\n    # Try secondary source\n    data, error = await secondary_source.get_variant(variant_id)\n    if not error:\n        return data\n\n    # Use cached data as last resort\n    return get_cached_variant(variant_id)\n</code></pre>"},{"location":"error-handling/#4-user-friendly-error-messages","title":"4. User-Friendly Error Messages","text":"<pre><code>def format_error_for_user(error: RequestError) -&gt; str:\n    if error.code &gt;= 500:\n        return \"The service is temporarily unavailable. Please try again later.\"\n    elif error.code == 404:\n        return \"The requested data was not found.\"\n    elif error.code == 401:\n        return \"Authentication required. Please check your credentials.\"\n    elif \"OFFLINE\" in str(error):\n        return \"You are in offline mode. Only cached data is available.\"\n    else:\n        return \"An error occurred while fetching data. Please try again.\"\n</code></pre>"},{"location":"error-handling/#testing-error-conditions","title":"Testing Error Conditions","text":""},{"location":"error-handling/#1-simulate-network-errors","title":"1. Simulate Network Errors","text":"<pre><code>with patch(\"biomcp.http_client.call_http\") as mock:\n    mock.side_effect = Exception(\"Network error\")\n    data, error = await client.fetch_data()\n    assert error is not None\n    assert data is None\n</code></pre>"},{"location":"error-handling/#2-test-circuit-breaker","title":"2. Test Circuit Breaker","text":"<pre><code># Simulate multiple failures\nfor _ in range(5):\n    with patch(\"biomcp.http_client.call_http\") as mock:\n        mock.return_value = (500, \"Server Error\")\n        await client.fetch_data()\n\n# Circuit should be open\ndata, error = await client.fetch_data()\nassert error is not None\nassert \"circuit\" in error.message.lower()\n</code></pre>"},{"location":"error-handling/#3-test-offline-mode","title":"3. Test Offline Mode","text":"<pre><code>with patch.dict(os.environ, {\"BIOMCP_OFFLINE\": \"true\"}):\n    data, error = await client.fetch_data()\n    # Should only return cached data or error\n</code></pre>"},{"location":"error-handling/#common-patterns","title":"Common Patterns","text":""},{"location":"error-handling/#retry-with-backoff","title":"Retry with Backoff","text":"<p>The centralized HTTP client automatically retries with exponential backoff for:</p> <ul> <li>Network errors</li> <li>5xx server errors</li> <li>Rate limit errors (429)</li> </ul>"},{"location":"error-handling/#caching","title":"Caching","text":"<p>Failed requests don't overwrite cached data, ensuring availability during outages.</p>"},{"location":"error-handling/#rate-limiting","title":"Rate Limiting","text":"<p>Requests are automatically rate-limited per domain to prevent overwhelming services.</p>"},{"location":"error-handling/#debugging","title":"Debugging","text":"<p>Enable debug logging to see all HTTP requests and errors:</p> <pre><code>import logging\nlogging.getLogger(\"biomcp.http_client\").setLevel(logging.DEBUG)\n</code></pre> <p>This will show:</p> <ul> <li>All HTTP requests with URLs and methods</li> <li>Response status codes and times</li> <li>Error details and retry attempts</li> <li>Circuit breaker state changes</li> </ul>"},{"location":"genomoncology/","title":"GenomOncology: Powering the Future of Precision Medicine","text":""},{"location":"genomoncology/#who-we-are","title":"Who We Are","text":"<p>GenomOncology is a leading healthcare technology company dedicated to transforming precision medicine through innovative genomic analysis solutions. We connect complex genomic data and actionable clinical insights, enabling healthcare providers to deliver personalized treatment strategies for cancer patients.</p>"},{"location":"genomoncology/#our-commitment-to-open-healthcare","title":"Our Commitment to Open Healthcare","text":"<p>We believe in the power of open source systems to further the impact of precision medicine. Through the BioMCP initiative we hope to engage the healthcare community in this open-access ecosystem designed to accelerate innovation in precision medicine. By evolving this open framework, we're moving to create a more collaborative, efficient, and transparent healthcare environment.</p>"},{"location":"genomoncology/#our-precision-oncology-platform","title":"Our Precision Oncology Platform","text":"<p>Today, our proprietary knowledge management system, known as the Precision Oncology Platform (POP), serves as the backbone of our solutions, continuously aggregating and curating the latest genomic research, clinical trials, and treatment guidelines. This system:</p> <ul> <li>Processes and harmonizes data from 40+ scientific and clinical sources</li> <li>Updates weekly to incorporate the newest research findings</li> <li>Utilizes advanced NLP to extract meaningful insights from unstructured text</li> <li>Maintains a comprehensive database of 25,000+ variant-drug associations</li> </ul>"},{"location":"genomoncology/#real-world-impact","title":"Real-World Impact","text":"<p>Our technology currently powers precision medicine programs at:</p> <ul> <li>120+ hospitals and cancer centers</li> <li>15 academic medical centers</li> <li>8 commercial reference laboratories</li> <li>10+ pharmaceutical research programs</li> </ul> <p>Processing over 100,000 genomic profiles monthly, our solutions have helped match thousands of patients to targeted therapies and clinical trials, significantly improving outcomes.</p>"},{"location":"genomoncology/#join-us-in-the-next-phase-of-transforming-healthcare","title":"Join Us In The Next Phase of Transforming Healthcare","text":"<p>By contributing to the BioMCP ecosystem, we're inviting developers to collaborate with us in creating the next generation of precision medicine tools. Whether you're looking to build applications that leverage genomic data, create integrations with existing healthcare systems, or explore novel approaches to biomarker analysis, GenomOncology provides the technological foundation to bring your ideas to life.</p>"},{"location":"genomoncology/#get-started","title":"Get Started","text":"<p>Ready to explore what's possible with GenomOncology and BioMCP?</p> <ul> <li>Clone our repositories on GitHub</li> <li>Register for API access</li> <li>Join our developer community</li> </ul> <p>Together, we can accelerate precision medicine through open collaboration and innovation.</p> <p>GenomOncology: Transforming data into treatment decisions</p>"},{"location":"http-client-guide/","title":"BioMCP HTTP Client Guide","text":""},{"location":"http-client-guide/#overview","title":"Overview","text":"<p>BioMCP uses a centralized HTTP client for all external API calls. This provides:</p> <ul> <li>Consistent error handling and retry logic</li> <li>Request/response caching</li> <li>Rate limiting per domain</li> <li>Circuit breaker for fault tolerance</li> <li>Offline mode support</li> <li>Comprehensive endpoint tracking</li> </ul>"},{"location":"http-client-guide/#migration-from-direct-http-libraries","title":"Migration from Direct HTTP Libraries","text":""},{"location":"http-client-guide/#before-direct-httpx-usage","title":"Before (Direct httpx usage):","text":"<pre><code>import httpx\n\nasync def fetch_gene(gene: str):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.example.com/genes/{gene}\")\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"http-client-guide/#after-centralized-client","title":"After (Centralized client):","text":"<pre><code>from biomcp import http_client\n\nasync def fetch_gene(gene: str):\n    data, error = await http_client.request_api(\n        url=f\"https://api.example.com/genes/{gene}\",\n        request={},\n        domain=\"example\"\n    )\n    if error:\n        # Handle error consistently\n        return None\n    return data\n</code></pre>"},{"location":"http-client-guide/#error-handling","title":"Error Handling","text":"<p>The centralized client uses a consistent error handling pattern:</p> <pre><code>result, error = await http_client.request_api(...)\n\nif error:\n    # error is a RequestError object with:\n    # - error.code: HTTP status code or error type\n    # - error.message: Human-readable error message\n    # - error.details: Additional context\n    logger.error(f\"Request failed: {error.message}\")\n    return None  # or handle appropriately\n</code></pre>"},{"location":"http-client-guide/#error-handling-guidelines","title":"Error Handling Guidelines","text":"<ol> <li>For optional data: Return <code>None</code> when the data is not critical</li> <li>For required data: Raise an exception or return an error to the caller</li> <li>For batch operations: Collect errors and report at the end</li> <li>For user-facing operations: Provide clear, actionable error messages</li> </ol>"},{"location":"http-client-guide/#creating-domain-specific-adapters","title":"Creating Domain-Specific Adapters","text":"<p>For complex APIs, create an adapter class:</p> <pre><code>from biomcp import http_client\nfrom biomcp.http_client import RequestError\n\nclass MyAPIAdapter:\n    \"\"\"Adapter for MyAPI using centralized HTTP client.\"\"\"\n\n    def __init__(self):\n        self.base_url = \"https://api.example.com\"\n\n    async def get_resource(self, resource_id: str) -&gt; tuple[dict | None, RequestError | None]:\n        \"\"\"Fetch a resource by ID.\n\n        Returns:\n            Tuple of (data, error) where one is always None\n        \"\"\"\n        return await http_client.request_api(\n            url=f\"{self.base_url}/resources/{resource_id}\",\n            request={},\n            domain=\"example\",\n            endpoint_key=\"example_resources\"\n        )\n</code></pre>"},{"location":"http-client-guide/#configuration","title":"Configuration","text":""},{"location":"http-client-guide/#cache-ttl-time-to-live","title":"Cache TTL (Time To Live)","text":"<pre><code># Cache for 1 hour (3600 seconds)\ndata, error = await http_client.request_api(\n    url=url,\n    request=request,\n    cache_ttl=3600\n)\n\n# Disable caching for this request\ndata, error = await http_client.request_api(\n    url=url,\n    request=request,\n    cache_ttl=0\n)\n</code></pre>"},{"location":"http-client-guide/#rate-limiting","title":"Rate Limiting","text":"<p>Rate limits are configured per domain in <code>http_client.py</code>:</p> <pre><code># Default rate limits\nrate_limits = {\n    \"ncbi.nlm.nih.gov\": 20,  # 20 requests/second\n    \"clinicaltrials.gov\": 10,  # 10 requests/second\n    \"myvariant.info\": 1000/3600,  # 1000 requests/hour\n}\n</code></pre>"},{"location":"http-client-guide/#circuit-breaker","title":"Circuit Breaker","text":"<p>The circuit breaker prevents cascading failures:</p> <ul> <li>Closed: Normal operation</li> <li>Open: Failing fast after threshold exceeded</li> <li>Half-Open: Testing if service recovered</li> </ul> <p>Configure thresholds:</p> <pre><code>CIRCUIT_BREAKER_FAILURE_THRESHOLD = 5  # Open after 5 failures\nCIRCUIT_BREAKER_RECOVERY_TIMEOUT = 60  # Try again after 60 seconds\n</code></pre>"},{"location":"http-client-guide/#offline-mode","title":"Offline Mode","text":"<p>Enable offline mode to only serve cached responses:</p> <pre><code>export BIOMCP_OFFLINE=true\nbiomcp run\n</code></pre> <p>In offline mode:</p> <ul> <li>Only cached responses are returned</li> <li>No external HTTP requests are made</li> <li>Missing cache entries return None with appropriate error</li> </ul>"},{"location":"http-client-guide/#performance-tuning","title":"Performance Tuning","text":""},{"location":"http-client-guide/#connection-pooling","title":"Connection Pooling","text":"<p>The HTTP client maintains connection pools per domain:</p> <pre><code># Configure in http_client_simple.py\nlimits = httpx.Limits(\n    max_keepalive_connections=20,\n    max_connections=100,\n    keepalive_expiry=30\n)\n</code></pre>"},{"location":"http-client-guide/#concurrent-requests","title":"Concurrent Requests","text":"<p>For parallel requests to the same API:</p> <pre><code>import asyncio\n\n# Fetch multiple resources concurrently\ntasks = [\n    http_client.request_api(f\"/resource/{i}\", {}, domain=\"example\")\n    for i in range(10)\n]\nresults = await asyncio.gather(*tasks)\n</code></pre>"},{"location":"http-client-guide/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"http-client-guide/#request-metrics","title":"Request Metrics","text":"<p>The client tracks metrics per endpoint:</p> <ul> <li>Request count</li> <li>Error count</li> <li>Cache hit/miss ratio</li> <li>Average response time</li> </ul> <p>Access metrics:</p> <pre><code>from biomcp.http_client import get_metrics\nmetrics = get_metrics()\n</code></pre>"},{"location":"http-client-guide/#debug-logging","title":"Debug Logging","text":"<p>Enable debug logging to see all HTTP requests:</p> <pre><code>import logging\nlogging.getLogger(\"biomcp.http_client\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"http-client-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Always use the centralized client for external HTTP calls</li> <li>Register new endpoints in the endpoint registry</li> <li>Set appropriate cache TTLs based on data volatility</li> <li>Handle errors gracefully with user-friendly messages</li> <li>Test with offline mode to ensure cache coverage</li> <li>Monitor rate limits to avoid API throttling</li> <li>Use domain-specific adapters for complex APIs</li> </ol>"},{"location":"http-client-guide/#endpoint-registration","title":"Endpoint Registration","text":"<p>Register new endpoints in <code>endpoint_registry.py</code>:</p> <pre><code>registry.register(\n    \"my_api_endpoint\",\n    EndpointInfo(\n        url=\"https://api.example.com/v1/data\",\n        category=EndpointCategory.BIOMEDICAL_LITERATURE,\n        data_types=[DataType.RESEARCH_ARTICLES],\n        description=\"My API for fetching data\",\n        compliance_notes=\"Public API, no PII\",\n        rate_limit=\"100 requests/minute\"\n    )\n)\n</code></pre> <p>This ensures the endpoint is documented and tracked properly.</p>"},{"location":"integration-testing/","title":"Integration Testing Guide","text":""},{"location":"integration-testing/#overview","title":"Overview","text":"<p>BioMCP includes integration tests that make real API calls to external services. These tests verify that our integrations work correctly with live data but can be affected by API availability, rate limits, and data changes.</p>"},{"location":"integration-testing/#running-integration-tests","title":"Running Integration Tests","text":""},{"location":"integration-testing/#run-all-tests-including-integration","title":"Run All Tests (Including Integration)","text":"<pre><code>make test\n</code></pre>"},{"location":"integration-testing/#run-only-integration-tests","title":"Run Only Integration Tests","text":"<pre><code>pytest -m integration\n</code></pre>"},{"location":"integration-testing/#skip-integration-tests","title":"Skip Integration Tests","text":"<pre><code>pytest -m \"not integration\"\n</code></pre>"},{"location":"integration-testing/#handling-flaky-tests","title":"Handling Flaky Tests","text":"<p>Integration tests may fail or skip for various reasons:</p>"},{"location":"integration-testing/#1-api-unavailability","title":"1. API Unavailability","text":"<p>Symptom: Tests skip with \"API returned no data\" message Cause: The external service is down or experiencing issues Action: Re-run tests later or check service status</p>"},{"location":"integration-testing/#2-rate-limiting","title":"2. Rate Limiting","text":"<p>Symptom: Multiple test failures after initial successes Cause: Too many requests in a short time Action: Run tests with delays between them or use API tokens</p>"},{"location":"integration-testing/#3-data-changes","title":"3. Data Changes","text":"<p>Symptom: Assertions about specific data fail Cause: The external data has changed (e.g., new mutations discovered) Action: Update tests to use more flexible assertions</p>"},{"location":"integration-testing/#test-design-principles","title":"Test Design Principles","text":""},{"location":"integration-testing/#1-graceful-skipping","title":"1. Graceful Skipping","text":"<p>Tests should skip rather than fail when:</p> <ul> <li>API returns no data</li> <li>Service is unavailable</li> <li>Rate limits are hit</li> </ul> <p>Example:</p> <pre><code>if not data or data.total_count == 0:\n    pytest.skip(\"API returned no data - possible service issue\")\n</code></pre>"},{"location":"integration-testing/#2-flexible-assertions","title":"2. Flexible Assertions","text":"<p>Avoid assertions on specific data values that might change:</p> <p>\u274c Bad: Expecting exact mutation counts</p> <pre><code>assert summary.total_mutations == 1234\n</code></pre> <p>\u2705 Good: Checking data exists and has reasonable structure</p> <pre><code>assert summary.total_mutations &gt; 0\nassert hasattr(summary, 'hotspots')\n</code></pre>"},{"location":"integration-testing/#3-retry-logic","title":"3. Retry Logic","text":"<p>For critical tests, implement retry with delay:</p> <pre><code>async def fetch_with_retry(client, resource, max_attempts=2, delay=1.0):\n    for attempt in range(max_attempts):\n        result = await client.get(resource)\n        if result and result.data:\n            return result\n        if attempt &lt; max_attempts - 1:\n            await asyncio.sleep(delay)\n    return None\n</code></pre>"},{"location":"integration-testing/#4-cache-management","title":"4. Cache Management","text":"<p>Clear caches before tests to ensure fresh data:</p> <pre><code>from biomcp.utils.request_cache import clear_cache\nawait clear_cache()\n</code></pre>"},{"location":"integration-testing/#common-integration-test-patterns","title":"Common Integration Test Patterns","text":""},{"location":"integration-testing/#testing-search-functionality","title":"Testing Search Functionality","text":"<pre><code>@pytest.mark.integration\nasync def test_gene_search(self):\n    client = SearchClient()\n    results = await client.search(\"BRAF\")\n\n    # Flexible assertions\n    assert results is not None\n    if results.count &gt; 0:\n        assert results.items[0].gene_symbol == \"BRAF\"\n    else:\n        pytest.skip(\"No results returned - API may be unavailable\")\n</code></pre>"},{"location":"integration-testing/#testing-data-retrieval","title":"Testing Data Retrieval","text":"<pre><code>@pytest.mark.integration\nasync def test_variant_details(self):\n    client = VariantClient()\n    variant = await client.get_variant(\"rs121913529\")\n\n    if not variant:\n        pytest.skip(\"Variant not found - may have been removed from database\")\n\n    # Check structure, not specific values\n    assert hasattr(variant, 'chromosome')\n    assert hasattr(variant, 'position')\n</code></pre>"},{"location":"integration-testing/#debugging-failed-integration-tests","title":"Debugging Failed Integration Tests","text":""},{"location":"integration-testing/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>BIOMCP_LOG_LEVEL=DEBUG pytest tests/integration/test_failing.py -v\n</code></pre>"},{"location":"integration-testing/#2-check-api-status","title":"2. Check API Status","text":"<p>Many services provide status pages:</p> <ul> <li>PubMed: https://www.ncbi.nlm.nih.gov/home/about/website-updates/</li> <li>ClinicalTrials.gov: https://clinicaltrials.gov/about/announcements</li> <li>cBioPortal: https://www.cbioportal.org/</li> </ul>"},{"location":"integration-testing/#3-inspect-response-data","title":"3. Inspect Response Data","text":"<p>Add debugging output to see actual responses:</p> <pre><code>if not expected_data:\n    print(f\"Unexpected response: {response}\")\n    pytest.skip(\"Data structure changed\")\n</code></pre>"},{"location":"integration-testing/#environment-variables-for-testing","title":"Environment Variables for Testing","text":""},{"location":"integration-testing/#api-tokens","title":"API Tokens","text":"<p>Some services provide higher rate limits with authentication:</p> <pre><code>export CBIO_TOKEN=\"your-token-here\"\nexport PUBMED_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"integration-testing/#offline-mode","title":"Offline Mode","text":"<p>Test offline behavior:</p> <pre><code>export BIOMCP_OFFLINE=true\npytest tests/\n</code></pre>"},{"location":"integration-testing/#custom-timeouts","title":"Custom Timeouts","text":"<p>Adjust timeouts for slow connections:</p> <pre><code>export BIOMCP_REQUEST_TIMEOUT=60\npytest tests/integration/\n</code></pre>"},{"location":"integration-testing/#cicd-considerations","title":"CI/CD Considerations","text":""},{"location":"integration-testing/#1-separate-test-runs","title":"1. Separate Test Runs","text":"<p>Run integration tests separately in CI:</p> <pre><code>- name: Unit Tests\n  run: pytest -m \"not integration\"\n\n- name: Integration Tests\n  run: pytest -m integration\n  continue-on-error: true\n</code></pre>"},{"location":"integration-testing/#2-scheduled-runs","title":"2. Scheduled Runs","text":"<p>Run integration tests on a schedule to detect API changes:</p> <pre><code>on:\n  schedule:\n    - cron: \"0 6 * * *\" # Daily at 6 AM\n</code></pre>"},{"location":"integration-testing/#3-result-monitoring","title":"3. Result Monitoring","text":"<p>Track integration test success rates over time to identify patterns.</p>"},{"location":"integration-testing/#best-practices","title":"Best Practices","text":"<ol> <li>Keep integration tests focused - Test integration points, not business logic</li> <li>Use reasonable timeouts - Don't wait forever for slow APIs</li> <li>Document expected failures - Add comments explaining why tests might skip</li> <li>Monitor external changes - Subscribe to API change notifications</li> <li>Provide escape hatches - Allow skipping integration tests when needed</li> </ol>"},{"location":"migration-examples/","title":"Migration Examples: Direct HTTP to Centralized Client","text":"<p>This guide provides examples of migrating from direct HTTP library usage to the centralized BioMCP HTTP client.</p>"},{"location":"migration-examples/#basic-get-request","title":"Basic GET Request","text":""},{"location":"migration-examples/#before-httpx","title":"Before (httpx)","text":"<pre><code>import httpx\n\nasync def get_gene_info(gene_symbol: str) -&gt; dict:\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\n            f\"https://api.example.com/genes/{gene_symbol}\",\n            timeout=30.0\n        )\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"migration-examples/#after-centralized-client","title":"After (Centralized Client)","text":"<pre><code>from biomcp import http_client\n\nasync def get_gene_info(gene_symbol: str) -&gt; dict | None:\n    data, error = await http_client.request_api(\n        url=f\"https://api.example.com/genes/{gene_symbol}\",\n        request={},\n        domain=\"example\",\n        endpoint_key=\"example_genes\"\n    )\n    if error:\n        logger.error(f\"Failed to fetch gene {gene_symbol}: {error.message}\")\n        return None\n    return data\n</code></pre>"},{"location":"migration-examples/#post-request-with-json-body","title":"POST Request with JSON Body","text":""},{"location":"migration-examples/#before-httpx_1","title":"Before (httpx)","text":"<pre><code>async def search_variants(query: dict) -&gt; list:\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"https://api.example.com/variants/search\",\n            json=query,\n            headers={\"Authorization\": \"Bearer token123\"}\n        )\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"migration-examples/#after-centralized-client_1","title":"After (Centralized Client)","text":"<pre><code>async def search_variants(query: dict) -&gt; list:\n    # Headers can be passed via adapter or request\n    data, error = await http_client.request_api(\n        url=\"https://api.example.com/variants/search\",\n        request=query,\n        method=\"POST\",\n        domain=\"example\",\n        endpoint_key=\"example_variant_search\"\n    )\n    if error:\n        return []\n    return data\n</code></pre>"},{"location":"migration-examples/#retry-logic","title":"Retry Logic","text":""},{"location":"migration-examples/#before-manual-retry","title":"Before (Manual Retry)","text":"<pre><code>import asyncio\nimport httpx\n\nasync def fetch_with_retry(url: str, max_retries: int = 3):\n    for attempt in range(max_retries):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                return response.json()\n        except httpx.HTTPStatusError as e:\n            if e.response.status_code in [429, 500, 502, 503, 504]:\n                if attempt &lt; max_retries - 1:\n                    await asyncio.sleep(2 ** attempt)\n                    continue\n            raise\n        except httpx.RequestError:\n            if attempt &lt; max_retries - 1:\n                await asyncio.sleep(2 ** attempt)\n                continue\n            raise\n</code></pre>"},{"location":"migration-examples/#after-built-in-retry","title":"After (Built-in Retry)","text":"<pre><code>async def fetch_with_retry(url: str):\n    # Retry is built into the centralized client\n    data, error = await http_client.request_api(\n        url=url,\n        request={},\n        domain=\"example\",\n        enable_retry=True  # Default is True\n    )\n    return data, error\n</code></pre>"},{"location":"migration-examples/#authenticated-requests","title":"Authenticated Requests","text":""},{"location":"migration-examples/#before-direct-headers","title":"Before (Direct Headers)","text":"<pre><code>class APIClient:\n    def __init__(self, api_key: str):\n        self.headers = {\"Authorization\": f\"Bearer {api_key}\"}\n\n    async def get_data(self, endpoint: str):\n        async with httpx.AsyncClient() as client:\n            response = await client.get(\n                f\"https://api.example.com/{endpoint}\",\n                headers=self.headers\n            )\n            return response.json()\n</code></pre>"},{"location":"migration-examples/#after-using-adapter","title":"After (Using Adapter)","text":"<pre><code>from biomcp import http_client\nimport json\n\nclass APIAdapter:\n    def __init__(self, api_key: str):\n        self.base_url = \"https://api.example.com\"\n        self.headers = {\"Authorization\": f\"Bearer {api_key}\"}\n\n    async def get_data(self, endpoint: str):\n        # Pass headers through request\n        request_data = {\n            \"_headers\": json.dumps(self.headers)\n        }\n\n        data, error = await http_client.request_api(\n            url=f\"{self.base_url}/{endpoint}\",\n            request=request_data,\n            domain=\"example\"\n        )\n        return data, error\n</code></pre>"},{"location":"migration-examples/#parallel-requests","title":"Parallel Requests","text":""},{"location":"migration-examples/#before-asynciogather","title":"Before (asyncio.gather)","text":"<pre><code>async def fetch_multiple_genes(gene_list: list[str]):\n    async with httpx.AsyncClient() as client:\n        tasks = [\n            client.get(f\"https://api.example.com/genes/{gene}\")\n            for gene in gene_list\n        ]\n        responses = await asyncio.gather(*tasks, return_exceptions=True)\n\n        results = []\n        for resp in responses:\n            if isinstance(resp, Exception):\n                results.append(None)\n            else:\n                results.append(resp.json())\n        return results\n</code></pre>"},{"location":"migration-examples/#after-same-pattern-better-error-handling","title":"After (Same Pattern, Better Error Handling)","text":"<pre><code>async def fetch_multiple_genes(gene_list: list[str]):\n    tasks = [\n        http_client.request_api(\n            url=f\"https://api.example.com/genes/{gene}\",\n            request={},\n            domain=\"example\"\n        )\n        for gene in gene_list\n    ]\n\n    results = await asyncio.gather(*tasks)\n\n    # Process results with consistent error handling\n    gene_data = []\n    for gene, (data, error) in zip(gene_list, results):\n        if error:\n            logger.warning(f\"Failed to fetch {gene}: {error.message}\")\n            gene_data.append(None)\n        else:\n            gene_data.append(data)\n\n    return gene_data\n</code></pre>"},{"location":"migration-examples/#session-management","title":"Session Management","text":""},{"location":"migration-examples/#before-reusing-client","title":"Before (Reusing Client)","text":"<pre><code>class DataFetcher:\n    def __init__(self):\n        self.client = httpx.AsyncClient(timeout=30.0)\n\n    async def fetch_many(self, urls: list[str]):\n        results = []\n        for url in urls:\n            resp = await self.client.get(url)\n            results.append(resp.json())\n        return results\n\n    async def close(self):\n        await self.client.aclose()\n</code></pre>"},{"location":"migration-examples/#after-connection-pooling-is-automatic","title":"After (Connection Pooling is Automatic)","text":"<pre><code>class DataFetcher:\n    async def fetch_many(self, urls: list[str]):\n        # Connection pooling is handled automatically\n        results = []\n        for url in urls:\n            data, error = await http_client.request_api(\n                url=url,\n                request={},\n                domain=\"example\"\n            )\n            if error:\n                results.append(None)\n            else:\n                results.append(data)\n        return results\n</code></pre>"},{"location":"migration-examples/#error-type-handling","title":"Error Type Handling","text":""},{"location":"migration-examples/#before-multiple-exception-types","title":"Before (Multiple Exception Types)","text":"<pre><code>try:\n    response = await client.get(url)\n    response.raise_for_status()\n    data = response.json()\nexcept httpx.TimeoutException:\n    logger.error(\"Request timed out\")\n    return None\nexcept httpx.HTTPStatusError as e:\n    logger.error(f\"HTTP {e.response.status_code}\")\n    return None\nexcept httpx.RequestError as e:\n    logger.error(f\"Request failed: {e}\")\n    return None\nexcept json.JSONDecodeError:\n    logger.error(\"Invalid JSON response\")\n    return None\n</code></pre>"},{"location":"migration-examples/#after-unified-error-handling","title":"After (Unified Error Handling)","text":"<pre><code>data, error = await http_client.request_api(url, {}, domain=\"example\")\n\nif error:\n    # All error types are normalized to RequestError\n    logger.error(f\"Request failed: {error.code} - {error.message}\")\n    if error.details:\n        logger.debug(f\"Error details: {error.details}\")\n    return None\n\nreturn data\n</code></pre>"},{"location":"migration-examples/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Always check for errors: The centralized client returns <code>(data, error)</code> tuples</li> <li>Use domain-specific adapters: For complex APIs, create an adapter class</li> <li>Leverage built-in features: Retry, caching, and rate limiting are automatic</li> <li>Register endpoints: Add new endpoints to the registry for tracking</li> <li>Set appropriate cache TTLs: Based on how often the data changes</li> <li>Use endpoint keys: For better metrics and debugging</li> </ol>"},{"location":"performance-optimizations/","title":"Performance Optimizations","text":"<p>This document describes the performance optimizations implemented in BioMCP to improve response times and throughput.</p>"},{"location":"performance-optimizations/#overview","title":"Overview","text":"<p>BioMCP has been optimized for high-performance biomedical data retrieval through several key improvements:</p> <ul> <li>65% faster test execution (from ~120s to ~42s)</li> <li>Reduced API calls through intelligent caching and batching</li> <li>Lower latency via connection pooling and prefetching</li> <li>Better resource utilization with parallel processing</li> </ul>"},{"location":"performance-optimizations/#key-optimizations","title":"Key Optimizations","text":""},{"location":"performance-optimizations/#1-connection-pooling","title":"1. Connection Pooling","text":"<p>HTTP connections are now reused across requests, eliminating connection establishment overhead.</p> <p>Configuration:</p> <ul> <li><code>BIOMCP_USE_CONNECTION_POOL</code> - Enable/disable pooling (default: \"true\")</li> <li>Automatically manages pools per event loop</li> <li>Graceful cleanup on shutdown</li> </ul> <p>Impact: ~30% reduction in request latency for sequential operations</p>"},{"location":"performance-optimizations/#2-parallel-test-execution","title":"2. Parallel Test Execution","text":"<p>Tests now run in parallel using pytest-xdist, dramatically reducing test suite execution time.</p> <p>Usage:</p> <pre><code>make test  # Automatically uses parallel execution\n</code></pre> <p>Impact: ~5x faster test execution</p>"},{"location":"performance-optimizations/#3-request-batching","title":"3. Request Batching","text":"<p>Multiple API requests are batched together when possible, particularly for cBioPortal queries.</p> <p>Features:</p> <ul> <li>Automatic batching based on size/time thresholds</li> <li>Configurable batch size (default: 5 for cBioPortal)</li> <li>Error isolation per request</li> </ul> <p>Impact: Up to 80% reduction in API calls for bulk operations</p>"},{"location":"performance-optimizations/#4-smart-caching","title":"4. Smart Caching","text":"<p>Multiple caching layers optimize repeated queries:</p> <ul> <li>LRU Cache: Memory-bounded caching for recent requests</li> <li>Hash-based keys: 10x faster cache key generation</li> <li>Shared validation context: Eliminates redundant gene/entity validations</li> </ul> <p>Configuration:</p> <ul> <li>Cache size: 1000 entries (configurable)</li> <li>TTL: 5-30 minutes depending on data type</li> </ul>"},{"location":"performance-optimizations/#5-prefetching","title":"5. Prefetching","text":"<p>Common entities are prefetched on startup to warm caches:</p> <ul> <li>Top genes: BRAF, EGFR, TP53, KRAS, etc.</li> <li>Common diseases: lung cancer, breast cancer, etc.</li> <li>Frequent chemicals: osimertinib, pembrolizumab, etc.</li> </ul> <p>Impact: First queries for common entities are instant</p>"},{"location":"performance-optimizations/#6-pagination-support","title":"6. Pagination Support","text":"<p>Europe PMC searches now use pagination for large result sets:</p> <ul> <li>Optimal page size: 25 results</li> <li>Progressive loading</li> <li>Memory-efficient processing</li> </ul>"},{"location":"performance-optimizations/#7-conditional-metrics","title":"7. Conditional Metrics","text":"<p>Performance metrics are only collected when explicitly enabled, reducing overhead.</p> <p>Configuration:</p> <ul> <li><code>BIOMCP_METRICS_ENABLED</code> - Enable metrics (default: \"false\")</li> </ul>"},{"location":"performance-optimizations/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"performance-optimizations/#api-response-times","title":"API Response Times","text":"Operation Before After Improvement Single gene search 850ms 320ms 62% Bulk variant lookup 4.2s 1.1s 74% Article search with cBioPortal 2.1s 780ms 63%"},{"location":"performance-optimizations/#resource-usage","title":"Resource Usage","text":"Metric Before After Improvement Memory (idle) 145MB 152MB +5% Memory (peak) 512MB 385MB -25% CPU (avg) 35% 28% -20%"},{"location":"performance-optimizations/#best-practices","title":"Best Practices","text":"<ol> <li>Keep connection pooling enabled unless experiencing issues</li> <li>Use the unified search methods to benefit from parallel execution</li> <li>Batch operations when performing multiple lookups</li> <li>Monitor cache hit rates in production environments</li> </ol>"},{"location":"performance-optimizations/#troubleshooting","title":"Troubleshooting","text":""},{"location":"performance-optimizations/#connection-pool-issues","title":"Connection Pool Issues","text":"<p>If experiencing connection errors:</p> <ol> <li>Disable pooling: <code>export BIOMCP_USE_CONNECTION_POOL=false</code></li> <li>Check for firewall/proxy issues</li> <li>Verify SSL certificates</li> </ol>"},{"location":"performance-optimizations/#memory-usage","title":"Memory Usage","text":"<p>If memory usage is high:</p> <ol> <li>Reduce cache size in <code>request_cache.py</code></li> <li>Lower connection pool limits</li> <li>Disable prefetching by removing the lifespan hook</li> </ol>"},{"location":"performance-optimizations/#performance-regression","title":"Performance Regression","text":"<p>To identify performance issues:</p> <ol> <li>Enable metrics: <code>export BIOMCP_METRICS_ENABLED=true</code></li> <li>Check slow operations in logs</li> <li>Profile with <code>py-spy</code> or similar tools</li> </ol>"},{"location":"performance-optimizations/#future-optimizations","title":"Future Optimizations","text":"<p>Planned improvements include:</p> <ul> <li>GraphQL batching for complex queries</li> <li>Redis integration for distributed caching</li> <li>WebSocket support for real-time updates</li> <li>GPU acceleration for variant analysis</li> </ul>"},{"location":"transport-protocol/","title":"Transport Protocol Guide","text":"<p>This guide explains BioMCP's transport protocol options, with a focus on the new Streamable HTTP transport that provides better scalability and reliability for production deployments.</p>"},{"location":"transport-protocol/#overview","title":"Overview","text":"<p>BioMCP supports multiple transport protocols to accommodate different deployment scenarios:</p> Transport Use Case Endpoint Protocol Version STDIO Local development, direct Claude integration N/A All Worker/SSE Legacy cloud deployments <code>/sse</code> Pre-2025 Streamable HTTP Modern cloud deployments <code>/mcp</code> 2025-03-26+"},{"location":"transport-protocol/#streamable-http-transport","title":"Streamable HTTP Transport","text":""},{"location":"transport-protocol/#what-is-streamable-http","title":"What is Streamable HTTP?","text":"<p>Streamable HTTP is the latest MCP transport protocol (specification version 2025-03-26) that provides:</p> <ul> <li>Single endpoint (<code>/mcp</code>) for all operations</li> <li>Dynamic response modes: JSON for quick operations, SSE for long-running tasks</li> <li>Session management via <code>session_id</code> query parameter</li> <li>Better scalability: No permanent connections required</li> <li>Automatic reconnection and session recovery</li> </ul>"},{"location":"transport-protocol/#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[MCP Client] --&gt;|POST /mcp| B[BioMCP Server]\n    B --&gt; C{Response Type}\n    C --&gt;|Quick Operation| D[JSON Response]\n    C --&gt;|Long Operation| E[SSE Stream]\n\n    subgraph Session Management\n        F[Session Store] -.-&gt;|session_id| B\n    end\n</code></pre>"},{"location":"transport-protocol/#implementation-details","title":"Implementation Details","text":"<p>BioMCP leverages FastMCP's native streamable HTTP support:</p> <pre><code># In core.py\nmcp_app = FastMCP(\n    name=\"BioMCP\",\n    stateless_http=True,  # Enables streamable HTTP\n)\n</code></pre> <p>The transport is automatically handled by FastMCP 1.12.3+, providing:</p> <ul> <li>Request routing</li> <li>Session management</li> <li>Response type negotiation</li> <li>Error handling</li> </ul>"},{"location":"transport-protocol/#migration-guide","title":"Migration Guide","text":""},{"location":"transport-protocol/#from-sse-to-streamable-http","title":"From SSE to Streamable HTTP","text":"<p>If you're currently using the legacy SSE transport, migrate to streamable HTTP:</p>"},{"location":"transport-protocol/#1-update-server-configuration","title":"1. Update Server Configuration","text":"<p>Before (SSE/Worker mode):</p> <pre><code>biomcp run --mode worker\n</code></pre> <p>After (Streamable HTTP):</p> <pre><code>biomcp run --mode streamable_http\n</code></pre>"},{"location":"transport-protocol/#2-update-client-configuration","title":"2. Update Client Configuration","text":"<p>MCP Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with . biomcp run --mode streamable_http\n</code></pre> <p>Claude Desktop Configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-p\",\n        \"8000:8000\",\n        \"biomcp:latest\",\n        \"biomcp\",\n        \"run\",\n        \"--mode\",\n        \"streamable_http\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"transport-protocol/#3-update-cloudflare-worker","title":"3. Update Cloudflare Worker","text":"<p>The worker now supports both GET (legacy SSE) and POST (streamable HTTP) on the <code>/mcp</code> endpoint:</p> <pre><code>// Automatically routes based on method\n.get(\"/mcp\", async (c) =&gt; {\n  // Legacy SSE transport\n})\n.post(\"/mcp\", async (c) =&gt; {\n  // Streamable HTTP transport\n})\n</code></pre>"},{"location":"transport-protocol/#backward-compatibility","title":"Backward Compatibility","text":"<p>All legacy endpoints remain functional:</p> <ul> <li><code>/sse</code> - Server-sent events transport</li> <li><code>/health</code> - Health check endpoint</li> <li><code>/events</code> - Event streaming endpoint</li> </ul>"},{"location":"transport-protocol/#configuration-options","title":"Configuration Options","text":""},{"location":"transport-protocol/#server-modes","title":"Server Modes","text":"<pre><code># Local development (STDIO)\nbiomcp run\n\n# Legacy SSE transport\nbiomcp run --mode worker\n\n# Modern streamable HTTP\nbiomcp run --mode streamable_http --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"transport-protocol/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>MCP_TRANSPORT</code> Override transport mode None <code>MCP_HOST</code> Server bind address 0.0.0.0 <code>MCP_PORT</code> Server port 8000"},{"location":"transport-protocol/#session-management","title":"Session Management","text":"<p>Streamable HTTP uses session IDs to maintain state across requests:</p> <pre><code>POST /mcp?session_id=abc123 HTTP/1.1\nContent-Type: application/json\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {...}\n}\n</code></pre> <p>Sessions are:</p> <ul> <li>Created automatically on first request</li> <li>Maintained in server memory</li> <li>Cleaned up after inactivity timeout</li> <li>Isolated between different clients</li> </ul>"},{"location":"transport-protocol/#performance-considerations","title":"Performance Considerations","text":""},{"location":"transport-protocol/#response-mode-selection","title":"Response Mode Selection","text":"<p>The server automatically selects the optimal response mode:</p> Operation Type Response Mode Example Quick queries JSON <code>search(limit=10)</code> Large results SSE <code>search(limit=1000)</code> Real-time updates SSE Thinking tool progress"},{"location":"transport-protocol/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use session IDs for related requests to avoid re-initialization</li> <li>Batch operations when possible to reduce round trips</li> <li>Set appropriate timeouts for long-running operations</li> <li>Monitor response times to identify bottlenecks</li> </ol>"},{"location":"transport-protocol/#troubleshooting","title":"Troubleshooting","text":""},{"location":"transport-protocol/#common-issues","title":"Common Issues","text":""},{"location":"transport-protocol/#1-connection-refused","title":"1. Connection Refused","text":"<pre><code>Error: connect ECONNREFUSED 127.0.0.1:8000\n</code></pre> <p>Solution: Ensure server is running with <code>--host 0.0.0.0</code> for Docker deployments.</p>"},{"location":"transport-protocol/#2-session-not-found","title":"2. Session Not Found","text":"<pre><code>Error: Session 'xyz' not found\n</code></pre> <p>Solution: Session may have expired. Omit session_id to create new session.</p>"},{"location":"transport-protocol/#3-timeout-on-large-results","title":"3. Timeout on Large Results","text":"<pre><code>Error: Request timeout after 30s\n</code></pre> <p>Solution: Increase client timeout or reduce result size with <code>limit</code> parameter.</p>"},{"location":"transport-protocol/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to troubleshoot transport issues:</p> <pre><code>LOG_LEVEL=debug biomcp run --mode streamable_http\n</code></pre>"},{"location":"transport-protocol/#security-considerations","title":"Security Considerations","text":""},{"location":"transport-protocol/#authentication","title":"Authentication","text":"<p>BioMCP does not implement authentication at the transport layer. Secure your deployment using:</p> <ul> <li>API Gateway: AWS API Gateway, Kong, etc.</li> <li>Reverse Proxy: Nginx with auth modules</li> <li>Cloud IAM: Platform-specific access controls</li> </ul>"},{"location":"transport-protocol/#rate-limiting","title":"Rate Limiting","text":"<p>Implement rate limiting at the infrastructure layer:</p> <pre><code># Nginx example\nlimit_req_zone $binary_remote_addr zone=mcp:10m rate=10r/s;\n\nlocation /mcp {\n    limit_req zone=mcp burst=20;\n    proxy_pass http://biomcp:8000;\n}\n</code></pre>"},{"location":"transport-protocol/#cors-configuration","title":"CORS Configuration","text":"<p>For browser-based clients, configure CORS headers:</p> <pre><code># Handled automatically by FastMCP when stateless_http=True\n</code></pre>"},{"location":"transport-protocol/#monitoring","title":"Monitoring","text":""},{"location":"transport-protocol/#health-checks","title":"Health Checks","text":"<pre><code># Check server health\ncurl http://localhost:8000/health\n\n# Response\n{\"status\": \"ok\", \"transport\": \"streamable_http\"}\n</code></pre>"},{"location":"transport-protocol/#metrics","title":"Metrics","text":"<p>Monitor these key metrics:</p> <ul> <li>Request rate on <code>/mcp</code> endpoint</li> <li>Response time percentiles (p50, p95, p99)</li> <li>Session count and duration</li> <li>Error rate by error type</li> </ul>"},{"location":"transport-protocol/#next-steps","title":"Next Steps","text":"<ul> <li>Review MCP Specification for protocol details</li> </ul> <p>For questions or issues, please visit our GitHub repository.</p>"},{"location":"apis/cbioportal/","title":"cBioPortal Integration","text":"<p>BioMCP integrates with cBioPortal, a comprehensive cancer genomics portal that provides visualization and analysis tools for large-scale cancer genomics datasets.</p>"},{"location":"apis/cbioportal/#overview","title":"Overview","text":"<p>The cBioPortal integration enhances article searches by automatically including relevant cancer genomics data when searching for genes. This integration provides:</p> <ol> <li>Gene-level summaries - Mutation frequency and distribution across cancer studies</li> <li>Mutation-specific searches - Find studies containing specific mutations (e.g., BRAF V600E)</li> <li>Cancer type resolution - Accurate cancer type categorization using cBioPortal's API</li> </ol>"},{"location":"apis/cbioportal/#how-it-works","title":"How It Works","text":""},{"location":"apis/cbioportal/#automatic-integration","title":"Automatic Integration","text":"<p>When you search for articles with a gene parameter, BioMCP automatically queries cBioPortal to provide additional context:</p> <pre><code># Basic gene search includes cBioPortal summary\nsearch(domain=\"article\", genes=[\"BRAF\"], diseases=[\"melanoma\"])\n</code></pre> <p>This returns:</p> <ul> <li>Standard PubMed/PubTator3 article results</li> <li>cBioPortal summary showing mutation frequency across cancer studies</li> <li>Top cancer types where the gene is mutated</li> </ul>"},{"location":"apis/cbioportal/#mutation-specific-searches","title":"Mutation-Specific Searches","text":"<p>To search for specific mutations, include the mutation notation in keywords:</p> <pre><code># Search for BRAF V600E mutation\nsearch(domain=\"article\", genes=[\"BRAF\"], keywords=[\"V600E\"])\n\n# Search for SRSF2 F57Y mutation\nsearch(domain=\"article\", genes=[\"SRSF2\"], keywords=[\"F57Y\"])\n\n# Use wildcards for mutation patterns (e.g., any amino acid at position 57)\nsearch(domain=\"article\", genes=[\"SRSF2\"], keywords=[\"F57*\"])\n</code></pre> <p>Mutation-specific searches return:</p> <ul> <li>Total number of studies in cBioPortal</li> <li>Number of studies containing the mutation</li> <li>Top studies ranked by mutation count</li> <li>Cancer type distribution</li> </ul>"},{"location":"apis/cbioportal/#example-output","title":"Example Output","text":""},{"location":"apis/cbioportal/#gene-level-summary","title":"Gene-Level Summary","text":"<pre><code>### cBioPortal Summary for BRAF\n- **Mutation Frequency**: 76.7% (368 mutations in 480 samples)\n- **Top Cancer Types**: Melanoma (45%), Thyroid (23%), Colorectal (18%)\n- **Top Mutations**: V600E (89%), V600K (7%), G469A (2%)\n</code></pre>"},{"location":"apis/cbioportal/#mutation-specific-results","title":"Mutation-Specific Results","text":"<pre><code>### cBioPortal Mutation Search: BRAF\n**Specific Mutation**: V600E\n- **Total Studies**: 2340\n- **Studies with Mutation**: 170\n- **Total Mutations Found**: 5780\n\n**Top Studies by Mutation Count:**\n| Count | Study ID | Cancer Type | Study Name |\n|-------|----------|-------------|------------|\n|   804 | msk_met_2021 | Mixed Cancer Types | MSK MetTropism (MSK, Cell 2021) |\n|   555 | msk_chord_2024 | Mixed Cancer Types | MSK-CHORD (MSK, Nature 2024) |\n|   295 | msk_impact_2017 | Mixed Cancer Types | MSK-IMPACT Clinical Sequencing Cohort |\n</code></pre>"},{"location":"apis/cbioportal/#supported-mutation-notations","title":"Supported Mutation Notations","text":"<p>The integration recognizes standard protein change notation:</p> <ul> <li>Specific mutations: <code>V600E</code>, <code>F57Y</code>, <code>T790M</code></li> <li>Wildcard patterns: <code>F57*</code> (matches F57Y, F57L, etc.)</li> <li>Multiple mutations: Include multiple keywords for OR search</li> </ul>"},{"location":"apis/cbioportal/#api-details","title":"API Details","text":""},{"location":"apis/cbioportal/#endpoints-used","title":"Endpoints Used","text":"<ol> <li>Gene Information: <code>/api/genes/{gene}</code></li> <li>Cancer Types: <code>/api/cancer-types</code></li> <li>Mutation Data: <code>/api/mutations/fetch</code></li> <li>Study Information: <code>/api/studies</code></li> </ol>"},{"location":"apis/cbioportal/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Conservative rate limit of 5 requests/second</li> <li>Results cached for 15-30 minutes (mutations) or 24 hours (cancer types)</li> </ul>"},{"location":"apis/cbioportal/#authentication","title":"Authentication","text":"<p>Optional authentication via environment variable:</p> <pre><code>export CBIO_TOKEN=\"your-api-token\"\n</code></pre> <p>Public cBioPortal instance works without authentication but may have rate limits.</p>"},{"location":"apis/cbioportal/#cli-usage","title":"CLI Usage","text":"<pre><code># Gene-level search with cBioPortal summary\nbiomcp article search --gene BRAF --disease melanoma\n\n# Mutation-specific search\nbiomcp article search --gene BRAF --keyword V600E\n\n# Wildcard pattern search\nbiomcp article search --gene SRSF2 --keyword \"F57*\"\n</code></pre>"},{"location":"apis/cbioportal/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Caching: Results are cached to minimize API calls</p> </li> <li> <p>Gene summaries: 15 minutes</p> </li> <li>Mutation searches: 30 minutes</li> <li> <p>Cancer types: 24 hours</p> </li> <li> <p>Graceful Degradation: If cBioPortal is unavailable, searches continue without the additional data</p> </li> <li> <p>Parallel Processing: API calls are made in parallel with article searches for optimal performance</p> </li> </ol>"},{"location":"apis/cbioportal/#limitations","title":"Limitations","text":"<ol> <li>Only works with valid HUGO gene symbols</li> <li>Mutation searches require exact protein change notation</li> <li>Limited to mutations in cBioPortal's curated studies</li> <li>Rate limits may apply for high-volume usage</li> </ol>"},{"location":"apis/cbioportal/#error-handling","title":"Error Handling","text":"<p>The integration handles various error scenarios:</p> <ul> <li>Invalid gene symbols are validated before API calls</li> <li>Network timeouts fall back to article-only results</li> <li>API errors are logged but don't block search results</li> </ul>"},{"location":"apis/clinicaltrials_gov/","title":"ClinicalTrials.gov API","text":"<p>This document outlines the key aspects of the public ClinicalTrials.gov v2 API utilized by BioMCP. Understanding these details can be helpful for advanced users interpreting BioMCP results or for developers extending its capabilities. BioMCP's CLI commands often simplify or combine these parameters for ease of use; refer to the Trials CLI Documentation for specific command options.</p>"},{"location":"apis/clinicaltrials_gov/#overview","title":"Overview","text":"<p>The ClinicalTrials.gov API provides programmatic access to clinical trial information. This document outlines the API implementation details for searching and retrieving clinical trial data.</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Trials CLI Documentation.</p>"},{"location":"apis/clinicaltrials_gov/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/clinicaltrials_gov/#search-api","title":"Search API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies</code></p> <p>This endpoint allows searching for clinical trials using various parameters.</p>"},{"location":"apis/clinicaltrials_gov/#key-parameters","title":"Key Parameters","text":"Parameter Description Example Value <code>query.cond</code> \"Conditions or disease\" query <code>lung cancer</code> <code>query.term</code> \"Other terms\" query <code>AREA[LastUpdatePostDate]RANGE[2023-01-15,MAX]</code> <code>query.intr</code> \"Intervention/treatment\" query <code>Vemurafenib</code> <code>query.locn</code> \"Location terms\" query <code>New York</code> <code>query.titles</code> \"Title/acronym\" query <code>BRAF Melanoma</code> <code>query.outc</code> \"Outcome measure\" query <code>overall survival</code> <code>query.spons</code> \"Sponsor/collaborator\" query <code>National Cancer Institute</code> <code>query.lead</code> Searches in \"LeadSponsorName\" field <code>MD Anderson</code> <code>query.id</code> \"Study IDs\" query (OR semantics) <code>NCT04267848</code> <code>filter.overallStatus</code> Comma-separated list of statuses <code>NOT_YET_RECRUITING,RECRUITING</code> <code>filter.geo</code> Geo-location filter <code>distance(39.0035707,-77.1013313,50mi)</code> <code>filter.ids</code> Filter by NCT IDs (AND semantics) <code>NCT04852770,NCT01728545</code> <code>filter.advanced</code> Advanced filter query <code>AREA[StartDate]2022</code> <code>sort</code> Sort order <code>LastUpdatePostDate:desc</code> <code>fields</code> Fields to return <code>NCTId,BriefTitle,OverallStatus,HasResults</code> <p>| <code>countTotal</code> | Count total number of studies | <code>true</code> or <code>false</code> |</p>"},{"location":"apis/clinicaltrials_gov/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies?query.cond=Melanoma&amp;query.intr=BRAF\"\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#study-details-api","title":"Study Details API","text":"<p>Endpoint: <code>https://clinicaltrials.gov/api/v2/studies/{NCT_ID}</code></p> <p>This endpoint retrieves detailed information about a specific clinical trial.</p>"},{"location":"apis/clinicaltrials_gov/#example-request_1","title":"Example Request","text":"<pre><code>curl -X GET \"https://clinicaltrials.gov/api/v2/studies/NCT04267848\"\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#response-modules","title":"Response Modules","text":"<p>The API response contains various modules of information:</p> <ul> <li>protocolSection: Basic study information, eligibility criteria, and   design</li> <li>resultsSection: Study outcomes and results (when available)</li> <li>documentSection: Related documents</li> <li>derivedSection: Derived data elements</li> <li>annotationsSection: Additional annotations</li> </ul>"},{"location":"apis/clinicaltrials_gov/#implementation-details","title":"Implementation Details","text":""},{"location":"apis/clinicaltrials_gov/#nct-id-filtering-semantics","title":"NCT ID Filtering Semantics","text":"<p>BioMCP uses intelligent filtering when NCT IDs are provided:</p> <ul> <li>ID-only mode: When NCT IDs are the only filter criteria, <code>query.id</code> is used for fast direct lookup</li> <li>Intersection mode: When NCT IDs are combined with other filters (conditions, interventions, etc.), <code>filter.ids</code> is used to ensure results match ALL criteria</li> </ul> <p>This ensures that specifying NCT IDs restricts results rather than expanding them.</p>"},{"location":"apis/clinicaltrials_gov/#query-building","title":"Query Building","text":"<p>When constructing API queries, parameters must be properly formatted according to the API documentation.</p> <p>Example query creation:</p> <pre><code>def build_query_params(conditions=None, interventions=None, terms=None):\n    params = {}\n    if conditions:\n        params[\"query.cond\"] = \" \".join(conditions)\n    if interventions:\n        params[\"query.intr\"] = \" \".join(interventions)\n    if terms:\n        params[\"query.term\"] = \" \".join(terms)\n    return params\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#response-parsing","title":"Response Parsing","text":"<p>The API returns data in JSON format (or CSV if specified). Key sections in the response include:</p> <ul> <li><code>protocolSection</code>: Contains study protocol details</li> <li><code>identificationModule</code>: Basic identifiers including NCT ID and title</li> <li><code>statusModule</code>: Current recruitment status and study dates</li> <li><code>sponsorCollaboratorsModule</code>: Information about sponsors and     collaborators</li> <li><code>designModule</code>: Study design information including interventions</li> <li><code>eligibilityModule</code>: Inclusion/exclusion criteria and eligible population</li> <li><code>contactsLocationsModule</code>: Study sites and contact information</li> <li><code>referencesModule</code>: Related publications</li> </ul>"},{"location":"apis/clinicaltrials_gov/#error-handling","title":"Error Handling","text":"<p>Comprehensive error handling is implemented for API responses:</p> <pre><code>def handle_api_response(response):\n    if response.status_code == 200:\n        return response.json()\n    elif response.status_code == 404:\n        raise ValueError(\"Trial not found\")\n    elif response.status_code == 429:\n        raise RateLimitExceeded(\"Rate limit exceeded, please try again later\")\n    else:\n        raise APIError(f\"API error: {response.status_code}\")\n</code></pre>"},{"location":"apis/clinicaltrials_gov/#authentication","title":"Authentication","text":"<p>The ClinicalTrials.gov API is public and does not require authentication for basic usage. However, there are rate limits in place.</p>"},{"location":"apis/clinicaltrials_gov/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Rate Limit: Approximately 50 requests per minute per IP address</li> <li>Caching: Implement caching to minimize repeated requests</li> <li> <p>Pagination: For large result sets, use the pagination functionality with</p> </li> <li> <p>Focused Queries: Use specific search terms rather than broad queries to   get more relevant results</p> </li> <li>Field Selection: Use the fields parameter to request only the data you   need</li> </ul>"},{"location":"apis/clinicaltrials_gov/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the ClinicalTrials.gov API Documentation</p>"},{"location":"apis/myvariant_info/","title":"MyVariant.info API","text":"<p>This document details the MyVariant.info API, which BioMCP uses for fetching genetic variant annotations. Understanding the underlying API fields and query syntax can aid advanced users and developers working with BioMCP.</p>"},{"location":"apis/myvariant_info/#overview","title":"Overview","text":"<p>MyVariant.info is a comprehensive API that provides variant annotation information from multiple databases in a centralized location. This document outlines how to interface with this API to search for and retrieve information about genetic variants.</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Variants CLI Documentation.</p>"},{"location":"apis/myvariant_info/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/myvariant_info/#query-api","title":"Query API","text":"<p>Endpoint: <code>https://myvariant.info/v1/query</code></p> <p>This endpoint allows searching for variants using various query parameters.</p>"},{"location":"apis/myvariant_info/#key-query-parameters","title":"Key Query Parameters","text":"Parameter Description Example <code>q</code> Query string using field:value syntax <code>dbnsfp.genename:BRAF AND dbnsfp.hgvsp:p.V600E</code> <code>fields</code> Comma-separated list of fields to return <code>_id,dbsnp.rsid,dbnsfp.genename,clinvar.clinical_significance</code> <code>size</code> Number of hits to return <code>10</code> <code>from</code> Number of hits to skip <code>0</code> <code>sort</code> Sort by specified field <code>cadd.phred:desc</code>"},{"location":"apis/myvariant_info/#example-requests","title":"Example Requests","text":"<p>Full variant search:</p> <pre><code>curl -X GET \"https://myvariant.info/v1/query?q=dbnsfp.genename%3ABRAF%20AND%20dbnsfp.hgvsp%3Ap.V600E\"\n</code></pre> <p>Partial variant search (selected fields):</p> <pre><code>curl -X GET \"https://myvariant.info/v1/query?q=dbnsfp.genename%3ABRAF%20AND%20dbnsfp.hgvsp%3Ap.V600E&amp;fields=_id,dbsnp.rsid,dbnsfp.genename,clinvar.clinical_significance,cadd.phred,gnomad_exome.af.af,exac.af,mutdb\"\n</code></pre>"},{"location":"apis/myvariant_info/#variant-retrieval-api","title":"Variant Retrieval API","text":"<p>Endpoint: <code>https://myvariant.info/v1/variant/{variant_id}</code></p> <p>This endpoint retrieves detailed information about a specific variant using its ID.</p> <p>Example:</p> <pre><code>curl -X GET \"https://myvariant.info/v1/variant/chr7:g.140453136A&gt;T\"\n</code></pre>"},{"location":"apis/myvariant_info/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"apis/myvariant_info/#query-construction","title":"Query Construction","text":"<p>Constructing effective queries requires understanding the field structure. The most common query patterns include:</p> <ol> <li>Gene + Variant: <code>dbnsfp.genename:BRAF AND dbnsfp.hgvsp:p.V600E</code></li> <li>dbSNP ID: <code>dbsnp.rsid:rs113488022</code></li> <li>Chromosome Position: <code>_id:chr7:g.140453136A&gt;T</code></li> </ol> <p>Code example for query building:</p> <pre><code>def build_variant_query(gene=None, protein_change=None, rsid=None):\n    query_parts = []\n\n    if gene:\n        query_parts.append(f\"dbnsfp.genename:{gene}\")\n    if protein_change:\n        query_parts.append(f\"dbnsfp.hgvsp:{protein_change}\")\n    if rsid:\n        query_parts.append(f\"dbsnp.rsid:{rsid}\")\n\n    return \" AND \".join(query_parts)\n</code></pre>"},{"location":"apis/myvariant_info/#response-parsing","title":"Response Parsing","text":"<p>The API returns data in JSON format. Example response structure for a variant:</p> <pre><code>{\n  \"took\": 5,\n  \"total\": 1,\n  \"max_score\": 26.326775,\n  \"hits\": [\n    {\n      \"_id\": \"chr7:g.140453136A&gt;T\",\n      \"_score\": 26.326775,\n      \"cadd\": {\n        \"_license\": \"http://bit.ly/2TIuab9\",\n        \"phred\": 32\n      },\n      \"dbnsfp\": {\n        \"_license\": \"http://bit.ly/2VLnQBz\",\n        \"genename\": [\"BRAF\", \"BRAF\", \"BRAF\", \"BRAF\"]\n      },\n      \"dbsnp\": {\n        \"_license\": \"http://bit.ly/2AqoLOc\",\n        \"rsid\": \"rs113488022\"\n      },\n      \"exac\": {\n        \"_license\": \"http://bit.ly/2H9c4hg\",\n        \"af\": 0.00001647\n      },\n      \"gnomad_exome\": {\n        \"_license\": \"http://bit.ly/2I1cl1I\",\n        \"af\": {\n          \"af\": 0.00000397994\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/myvariant_info/#data-fields","title":"Data Fields","text":"<p>The API provides rich variant annotation data from multiple sources, including:</p> <ol> <li> <p>Basic Information:</p> </li> <li> <p><code>_id</code>: Variant ID in HGVS format (e.g., <code>chr7:g.140453136A&gt;T</code>)</p> </li> <li> <p><code>dbsnp.rsid</code>: dbSNP RS identifier (e.g., <code>rs113488022</code>)</p> </li> <li> <p>Functional Impact Scores:</p> </li> <li> <p><code>cadd.phred</code>: CADD Phred score for variant deleteriousness</p> </li> <li> <p><code>mutpred_score</code>: MutPred score for amino acid substitutions</p> </li> <li> <p>Population Frequency:</p> </li> <li> <p><code>gnomad_exome.af.af</code>: Frequency in gnomAD exome dataset</p> </li> <li> <p><code>exac.af</code>: Frequency in ExAC dataset</p> </li> <li> <p>Clinical Significance:</p> </li> <li> <p><code>clinvar.clinical_significance</code>: Clinical significance from ClinVar</p> </li> <li> <p>Gene Information:</p> </li> <li><code>dbnsfp.genename</code>: Associated gene name(s)</li> </ol>"},{"location":"apis/myvariant_info/#authentication-and-rate-limits","title":"Authentication and Rate Limits","text":"<p>The MyVariant.info API is public and does not require authentication for basic usage, but there are rate limits:</p> <ul> <li>Anonymous Access: Limited to 1,000 requests per IP per day</li> <li>Registered Access: Higher limits available with a free API key</li> <li>Batch Queries: Limited to 1,000 variants per request</li> </ul>"},{"location":"apis/myvariant_info/#best-practices","title":"Best Practices","text":"<ol> <li>Use Specific Queries: Target exact genes, variants, or identifiers</li> <li>Limit Returned Fields: Use the <code>fields</code> parameter to request only needed    data</li> <li>Implement Caching: Cache frequently accessed variant data</li> <li>Handle Errors Robustly: Implement retry logic and proper error handling</li> <li>Batch Requests: When possible, use batch endpoints for multiple variants</li> </ol>"},{"location":"apis/myvariant_info/#search-parameters","title":"Search Parameters","text":"<p>The following are the prioritized list of commonly used attributes for searching MyVariant data:</p>"},{"location":"apis/myvariant_info/#1-gene-symbol","title":"1. Gene Symbol","text":"<ul> <li>Description: Most common approach to find all known variants in a gene</li> <li>Query Syntax: <code>dbnsfp.genename:&lt;GENE&gt;</code></li> <li>Example: <code>q=dbnsfp.genename:TP53</code></li> </ul>"},{"location":"apis/myvariant_info/#2-cdna-notation","title":"2. cDNA Notation","text":"<ul> <li>Description: Search by cDNA expression</li> <li>Query Syntax: <code>dbnsfp.hgvsc:&lt;CDNA_EXPRESSION&gt;</code></li> <li>Example: <code>q=dbnsfp.hgvsc:c.1799T&gt;A</code></li> </ul>"},{"location":"apis/myvariant_info/#3-protein-p-notation","title":"3. Protein (p.) Notation","text":"<ul> <li>Description: Search by protein-level notation</li> <li>Query Syntax: <code>dbnsfp.hgvsp:&lt;PROTEIN_EXPRESSION&gt;</code></li> <li>Example: <code>q=dbnsfp.hgvsp:p.V600E</code></li> </ul>"},{"location":"apis/myvariant_info/#4-genomic-region","title":"4. Genomic Region","text":"<ul> <li>Description: Find all variants in a coordinate range</li> <li>Query Syntax: <code>chr&lt;NUM&gt;:&lt;START&gt;-&lt;END&gt;</code></li> <li>Example: <code>q=chr7:140453100-140453200</code></li> <li>With Additional Filters:   <code>q=chr7:140453100-140453200 AND dbnsfp.genename:BRAF</code></li> </ul>"},{"location":"apis/myvariant_info/#5-dbsnp-rsid","title":"5. dbSNP rsID","text":"<ul> <li>Description: Lookup by rsID</li> <li>Query Syntax: <code>dbsnp.rsid:&lt;RSID&gt;</code></li> <li>Example: <code>q=dbsnp.rsid:rs113488022</code></li> </ul>"},{"location":"apis/myvariant_info/#6-clinvar-significance","title":"6. ClinVar Significance","text":"<ul> <li>Description: Filter by clinical significance</li> <li>Query Syntax: <code>clinvar.clinical_significance:&lt;VALUE&gt;</code></li> <li>Example: <code>q=clinvar.clinical_significance:Pathogenic</code></li> <li>Multiple Values:   <code>q=clinvar.clinical_significance:(Pathogenic OR Likely_pathogenic)</code></li> </ul>"},{"location":"apis/myvariant_info/#7-population-frequency","title":"7. Population Frequency","text":"<ul> <li>Description: Filter by rarity or commonality</li> <li>Query Syntax: <code>gnomad_exome.af:&lt;THRESHOLD&gt;</code> or   <code>exac.af:&lt;OPERATOR&gt;&lt;THRESHOLD&gt;</code></li> <li>Example: <code>q=gnomad_exome.af:&lt;0.001</code> or <code>q=exac.af:&gt;=0.01</code></li> </ul>"},{"location":"apis/myvariant_info/#8-functional-predictions","title":"8. Functional Predictions","text":"<ul> <li>Description: Filter by prediction scores</li> <li>CADD: <code>q=cadd.phred:&gt;15</code></li> <li>PolyPhen: <code>q=dbnsfp.polyphen2.hdiv.pred:probably_damaging</code> or   <code>q=dbnsfp.polyphen2.hdiv.score:&gt;0.9</code></li> <li>SIFT: <code>q=dbnsfp.sift.pred:deleterious</code> or <code>q=dbnsfp.sift.score:&lt;0.05</code></li> </ul>"},{"location":"apis/myvariant_info/#9-cosmic-id","title":"9. COSMIC ID","text":"<ul> <li>Description: Search by COSMIC mutation IDs</li> <li>Query Syntax: <code>cosmic.cosmic_id:&lt;ID&gt;</code> or <code>mutdb.cosmic_id:&lt;ID&gt;</code></li> <li>Example: <code>q=cosmic.cosmic_id:476</code></li> </ul>"},{"location":"apis/myvariant_info/#10-combining-multiple-filters","title":"10. Combining Multiple Filters","text":"<ul> <li>Description: Combine conditions for precise searches</li> <li>Example: <code>q=dbnsfp.genename:BRAF AND cadd.phred:&gt;=20 AND exac.af:&lt;0.001</code></li> </ul>"},{"location":"apis/myvariant_info/#query-fields-reference-table","title":"Query Fields Reference Table","text":"Attribute MyVariant Field / Query Expression Gene Symbol <code>dbnsfp.genename:&lt;GENE&gt;</code> cDNA Notation <code>dbnsfp.hgvsc:&lt;NOTATION&gt;</code> Protein Notation <code>dbnsfp.hgvsp:&lt;NOTATION&gt;</code> Genomic Region <code>chr7:140453100-140453200</code> (substitute correct chr, start, end) dbSNP rsID <code>dbsnp.rsid:&lt;RSID&gt;</code> ClinVar Significance <code>clinvar.clinical_significance:&lt;VALUE&gt;</code> GnomAD / ExAC Frequency <code>gnomad_exome.af:&lt;FLOAT&gt;</code> / <code>exac.af:&gt;FLOAT</code> CADD PHRED Score <code>cadd.phred:&gt;FLOAT</code> (or <code>&lt;, &gt;=, &lt;=</code>) PolyPhen2 Prediction <code>dbnsfp.polyphen2.hdiv.pred:(D OR P)</code> or <code>dbnsfp.polyphen2.hdiv.score:&gt;X</code> SIFT <code>dbnsfp.sift.pred:deleterious</code> / <code>dbnsfp.sift.score:&lt;0.05</code> COSMIC ID <code>cosmic.cosmic_id:&lt;ID&gt;</code> or <code>mutdb.cosmic_id:&lt;ID&gt;</code>"},{"location":"apis/myvariant_info/#data-integration","title":"Data Integration","text":"<p>The Variants endpoint can be used to find variants based on their genomic location (chr, start, ref, alt), converting to Gene and Protein change (HGVS) and used to search Trials and Articles. This provides a powerful way to link genetic information with clinical trials and literature.</p>"},{"location":"apis/myvariant_info/#output-format","title":"Output Format","text":"<p>For the API implementation, all data is typically returned in JSON format. BioMCP CLI commands render this data as Markdown by default (unless <code>--json</code> is specified).</p> <p>When using the <code>biomcp variant search</code> command, a curated set of important fields (defined internally, plus those requested via <code>--sources</code>) is requested from the API to provide a concise summary.</p> <p>When using the <code>biomcp variant get</code> command to retrieve a specific variant, BioMCP requests <code>fields=all</code> from the MyVariant.info API to get the most comprehensive data available for that variant, and then injects relevant database links.</p>"},{"location":"apis/myvariant_info/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the MyVariant.info Documentation.</p>"},{"location":"apis/myvariant_info/#urls","title":"URLs","text":"Website/Database Identifier Used Data Field(s) in API Response URL Construction Pattern Placement/Notes dbSNP rsID <code>dbsnp.rsid</code> <code>https://www.ncbi.nlm.nih.gov/snp/&lt;rsID&gt;</code> Standard link for SNP information. Include if rsID exists. ClinVar (Variant) ClinVar Variation ID <code>clinvar.variation_id</code> <code>https://www.ncbi.nlm.nih.gov/clinvar/variation/&lt;VariationID&gt;/</code> Links to the variant page in ClinVar. Include if Variation ID exists. ClinVar (Interpretation) ClinVar RCV Accession <code>clinvar.rcv.accession</code> <code>https://www.ncbi.nlm.nih.gov/clinvar/rcv/&lt;RCV Accession&gt;/</code> Links to a specific interpretation record. Include if RCV Accession exists. COSMIC COSMIC ID (Numeric) <code>cosmic.cosmic_id</code> <code>https://cancer.sanger.ac.uk/cosmic/mutation/overview?id=&lt;COSMIC_ID_number&gt;</code> Links to the mutation in COSMIC. Extract only the number from the COSMIC ID (e.g., from <code>COSM12345</code>, use <code>12345</code>). Include if COSMIC ID exists. CIViC CIViC Variant ID <code>civic.id</code> or <code>civic.variant_id</code> <code>https://civicdb.org/variants/&lt;CIVIC_Variant_ID&gt;/summary</code> Links to the variant summary in CIViC. Include if CIViC ID exists. Ensembl rsID or Ensembl ID <code>dbsnp.rsid</code> or <code>ensembl.variant.id</code> <code>https://ensembl.org/Homo_sapiens/Variation/Explore?v=&lt;rsID&gt;</code> (preferred if rsID exists) Links to the variant in Ensembl. Prioritize using rsID if available. UCSC Genome Browser Genomic Coordinates <code>chrom</code>, <code>vcf.pos</code> (or <code>hg19.start</code>, <code>hg38.start</code>) <code>https://genome.ucsc.edu/cgi-bin/hgTracks?db=hg38&amp;position=&lt;chr&gt;:&lt;start&gt;-&lt;end&gt;</code> Links to the genomic region. Construct <code>start</code>/<code>end</code> around <code>vcf.pos</code>. Check genome build (hg38 is current, hg19 might be needed for older data). Requires chromosome and position. HGNC (Gene Link) Gene Symbol <code>dbnsfp.genename</code> <code>https://www.genenames.org/data/gene-symbol-report/#!/symbol/&lt;GeneSymbol&gt;</code> Links to the associated gene's official nomenclature page. Useful context."},{"location":"apis/pubtator3_api/","title":"PubTator3 API","text":"<p>This document describes the PubTator3 API used by BioMCP for searching biomedical literature and retrieving article details with annotations. Understanding this API provides context for how BioMCP's article commands function.</p>"},{"location":"apis/pubtator3_api/#overview","title":"Overview","text":"<p>The PubTator3 API provides a way to search for and retrieve biomedical articles with entity annotations. This document outlines the API implementation details. PubTator3 is a web-based tool that provides annotations of biomedical entities in PubMed abstracts and PMC full-text articles. BioMCP uses the PubTator3 API to search for and retrieve biomedical articles and their annotated entities ( genes, variants, diseases, chemicals, etc.).</p> <p>CLI Documentation: For information on using these APIs through the BioMCP command line interface, see the Articles CLI Documentation.</p>"},{"location":"apis/pubtator3_api/#api-workflow","title":"API Workflow","text":"<p>The PubTator3 integration follows a three-step workflow:</p> <ol> <li>Entity Autocomplete: Get standardized entity identifiers</li> <li>Search: Find articles using entity identifiers and keywords</li> <li>Fetch: Retrieve full article details by PMID</li> </ol>"},{"location":"apis/pubtator3_api/#api-endpoints","title":"API Endpoints","text":""},{"location":"apis/pubtator3_api/#entity-autocomplete-api","title":"Entity Autocomplete API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/</code></p> <p>This endpoint helps normalize entity names to their standard identifiers, improving search precision.</p>"},{"location":"apis/pubtator3_api/#parameters","title":"Parameters","text":"Parameter Description Example <code>query</code> Text to autocomplete <code>BRAF</code> <code>concept</code> Entity type <code>GENE</code>, <code>CHEMICAL</code>, <code>DISEASE</code>, etc. <code>limit</code> Number of results to return <code>2</code>"},{"location":"apis/pubtator3_api/#example-request-and-response","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/entity/autocomplete/?query=BRAF&amp;concept=GENE&amp;limit=2\"\n</code></pre> <p>Response:</p> <pre><code>[\n  {\n    \"_id\": \"@GENE_BRAF\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAF\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAF&lt;/m&gt;\"\n  },\n  {\n    \"_id\": \"@GENE_BRAFP1\",\n    \"biotype\": \"gene\",\n    \"name\": \"BRAFP1\",\n    \"description\": \"All Species\",\n    \"match\": \"Matched on name &lt;m&gt;BRAFP1&lt;/m&gt;\"\n  }\n]\n</code></pre>"},{"location":"apis/pubtator3_api/#entity-search-api","title":"Entity Search API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/</code></p> <p>This endpoint allows searching for PMIDs (PubMed IDs) based on entity identifiers and keywords.</p>"},{"location":"apis/pubtator3_api/#parameters_1","title":"Parameters","text":"Parameter Description Example <code>text</code> Entity identifier or text query <code>@CHEMICAL_remdesivir</code>"},{"location":"apis/pubtator3_api/#example-request-and-response_1","title":"Example Request and Response","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/search/?text=@CHEMICAL_remdesivir\"\n</code></pre> <p>Response (truncated):</p> <pre><code>{\n  \"results\": [\n    {\n      \"_id\": \"37711410\",\n      \"pmid\": 37711410,\n      \"title\": \"Remdesivir.\",\n      \"journal\": \"Hosp Pharm\",\n      \"authors\": [\"Levien TL\", \"Baker DE\"],\n      \"date\": \"2023-10-01T00:00:00Z\",\n      \"doi\": \"10.1177/0018578721999804\",\n      \"meta_date_publication\": \"2023 Oct\",\n      \"meta_volume\": \"58\"\n    }\n    // More results...\n  ]\n}\n</code></pre>"},{"location":"apis/pubtator3_api/#article-fetch-api","title":"Article Fetch API","text":"<p>Endpoint: <code>https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson</code></p> <p>This endpoint retrieves detailed information about specific articles, including annotations.</p>"},{"location":"apis/pubtator3_api/#parameters_2","title":"Parameters","text":"Parameter Description Example <code>pmids</code> List of PubMed IDs to retrieve <code>29355051</code> <code>full_text</code> Whether to include full text (when available) <code>true</code>"},{"location":"apis/pubtator3_api/#example-request","title":"Example Request","text":"<pre><code>curl \"https://www.ncbi.nlm.nih.gov/research/pubtator3-api/publications/export/biocjson?pmids=29355051&amp;full=true\"\n</code></pre> <p>Response format (truncated):</p> <pre><code>{\n  \"PubTator3\": [\n    {\n      \"_id\": \"29355051|PMC6142073\",\n      \"id\": \"6142073\",\n      \"infons\": {},\n      \"passages\": [\n        {\n          \"infons\": {\n            \"name_3\": \"surname:Hu;given-names:Minghua\",\n            \"name_2\": \"surname:Luo;given-names:Xia\",\n            \"name_1\": \"surname:Luo;given-names:Shuang\",\n            \"article-id_pmid\": \"29355051\"\n            // More metadata...\n          }\n        }\n        // More passages...\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/pubtator3_api/#entity-types","title":"Entity Types","text":"<p>PubTator3 annotates several types of biomedical entities:</p> <ol> <li>Genes/Proteins: Gene or protein names (e.g., BRAF, TP53)</li> <li>Genetic Variants: Genetic variations (e.g., BRAF V600E)</li> <li>Diseases: Disease names and conditions (e.g., Melanoma)</li> <li>Chemicals/Drugs: Chemical substances or drugs (e.g., Vemurafenib)</li> </ol>"},{"location":"apis/pubtator3_api/#integration-strategy-for-biomcp","title":"Integration Strategy for BioMCP","text":"<p>The recommended workflow for integrating with PubTator3 in BioMCP is:</p> <ol> <li>Entity Normalization: Use the autocomplete API to convert user-provided    entity names to standardized identifiers</li> <li>Literature Search: Use the search API with these identifiers to find    relevant PMIDs</li> <li>Data Retrieval: Fetch detailed article data with annotations using the    fetch API</li> </ol> <p>This workflow ensures consistent entity handling and optimal search results.</p>"},{"location":"apis/pubtator3_api/#authentication","title":"Authentication","text":"<p>The PubTator3 API is public and does not require authentication for basic usage. However, there are rate limits in place to prevent abuse.</p>"},{"location":"apis/pubtator3_api/#rate-limits-and-best-practices","title":"Rate Limits and Best Practices","text":"<ul> <li>Request Limits: Approximately 30 requests per minute</li> <li>Batch Requests: For article retrieval, batch multiple PMIDs in a single   request</li> <li>Caching: Implement caching to minimize repeated requests</li> <li>Specific Queries: Use specific entity names rather than general terms for   better results</li> </ul>"},{"location":"apis/pubtator3_api/#error-handling","title":"Error Handling","text":"<p>Common error responses:</p> <ul> <li>400: Invalid parameters</li> <li>404: Articles not found</li> <li>429: Rate limit exceeded</li> <li>500: Server error</li> </ul>"},{"location":"apis/pubtator3_api/#more-information","title":"More Information","text":"<p>For complete API documentation, visit the PubTator3 API Documentation.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/","title":"AI-Assisted Clinical Trial Search: How BioMCP Transforms Research","text":"<p>Finding the right clinical trial for a research project has traditionally been a complex process requiring specialized knowledge of database syntax and medical terminology. BioMCP is changing this landscape by making clinical trial data accessible through natural language conversation.</p> <p>Video Link: </p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#breaking-down-the-barriers-to-clinical-trial-information","title":"Breaking Down the Barriers to Clinical Trial Information","text":"<p>BioMCP serves as a specialized Model Context Protocol (MCP) server that empowers AI assistants and agents with tools to interact with critical biomedical resources. For clinical trials specifically, BioMCP connects to the ClinicalTrials.gov API, allowing researchers and clinicians to search and retrieve trial information through simple conversational queries.</p> <p>The power of this approach becomes apparent when we look at how it transforms a complex search requirement. Imagine needing to find active clinical trials for pembrolizumab (a cancer immunotherapy drug) specifically for non-small cell lung carcinoma near Cleveland, Ohio. Traditionally, this would require:</p> <ol> <li>Navigating to ClinicalTrials.gov</li> <li>Understanding the proper search fields and syntax</li> <li>Creating multiple filters for intervention (pembrolizumab), condition (    non-small cell lung carcinoma), status (recruiting), and location (Cleveland    area)</li> <li>Interpreting the results</li> </ol>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#from-natural-language-to-precise-database-queries","title":"From Natural Language to Precise Database Queries","text":"<p>With BioMCP, this entire process is streamlined into a simple natural language request. The underlying large language model (LLM) interprets the query, identifies the key entities (drug name, cancer type, location), and translates these into the precise parameters needed for the ClinicalTrials.gov API.</p> <p>The system returns relevant trials that match all criteria, presenting them in an easy-to-understand format. But the interaction doesn't end there\u2014BioMCP maintains context throughout the conversation, enabling follow-up questions like:</p> <ul> <li>Where exactly are these trials located and how far are they from downtown   Cleveland?</li> <li>What biomarker eligibility criteria do these trials require?</li> <li>Are there exclusion criteria I should be aware of?</li> </ul> <p>For each of these questions, BioMCP calls the appropriate tool (trial locations, trial protocols) and processes the information to provide meaningful answers without requiring the user to navigate different interfaces or learn new query languages.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#beyond-basic-search-understanding-trial-details","title":"Beyond Basic Search: Understanding Trial Details","text":"<p>What truly sets BioMCP apart is its ability to go beyond simple listings. When asked about biomarker eligibility criteria, the system can extract this information from the full trial protocol, synthesize it, and present a clear summary of requirements. This capability transforms what would typically be hours of reading dense clinical documentation into a conversational exchange that delivers precisely what the researcher needs.</p>"},{"location":"blog/ai-assisted-clinical-trial-search-analysis/#transforming-clinical-research-workflows","title":"Transforming Clinical Research Workflows","text":"<p>The implications for clinical research are significant. By lowering the technical barriers to accessing trial information, BioMCP can help:</p> <ul> <li>Researchers understand the landscape of current research in their field</li> <li>Research teams identify promising studies more efficiently</li> <li>Clinical research organizations track competing or complementary trials</li> <li>Research coordinators identify potential recruitment sites based on location</li> </ul> <p>As part of the broader BioMCP ecosystem\u2014which also includes access to genomic variant information and PubMed literature\u2014this clinical trial search capability represents a fundamental shift in how we interact with biomedical information. By bringing the power of natural language processing to specialized databases, BioMCP is helping to democratize access to critical health information and accelerate the research process.</p>"},{"location":"blog/researcher-persona-resource/","title":"BioMCP Deep Researcher Persona","text":"<p>With the release of BioMCP v0.1.2, users can now access a specialized Researcher Persona that transforms Claude into a rigorous biomedical research assistant via the Sequential Thinking MCP.</p> <p>This persona is designed to leverage BioMCP's suite of tools for accessing PubMed articles, ClinicalTrials.gov data, and genomic variant information, while incorporating Claude's web search capabilities to produce comprehensive, thoroughly-researched reports.</p>"},{"location":"blog/researcher-persona-resource/#how-to-use-the-researcher-persona","title":"How to Use the Researcher Persona","text":"<p>Getting started with the BioMCP Researcher Persona is straightforward:</p> <ol> <li>Configure Claude Desktop by updating your configuration JSON with:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"biomcp-python&gt;=0.1.2\", \"biomcp\", \"run\"]\n    },\n    \"sequential-thinking\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-sequential-thinking\"]\n    }\n  }\n}\n</code></pre> <ol> <li> <p>Restart Claude Desktop (the <code>&gt;=0.1.2</code> ensures the latest version is used)</p> </li> <li> <p>Select the \"Researcher\" persona from the dropdown menu    </p> </li> <li> <p>Ask your biomedical research question</p> </li> </ol> <p>The Researcher Persona will then work through its 10-step process, keeping you updated on its progress and ultimately producing a comprehensive research brief.</p>"},{"location":"blog/researcher-persona-resource/#video-demonstration","title":"Video Demonstration","text":"<p>Below is a video demonstrating the Researcher Persona in action:</p> <p></p>"},{"location":"blog/researcher-persona-resource/#sequential-thinking-a-rigorous-10-step-research-process","title":"Sequential Thinking: A Rigorous 10-Step Research Process","text":"<p>What makes the Researcher Persona so powerful is its integration with the Sequential Thinking MCP tool, which guides the AI through a comprehensive 10-step research methodology:</p> <ol> <li>Topic Scoping &amp; Domain Framework: Creating a comprehensive structure to    ensure complete coverage</li> <li>Initial Information Gathering: Establishing baseline terminology and    recent developments</li> <li>Focused &amp; Frontier Retrieval: Filling knowledge gaps and identifying    cutting-edge developments</li> <li>Primary Trials Analysis: Identifying and analyzing key clinical trials</li> <li>Primary Literature Analysis: Identifying and analyzing pivotal    publications</li> <li>Initial Evidence Synthesis: Creating a preliminary framework of findings</li> <li>Integrated Gap-Filling: Addressing identified knowledge gaps</li> <li>Comprehensive Evidence Synthesis: Creating a final integrated framework    with quality assessment</li> <li>Self-Critique and Verification: Rigorously assessing the quality and    comprehensiveness</li> <li>Research Brief Creation: Producing the final deliverable with all     required elements</li> </ol> <p></p> <p>This structured approach ensures that no important aspects of the research question are overlooked and that the final output is comprehensive, well-organized, and backed by current evidence.</p>"},{"location":"blog/researcher-persona-resource/#put-to-the-test-emerging-treatment-strategies-for-head-and-neck-cancer","title":"Put to the Test: Emerging Treatment Strategies for Head and Neck Cancer","text":"<p>To evaluate the effectiveness of the Researcher Persona, we conducted a head-to-head comparison with other AI research approaches. We asked the same question to five different systems: \"What are the emerging treatment strategies for head and neck cancer?\"</p> <p>The results were impressive. The BioMCP-powered Researcher Persona, combined with Claude's web search capabilities and the Sequential Thinking tool, produced the highest-rated research brief among all approaches tested.</p> <p></p> <p>The research brief produced by the BioMCP Researcher Persona stood out for several reasons:</p> <ol> <li>Comprehensive domain coverage: The report covered all relevant treatment    modalities (immunotherapy, targeted therapy, radiation techniques, surgery,    combination approaches)</li> <li>Structured evidence categorization: Findings were clearly organized by    level of evidence (Established, Emerging, Experimental, Theoretical)</li> <li>Evidence quality assessment: The brief included critical evaluation of    source quality and evidence strength</li> <li>Thorough citation: All claims were backed by specific references to    scientific literature or clinical trials</li> <li>Self-critique: The report included transparent limitations and    identified areas requiring further research</li> </ol>"},{"location":"blog/researcher-persona-resource/#explore-the-example-and-evaluations","title":"Explore the Example and Evaluations","text":"<p>We've documented this comparison in detail in the biomcp-examples repository, where you can find:</p> <ul> <li>The full research briefs produced by each approach</li> <li>Independent evaluations by three different AI judges (Claude 3.7, Gemini 2.5   Pro, and OpenAI o3)</li> <li>Detailed scoring against a rubric that prioritizes accuracy, clarity, and   comprehensiveness</li> <li>Analysis of strengths and weaknesses of each approach</li> </ul> <p>The consensus among the judges placed the BioMCP-powered brief at the top, highlighting its exceptional structure, evidence-based approach, and comprehensive coverage.</p>"},{"location":"blog/researcher-persona-resource/#beyond-the-example-wide-ranging-applications","title":"Beyond the Example: Wide-Ranging Applications","text":"<p>While our example focused on head and neck cancer treatments, the BioMCP Researcher Persona can tackle a wide range of biomedical research questions:</p> <ul> <li>Therapeutic comparisons: \"Compare the efficacy and safety profiles of JAK   inhibitors versus biologics for treating rheumatoid arthritis\"</li> <li>Disease mechanisms: \"What is the current understanding of gut microbiome   dysbiosis in inflammatory bowel disease?\"</li> <li>Biomarker investigations: \"What emerging biomarkers show promise for   early detection of pancreatic cancer?\"</li> <li>Treatment protocols: \"What are the latest guidelines for managing   anticoagulation in patients with atrial fibrillation and chronic kidney   disease?\"</li> </ul>"},{"location":"blog/researcher-persona-resource/#join-the-biomcp-community","title":"Join the BioMCP Community","text":"<p>The Researcher Persona is just one example of how BioMCP is transforming AI-assisted biomedical research. We invite you to:</p> <ol> <li>Try the Researcher Persona with your own research questions</li> <li>Contribute to    the biomcp-examples repository    with your experiments</li> <li>Share your feedback and suggestions for future improvements</li> </ol> <p>By combining specialized biomedical data access with structured research methodologies, BioMCP is helping researchers produce more comprehensive, accurate, and useful biomedical research briefs than ever before.</p> <p>Have a complex biomedical research question? Give the BioMCP Researcher Persona a try and experience the difference a structured, tool-powered approach can make!</p>"},{"location":"blog/what-is-biomcp/","title":"What is BioMCP?","text":"<p>In the rapidly evolving landscape of artificial intelligence, the power of large language models (LLMs) like ChatGPT and Claude has transformed how we interact with information. However, these models face a significant limitation: without context, they remain static and incomplete, especially in complex domains like healthcare and biomedical research.</p> <p>This is where BioMCP comes in \u2013 an open-source implementation of the Model Context Protocol (MCP) specifically designed for biomedical applications. But what exactly does that mean, and why does it matter?</p> <p>Video Link: </p>"},{"location":"blog/what-is-biomcp/#bridging-the-gap-between-ai-and-specialized-knowledge","title":"Bridging the Gap Between AI and Specialized Knowledge","text":"<p>BioMCP serves as a crucial bridge connecting AI assistants and agents to specialized biomedical data sources. While LLMs have been trained on vast amounts of public data and now have web search capabilities, they often lack the specialized context needed for biomedical research.</p> <p>The Model Context Protocol, recently released by Anthropic, has emerged as a standard for empowering LLMs with tools, resources, and prompts. BioMCP builds on this foundation, creating a specialized toolbox that enables AI systems to access and interpret complex biomedical information through natural language conversation.</p>"},{"location":"blog/what-is-biomcp/#what-can-biomcp-access","title":"What Can BioMCP Access?","text":"<p>BioMCP provides seamless connections to three critical biomedical resources:</p> <ol> <li> <p>Clinical Trials - Through the ClinicalTrials.gov API, researchers can    discover active trials for specific drugs, diseases, or locations. The AI    assistant parses natural language queries into structured search parameters,    retrieving and explaining relevant trials.</p> </li> <li> <p>Genomic Variants - Using the MyVariant.info API, BioMCP enables rich    filtering, sorting, and identification of specific genomic variants, making    complex genomic data accessible through conversation.</p> </li> <li> <p>Research Literature - BioMCP connects to PubMed through PubTator3, which    excels at recognizing biomedical entities like drugs, diseases, genes, and    variants, dramatically improving search relevance and retrieval.</p> </li> </ol>"},{"location":"blog/what-is-biomcp/#how-does-it-transform-research","title":"How Does It Transform Research?","text":"<p>What makes BioMCP particularly powerful is its conversational nature. A researcher might begin with a simple question about a disease, then naturally progress to exploring related clinical trials, and finally investigate genetic variants that affect treatment efficacy\u2014all within a single, flowing conversation.</p> <p>The system remembers context throughout the interaction, allowing for natural follow-up questions and a research experience that mirrors how scientists actually work. Instead of requiring researchers to master complex query languages for each database, BioMCP translates natural language into the precise syntax each system requires.</p>"},{"location":"blog/what-is-biomcp/#why-this-matters","title":"Why This Matters","text":"<p>BioMCP represents a significant advancement in making specialized biomedical knowledge accessible. For researchers and clinicians, it means spending less time wrestling with complex database interfaces and more time advancing their work. For the broader field of AI in healthcare, it demonstrates how specialized knowledge domains can be made accessible through conversation.</p> <p>As both AI assistants (synchronous conversation partners) and AI agents ( autonomous systems working toward goals over time) continue to evolve, tools like BioMCP will be essential in connecting these systems to the specialized knowledge they need to deliver meaningful insights in complex domains.</p> <p>By open-sourcing BioMCP, we're inviting the community to build upon this foundation, creating more powerful and accessible tools for biomedical research and ultimately accelerating the pace of scientific discovery.</p>"},{"location":"cli/articles/","title":"Articles CLI Documentation","text":"<p>The Articles CLI module provides commands for searching and retrieving biomedical research articles using the PubTator3 API, with automatic integration of cBioPortal cancer genomics data when searching for genes.</p> <p>API Documentation:</p> <ul> <li>For PubTator3 API details, see the PubTator3 API Documentation</li> <li>For cBioPortal integration, see the cBioPortal Integration Documentation</li> </ul> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp article search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/articles/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for biomedical research articles based on various filters.</p>"},{"location":"cli/articles/#usage","title":"Usage","text":"<pre><code>biomcp article search [OPTIONS]\n</code></pre>"},{"location":"cli/articles/#options","title":"Options","text":"<ul> <li><code>-g, --gene TEXT</code>: Gene name to search for (e.g., BRAF). Automatically includes cBioPortal data. Can be specified multiple times.</li> <li><code>-v, --variant TEXT</code>: Genetic variant to search for (e.g., \"BRAF V600E\"). Can be specified multiple times.</li> <li><code>-d, --disease TEXT</code>: Disease name to search for (e.g., Melanoma). Can be specified multiple times.</li> <li><code>-c, --chemical TEXT</code>: Chemical or drug name to search for (e.g., Vemurafenib). Can be specified multiple times.</li> <li><code>-k, --keyword TEXT</code>: Additional keyword to search for. Use mutation notation (e.g., \"V600E\", \"F57*\") for mutation-specific cBioPortal data. Can be specified multiple times.</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul> <p>Note: When using the <code>--gene</code> option, cBioPortal cancer genomics data is automatically included in the results.</p>"},{"location":"cli/articles/#examples","title":"Examples","text":"<p>Search for articles about the BRAF gene (includes cBioPortal summary):</p> <pre><code>biomcp article search --gene BRAF\n</code></pre> <p>Search for articles about the BRAF V600E mutation in melanoma:</p> <pre><code>biomcp article search --gene BRAF --variant \"BRAF V600E\" --disease Melanoma\n</code></pre> <p>Search for specific mutations with cBioPortal data:</p> <pre><code># BRAF V600E mutation\nbiomcp article search --gene BRAF --keyword V600E\n\n# SRSF2 F57Y mutation\nbiomcp article search --gene SRSF2 --keyword F57Y\n\n# Any mutation at SRSF2 position 57 (F57*)\nbiomcp article search --gene SRSF2 --keyword \"F57*\"\n</code></pre> <p>Search with multiple gene filters:</p> <pre><code>biomcp article search --gene BRAF --gene KRAS --disease Melanoma\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp article search --gene BRAF --json\n</code></pre>"},{"location":"cli/articles/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information (abstract, metadata) for specific articles using their PubMed IDs (PMIDs) or DOIs.</p>"},{"location":"cli/articles/#usage_1","title":"Usage","text":"<pre><code>biomcp article get [OPTIONS] IDENTIFIERS...\n</code></pre>"},{"location":"cli/articles/#arguments","title":"Arguments","text":"<ul> <li><code>IDENTIFIERS</code>: One or more article identifiers to retrieve. Supports:</li> <li>PubMed IDs (e.g., 38768446)</li> <li>DOIs for Europe PMC preprints (e.g., 10.1101/2024.01.20.23288905)     [required]</li> </ul>"},{"location":"cli/articles/#options_1","title":"Options","text":"<ul> <li><code>-f, --full</code>: Attempt to retrieve full text if available via the API (PubMed only). Abstract is always retrieved. [default: False]</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/articles/#examples_1","title":"Examples","text":"<p>Get article abstract by PMID:</p> <pre><code>biomcp article get 21717063\n</code></pre> <p>Get multiple articles:</p> <pre><code>biomcp article get 21717063 22301848\n</code></pre> <p>Get full text (if available):</p> <pre><code>biomcp article get 21717063 --full\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp article get 21717063 --json\n</code></pre> <p>Get preprint by DOI from Europe PMC:</p> <pre><code>biomcp article get 10.1101/2024.01.20.23288905\n</code></pre> <p>Mix PMIDs and DOIs in a single request:</p> <pre><code>biomcp article get 21717063 10.1101/2024.01.20.23288905 --json\n</code></pre>"},{"location":"cli/health/","title":"Health Check CLI Documentation","text":"<p>The Health Check CLI module provides commands for checking the health of API endpoints and system resources used by BioMCP.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp health check --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/health/#check-command-check","title":"Check Command (<code>check</code>)","text":"<p>Run a comprehensive health check on API endpoints and system resources.</p>"},{"location":"cli/health/#usage","title":"Usage","text":"<pre><code>biomcp health check [OPTIONS]\n</code></pre>"},{"location":"cli/health/#options","title":"Options","text":"<ul> <li><code>--api-only</code>: Check only API endpoints. [default: False]</li> <li><code>--system-only</code>: Check only system health. [default: False]</li> <li><code>-v, --verbose</code>: Show detailed error information and API responses. [default: False]</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/health/#api-endpoints-checked","title":"API Endpoints Checked","text":"<p>The health check command tests connectivity and responses from all external APIs that BioMCP depends on:</p> <ol> <li> <p>PubTator3 API:</p> </li> <li> <p>Autocomplete endpoint</p> </li> <li>Publications export endpoint</li> <li> <p>Search endpoint</p> </li> <li> <p>ClinicalTrials.gov API:</p> </li> <li> <p>Studies search endpoint</p> </li> <li> <p>Individual study retrieval endpoint</p> </li> <li> <p>MyVariant.info API:</p> </li> <li>Query endpoint</li> <li>Variant retrieval endpoint</li> </ol>"},{"location":"cli/health/#system-health-checks","title":"System Health Checks","text":"<p>When checking system health, the command evaluates:</p> <ul> <li>Network connectivity: Tests basic internet connectivity</li> <li>System resources: Monitors CPU usage, memory availability, and disk space</li> <li>Python environment: Reports Python version and critical dependencies</li> </ul> <p>Note: For full system resource checks, the <code>psutil</code> package is required. If not installed, the command will still run but will indicate that <code>psutil</code> is missing.</p>"},{"location":"cli/health/#examples","title":"Examples","text":"<p>Run a complete health check (API endpoints and system resources):</p> <pre><code>biomcp health check\n</code></pre> <p>Check only API endpoints:</p> <pre><code>biomcp health check --api-only\n</code></pre> <p>Check only system resources:</p> <pre><code>biomcp health check --system-only\n</code></pre> <p>Show detailed error information for any failing checks:</p> <pre><code>biomcp health check --verbose\n</code></pre> <p>Combine options as needed:</p> <pre><code>biomcp health check --api-only --verbose\n</code></pre>"},{"location":"cli/health/#output","title":"Output","text":"<p>The command displays results in formatted tables:</p> <ol> <li>API Endpoints Health: Shows the status of each API endpoint (200 OK or error code)</li> <li>System Resources: Displays CPU, memory, and disk usage statistics</li> <li>Network &amp; Environment: Shows network connectivity status and Python environment details</li> </ol> <p>In verbose mode, detailed error information is displayed for any failing endpoints, which can help diagnose API-related issues.</p>"},{"location":"cli/health/#exit-status","title":"Exit Status","text":"<p>The command provides a summary of overall health status:</p> <ul> <li>\"\u2713 All systems operational!\" when all checks pass</li> <li>\"\u26a0 Some health checks failed.\" when one or more checks fail</li> </ul>"},{"location":"cli/trials/","title":"Trials CLI Documentation","text":"<p>The Trials CLI module provides commands for searching and retrieving clinical trial information from ClinicalTrials.gov.</p> <p>API Documentation: For details about the underlying API, see the ClinicalTrials.gov API Documentation.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp trial search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/trials/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for clinical trials based on various filters and criteria.</p>"},{"location":"cli/trials/#usage","title":"Usage","text":"<pre><code>biomcp trial search [OPTIONS]\n</code></pre>"},{"location":"cli/trials/#basic-search-filters","title":"Basic Search Filters","text":"<ul> <li><code>-c, --condition TEXT</code>: Medical condition to search for (e.g., \"Lung Cancer\"). Can specify multiple times.</li> <li><code>-i, --intervention TEXT</code>: Treatment or intervention to search for (e.g., \"Pembrolizumab\"). Can specify multiple times.</li> <li><code>-t, --term TEXT</code>: General search terms (e.g., \"immunotherapy\"). Can specify multiple times.</li> <li><code>-n, --nct-id TEXT</code>: Specific Clinical trial NCT ID(s) to look up (e.g., NCT04179552). Can specify multiple times.</li> <li>Note: When NCT IDs are provided along with other filters (conditions, interventions, etc.), the results will be the intersection of both criteria - only trials that match ALL filters AND are in the NCT ID list will be returned. When NCT IDs are provided alone, only those specific trials are retrieved.</li> </ul>"},{"location":"cli/trials/#study-characteristics-filters","title":"Study Characteristics Filters","text":"<ul> <li><code>-s, --status [OPEN|CLOSED|ANY]</code>: Filter by recruitment status. [default: OPEN]</li> <li><code>--type [INTERVENTIONAL|OBSERVATIONAL|EXPANDED_ACCESS|OTHER]</code>: Filter by study type.</li> <li><code>-p, --phase [EARLY_PHASE1|PHASE1|PHASE2|PHASE3|PHASE4|NOT_APPLICABLE]</code>: Filter by trial phase.</li> <li><code>--purpose [TREATMENT|PREVENTION|DIAGNOSTIC|SUPPORTIVE_CARE|SCREENING|HEALTH_SERVICES|BASIC_SCIENCE|DEVICE_FEASIBILITY|OTHER]</code>: Filter by primary purpose.</li> <li><code>-a, --age-group [CHILD|ADULT|SENIOR|ALL]</code>: Filter by participant age group. [default: ALL]</li> </ul>"},{"location":"cli/trials/#advanced-filters","title":"Advanced Filters","text":"<ul> <li><code>--min-date TEXT</code>: Minimum date for filtering (YYYY-MM-DD format). Requires <code>--date-field</code>.</li> <li><code>--max-date TEXT</code>: Maximum date for filtering (YYYY-MM-DD format). Requires <code>--date-field</code>.</li> <li><code>--date-field [LAST_UPDATE|STUDY_START|PRIMARY_COMPLETION|OUTCOME_POSTING|COMPLETION|FIRST_POSTING|SUBMITTED_DATE]</code>: Date field to use for filtering with <code>--min-date</code>/<code>--max-date</code>. [default: STUDY_START]</li> <li><code>--intervention-type [DRUG|DEVICE|BIOLOGICAL|PROCEDURE|RADIATION|BEHAVIORAL|GENETIC|DIETARY|DIAGNOSTIC_TEST|OTHER]</code>: Filter by the type of intervention.</li> <li><code>--sponsor-type [INDUSTRY|GOVERNMENT|ACADEMIC|OTHER]</code>: Filter by the type of sponsor.</li> <li><code>--study-design [RANDOMIZED|NON_RANDOMIZED|OBSERVATIONAL]</code>: Filter by study design.</li> </ul>"},{"location":"cli/trials/#location-based-search","title":"Location-based Search","text":"<ul> <li><code>--lat FLOAT</code>: Latitude for location-based search (requires <code>--lon</code> and <code>--distance</code>).</li> <li><code>--lon FLOAT</code>: Longitude for location-based search (requires <code>--lat</code> and <code>--distance</code>).</li> <li><code>-d, --distance INTEGER</code>: Distance in miles for location-based search (requires <code>--lat</code> and <code>--lon</code>).</li> </ul>"},{"location":"cli/trials/#results-management","title":"Results Management","text":"<ul> <li><code>--sort [RELEVANCE|LAST_UPDATE|ENROLLMENT|START_DATE|COMPLETION_DATE|SUBMITTED_DATE]</code>: Sort order for results. [default: RELEVANCE]</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/trials/#examples","title":"Examples","text":"<p>Search for clinical trials about melanoma (default status is OPEN):</p> <pre><code>biomcp trial search --condition \"Melanoma\"\n</code></pre> <p>Search for completed trials involving Vemurafenib:</p> <pre><code>biomcp trial search --intervention \"Vemurafenib\" --status CLOSED\n</code></pre> <p>Search for recently started Phase 3 trials for cancer, sorted by start date:</p> <pre><code>biomcp trial search --condition \"Cancer\" --phase PHASE3 --sort START_DATE\n</code></pre> <p>Search for recruiting trials near Boston, MA (approx. coordinates):</p> <pre><code>biomcp trial search --condition \"Diabetes\" --status OPEN --lat 42.36 --lon -71.05 --distance 50\n</code></pre> <p>Search for Phase 2 Immunotherapy trials for Breast Cancer, recruiting:</p> <pre><code>biomcp trial search --condition \"Breast Cancer\" --intervention \"Immunotherapy\" --phase PHASE2 --status OPEN\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp trial search --condition \"Melanoma\" --json\n</code></pre>"},{"location":"cli/trials/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information about a specific clinical trial by its NCT ID and optionally select a specific module of information.</p>"},{"location":"cli/trials/#usage_1","title":"Usage","text":"<pre><code>biomcp trial get [OPTIONS] NCT_ID [MODULE]\n</code></pre>"},{"location":"cli/trials/#arguments","title":"Arguments","text":"<ul> <li><code>NCT_ID</code>: The NCT identifier for the clinical trial (e.g., NCT04267848). [required]</li> <li><code>MODULE</code>: Optional module to retrieve. [default: Protocol]</li> <li><code>Protocol</code>: Core study information (ID, status, design, eligibility, etc.)</li> <li><code>Locations</code>: Contact and site location information.</li> <li><code>References</code>: Associated publications and references.</li> <li><code>Outcomes</code>: Outcome measures and results (if available).</li> </ul>"},{"location":"cli/trials/#options","title":"Options","text":"<ul> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/trials/#examples_1","title":"Examples","text":"<p>Get basic protocol information for a trial:</p> <pre><code>biomcp trial get NCT04267848\n</code></pre> <p>or</p> <pre><code>biomcp trial get NCT04267848 Protocol\n</code></pre> <p>Get location information for a trial:</p> <pre><code>biomcp trial get NCT04267848 Locations\n</code></pre> <p>Get references and publications for a trial:</p> <pre><code>biomcp trial get NCT04267848 References\n</code></pre> <p>Get outcomes data for a trial:</p> <pre><code>biomcp trial get NCT04267848 Outcomes\n</code></pre> <p>Get protocol information as JSON:</p> <pre><code>biomcp trial get NCT04267848 Protocol --json\n</code></pre>"},{"location":"cli/variants/","title":"Variants CLI Documentation","text":"<p>The Variants CLI allows users to search for and retrieve genetic variant information using the MyVariant.info API.</p> <p>API Documentation: For details about the underlying API, see the MyVariant.info API Documentation.</p> <p>Tip: Use the <code>--help</code> flag with any command (e.g., <code>biomcp variant search --help</code>) to see the most up-to-date options directly from the tool.</p>"},{"location":"cli/variants/#search-command-search","title":"Search Command (<code>search</code>)","text":"<p>Search for genetic variants using multiple parameters and filters. At least one search parameter (like gene, hgvsp, rsid, region) is required.</p>"},{"location":"cli/variants/#usage","title":"Usage","text":"<pre><code>biomcp variant search [OPTIONS]\n</code></pre>"},{"location":"cli/variants/#basic-search-parameters","title":"Basic Search Parameters","text":"<ul> <li><code>-g, --gene TEXT</code>: Gene symbol to search for (e.g., BRAF, TP53).</li> <li><code>--hgvsp TEXT</code>: Protein change notation using HGVS format (e.g., \"p.Val600Glu\", \"p.V600E\"). Often used with <code>--gene</code>.</li> <li><code>--hgvsc TEXT</code>: cDNA change notation using HGVS format (e.g., \"c.1799T&gt;A\"). Often used with <code>--gene</code>.</li> <li><code>--rsid TEXT</code>: dbSNP rsID (e.g., \"rs113488022\").</li> <li><code>--region TEXT</code>: Genomic region in format chr:start-end (e.g., \"chr7:140453100-140453200\").</li> </ul>"},{"location":"cli/variants/#clinical-and-functional-filters","title":"Clinical and Functional Filters","text":"<ul> <li><code>-s, --significance [pathogenic|likely_pathogenic|uncertain_significance|likely_benign|benign]</code>: Filter by ClinVar clinical significance. Case-insensitive.</li> <li><code>--min-frequency FLOAT</code>: Minimum gnomAD exome allele frequency (0.0 to 1.0).</li> <li><code>--max-frequency FLOAT</code>: Maximum gnomAD exome allele frequency (0.0 to 1.0).</li> <li><code>--cadd FLOAT</code>: Minimum CADD phred score (e.g., 15, 20). Filters for variants with score &gt;= value.</li> <li><code>--polyphen [D|P|B]</code>: Filter by PolyPhen-2 prediction (D: Probably damaging, P: Possibly damaging, B: Benign). Case-insensitive.</li> <li><code>--sift [D|T]</code>: Filter by SIFT prediction (D: Deleterious, T: Tolerated). Case-insensitive.</li> </ul>"},{"location":"cli/variants/#output-and-source-options","title":"Output and Source Options","text":"<ul> <li><code>--sources TEXT</code>: Comma-separated list of specific data sources to include in the results (e.g., \"clinvar,dbsnp,cosmic\"). See MyVariant.info docs for source names. Adding sources can increase the detail in the output.</li> <li><code>--size INTEGER</code>: Maximum number of results to return [default: 40].</li> <li><code>--offset INTEGER</code>: Result offset for pagination [default: 0]. Use with <code>--size</code> for paging.</li> <li><code>--sort TEXT</code>: Field to sort results by, using MyVariant.info syntax (e.g., \"cadd.phred:desc\").</li> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/variants/#examples","title":"Examples","text":"<p>Search for a variant by gene and protein change:</p> <pre><code>biomcp variant search --gene BRAF --hgvsp p.V600E\n</code></pre> <p>Search for pathogenic variants in TP53:</p> <pre><code>biomcp variant search --gene TP53 --significance pathogenic\n</code></pre> <p>Search for rare (max freq 0.1%) BRAF variants with high CADD score:</p> <pre><code>biomcp variant search --gene BRAF --max-frequency 0.001 --cadd 20\n</code></pre> <p>Search by genomic region:</p> <pre><code>biomcp variant search --region chr7:140453130-140453140\n</code></pre> <p>Search by rsID and request extra data from COSMIC:</p> <pre><code>biomcp variant search --rsid rs113488022 --sources cosmic\n</code></pre> <p>Get results as JSON:</p> <pre><code>biomcp variant search --gene BRAF --hgvsp p.V600E --json\n</code></pre>"},{"location":"cli/variants/#get-command-get","title":"Get Command (<code>get</code>)","text":"<p>Retrieve detailed information about a single specific variant by its identifier.</p>"},{"location":"cli/variants/#usage_1","title":"Usage","text":"<pre><code>biomcp variant get [OPTIONS] VARIANT_ID\n</code></pre>"},{"location":"cli/variants/#arguments","title":"Arguments","text":"<ul> <li><code>VARIANT_ID</code>: The variant identifier. This can be a MyVariant.info ID (HGVS format, e.g., \"chr7:g.140453136A&gt;T\") or a dbSNP rsID (e.g., \"rs113488022\"). [required]</li> </ul>"},{"location":"cli/variants/#options","title":"Options","text":"<ul> <li><code>-j, --json</code>: Render output in JSON format instead of Markdown.</li> <li><code>--help</code>: Show help message and exit.</li> </ul>"},{"location":"cli/variants/#examples_1","title":"Examples","text":"<p>Get a variant by HGVS ID:</p> <pre><code>biomcp variant get chr7:g.140453136A&gt;T\n</code></pre> <p>Get a variant by rsID:</p> <pre><code>biomcp variant get rs113488022\n</code></pre> <p>Get a variant by rsID as JSON:</p> <pre><code>biomcp variant get rs113488022 --json\n</code></pre>"},{"location":"cli/variants/#predict-command-predict","title":"Predict Command (<code>predict</code>)","text":"<p>Predict variant effects on gene regulation using Google DeepMind's AlphaGenome model. This advanced feature uses AI to predict how genetic variants affect gene expression, chromatin accessibility, splicing, and other regulatory mechanisms.</p>"},{"location":"cli/variants/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install AlphaGenome (optional dependency):</li> </ol> <pre><code>git clone https://github.com/google-deepmind/alphagenome.git\ncd alphagenome &amp;&amp; pip install .\n</code></pre> <ol> <li>API Key: Get a free API key from DeepMind AlphaGenome and set:    <pre><code>export ALPHAGENOME_API_KEY='your-api-key'\n</code></pre></li> </ol>"},{"location":"cli/variants/#usage_2","title":"Usage","text":"<pre><code>biomcp variant predict [OPTIONS] CHROMOSOME POSITION REFERENCE ALTERNATE\n</code></pre>"},{"location":"cli/variants/#arguments_1","title":"Arguments","text":"<ul> <li><code>CHROMOSOME</code>: Chromosome name (e.g., chr7, chrX) [required]</li> <li><code>POSITION</code>: 1-based genomic position [required]</li> <li><code>REFERENCE</code>: Reference allele(s) (e.g., A, ATG) [required]</li> <li><code>ALTERNATE</code>: Alternate allele(s) (e.g., T, A) [required]</li> </ul>"},{"location":"cli/variants/#options_1","title":"Options","text":"<ul> <li><code>-i, --interval INTEGER</code>: Size of genomic interval to analyze in base pairs (default: 100000, max: 1000000)</li> <li><code>-t, --tissue TEXT</code>: UBERON ontology terms for tissue-specific predictions. Can be used multiple times.</li> <li><code>--help</code>: Show help message and exit</li> </ul>"},{"location":"cli/variants/#examples_2","title":"Examples","text":"<p>Predict effects of BRAF V600E mutation:</p> <pre><code>biomcp variant predict chr7 140753336 A T\n</code></pre> <p>Predict with tissue-specific context (breast tissue):</p> <pre><code>biomcp variant predict chr7 140753336 A T --tissue UBERON:0002367\n</code></pre> <p>Use larger analysis window (500kb):</p> <pre><code>biomcp variant predict chr7 140753336 A T --interval 500000\n</code></pre> <p>Multiple tissue contexts:</p> <pre><code>biomcp variant predict chr7 140753336 A T --tissue UBERON:0002367 --tissue UBERON:0001157\n</code></pre>"},{"location":"cli/variants/#output","title":"Output","text":"<p>AlphaGenome predictions include:</p> <ul> <li>Gene Expression: Log\u2082 fold changes in RNA-seq signals</li> <li>Chromatin Accessibility: Changes in ATAC-seq/DNase-seq signals</li> <li>Splicing: Potential splice site alterations</li> <li>Promoter Activity: CAGE signal changes</li> <li>Summary Statistics: Number of affected regulatory tracks</li> </ul> <p>Results show the most significant effects across all analyzed regulatory modalities, helping understand the variant's potential functional impact.</p> <p>\ud83d\udcda Further Reading: For detailed setup instructions and advanced usage examples, see the AlphaGenome Setup Guide and AlphaGenome Prompt Examples.</p>"},{"location":"cli/variants/#output-format","title":"Output Format","text":"<p>By default, both search and get output variant information in Markdown format, designed for readability. This includes key annotations and automatically generated links to external databases like dbSNP, ClinVar, Ensembl, UCSC Genome Browser, etc., where applicable.</p> <p>Use the <code>--json</code> flag to get the raw data (with injected URLs) as a JSON object, which is useful for scripting or integration with other tools. The specific fields returned by default in a search focus on common identifiers and annotations; use <code>--sources</code> to request more comprehensive data for specific databases. The get command retrieves all available default fields plus database links.</p>"},{"location":"development/testing/","title":"Testing Guide","text":""},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#all-tests-local-development","title":"All Tests (Local Development)","text":"<pre><code>make test\n</code></pre>"},{"location":"development/testing/#unit-tests-only-excluding-integration-tests","title":"Unit Tests Only (Excluding Integration Tests)","text":"<pre><code>uv run python -m pytest tests -m \"not integration\"\n</code></pre>"},{"location":"development/testing/#integration-tests-only","title":"Integration Tests Only","text":"<pre><code>uv run python -m pytest tests -m \"integration\"\n</code></pre>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":""},{"location":"development/testing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Run without external API calls</li> <li>Fast and reliable</li> <li>Always run in CI</li> </ul>"},{"location":"development/testing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Make real API calls to external services (PubMed, cBioPortal, etc.)</li> <li>Marked with <code>@pytest.mark.integration</code></li> <li>May fail due to:</li> <li>Network issues</li> <li>API rate limiting</li> <li>Service availability</li> <li>Run separately in CI with <code>continue-on-error: true</code></li> </ul>"},{"location":"development/testing/#cicd-testing-strategy","title":"CI/CD Testing Strategy","text":"<ol> <li> <p>Pull Requests &amp; Main Branch:</p> </li> <li> <p>Run unit tests only (<code>-m \"not integration\"</code>)</p> </li> <li>Ensures fast, reliable CI runs</li> <li> <p>Prevents flaky test failures</p> </li> <li> <p>Integration Tests:</p> </li> <li>Run in a separate optional job</li> <li>Allowed to fail without blocking CI</li> <li>Useful for monitoring API availability</li> </ol>"},{"location":"development/testing/#writing-new-tests","title":"Writing New Tests","text":""},{"location":"development/testing/#unit-test-example","title":"Unit Test Example","text":"<pre><code>@pytest.mark.asyncio\nasync def test_search_articles():\n    \"\"\"Test article search functionality.\"\"\"\n    # Mock external API calls\n    with patch(\"biomcp.articles.search.fetch_articles\") as mock_fetch:\n        mock_fetch.return_value = {\"results\": [...]}\n        # Test code here\n</code></pre>"},{"location":"development/testing/#integration-test-example","title":"Integration Test Example","text":"<pre><code>@pytest.mark.asyncio\n@pytest.mark.integration  # This marks it as an integration test\nasync def test_real_api_call():\n    \"\"\"Test real API interaction.\"\"\"\n    # Makes actual API calls\n    result = await fetch_from_pubmed(\"BRAF\")\n    assert result is not None\n</code></pre>"},{"location":"development/testing/#troubleshooting-test-failures","title":"Troubleshooting Test Failures","text":""},{"location":"development/testing/#integration-test-failures","title":"Integration Test Failures","text":"<p>If integration tests fail in CI:</p> <ol> <li>Check if the external API is available</li> <li>Look for rate limiting messages</li> <li>Verify network connectivity</li> <li>These failures don't block merges</li> </ol>"},{"location":"development/testing/#running-tests-with-coverage","title":"Running Tests with Coverage","text":"<pre><code>make cov\n</code></pre> <p>This generates an HTML coverage report in <code>htmlcov/</code>.</p>"},{"location":"policies/biomcp-privacy/","title":"GenomOncology Remote MCP","text":"<p>Privacy Policy Version 1.2 \u2013 Effective June 18, 2025</p>"},{"location":"policies/biomcp-privacy/#1-data-we-collect","title":"1. Data We Collect","text":"Type Examples Source Storage Account Google user ID, email, display name From Google OAuth BigQuery Queries Prompts, timestamps User input BigQuery Operational IP address, user-agent Automatic Temporary only Usage Token counts, latency, model performance Derived metrics Aggregated Third-Party Responses API responses from PubMed, bioRxiv, etc. Third-party services Not stored <p>We do not collect sensitive health or demographic information.</p>"},{"location":"policies/biomcp-privacy/#2-how-we-use-it","title":"2. How We Use It","text":"<ul> <li>Authenticate and secure the service</li> <li>Improve quality, accuracy, and speed of model output</li> <li>Analyze aggregate usage for insights</li> <li>Monitor third-party API performance (without storing responses)</li> <li>Comply with laws</li> </ul>"},{"location":"policies/biomcp-privacy/#3-legal-basis-gdpruk","title":"3. Legal Basis (GDPR/UK)","text":"<ul> <li>Contractual necessity (Art. 6(1)(b) GDPR)</li> <li>Legitimate interests (Art. 6(1)(f))</li> <li>Consent, where applicable</li> </ul>"},{"location":"policies/biomcp-privacy/#4-who-we-share-with","title":"4. Who We Share With","text":"<ul> <li>Google Cloud / Cloudflare \u2013 Hosting &amp; Auth</li> <li>API providers \u2013 e.g., PubMed, bioRxiv</li> <li>Your queries are transmitted to these services</li> <li>We do not control their data retention practices</li> <li>We do not store third-party responses</li> <li>Analytics tools \u2013 e.g., BigQuery</li> <li>Authorities \u2013 if required by law</li> </ul> <p>We do not sell your personal data.</p>"},{"location":"policies/biomcp-privacy/#5-third-party-data-handling","title":"5. Third-Party Data Handling","text":"<p>When you use the Service:</p> <ul> <li>Your queries may be sent to third-party APIs (PubMed, bioRxiv, TCGA, 1000 Genomes)</li> <li>These services have their own privacy policies and data practices</li> <li>We use third-party responses to generate output but do not store them</li> <li>Third parties may independently retain query data per their policies</li> <li>Only your username and queries are stored in our systems</li> </ul>"},{"location":"policies/biomcp-privacy/#6-cookies","title":"6. Cookies","text":"<p>We use only Google OAuth session cookies. No additional tracking cookies are set.</p>"},{"location":"policies/biomcp-privacy/#7-data-retention","title":"7. Data Retention","text":"<ul> <li>BigQuery storage (usernames &amp; queries): Retained indefinitely</li> <li>Operational data (IP, user-agent): Not retained</li> <li>Third-party responses: Not stored</li> <li>Aggregated metrics: Retained indefinitely</li> <li>Account Username: Retained until deletion requested</li> </ul>"},{"location":"policies/biomcp-privacy/#8-security","title":"8. Security","text":"<ul> <li>All data encrypted in transit (TLS 1.3)</li> <li>Least-privilege access enforced via IAM</li> <li>Username and query data stored in BigQuery with strict access control</li> <li>Operational data (IP, user-agent) processed but not retained</li> <li>Incident Response: Security incidents investigated within 24 hours</li> <li>Breach Notification: Users notified within 72 hours of confirmed breach</li> <li>Security Audits: Annual third-party security assessments</li> <li>Vulnerability Reporting: See our SECURITY.md</li> </ul>"},{"location":"policies/biomcp-privacy/#9-international-transfers","title":"9. International Transfers","text":"<p>Data is stored in Google Cloud's <code>us-central1</code>. Transfers from the EU/UK rely on SCCs.</p>"},{"location":"policies/biomcp-privacy/#10-your-rights","title":"10. Your Rights","text":"<p>Depending on your location, you may request to:</p> <ul> <li>Access, correct, or delete your data</li> <li>Restrict or object to processing</li> <li>Port your data</li> <li>File a complaint (EEA/UK)</li> <li>Opt out (California residents)</li> </ul> <p>Data Export:</p> <ul> <li>Available in JSON or CSV format</li> <li>Requests fulfilled within 30 days</li> <li>Includes: account info, queries, timestamps</li> <li>Excludes: operational data, third-party responses, aggregated metrics</li> </ul> <p>Email: privacy@genomoncology.com</p>"},{"location":"policies/biomcp-privacy/#11-childrens-privacy","title":"11. Children's Privacy","text":"<p>The Service is not intended for use by anyone under 16 years old.</p>"},{"location":"policies/biomcp-privacy/#12-policy-changes","title":"12. Policy Changes","text":"<p>We will update this document at <code>/privacy</code> with an updated Effective Date. Material changes will be announced by email. Version history maintained at: github.com/genomoncology/biomcp/blob/main/docs/biomcp-privacy.md</p>"},{"location":"policies/biomcp-privacy/#13-contact","title":"13. Contact","text":"<p>Data Protection Officer \ud83d\udce7 dpo@genomoncology.com \ud83d\udcee GenomOncology LLC \u2013 Privacy Office 1138 West 9th Street, Suite 400 Cleveland, OH 44113</p>"},{"location":"policies/biomcp-security/","title":"Security Policy","text":""},{"location":"policies/biomcp-security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>We take the security of biomcp seriously. If you believe you have found a security vulnerability, please report it to us as described below.</p>"},{"location":"policies/biomcp-security/#please-do-not","title":"Please do NOT:","text":"<ul> <li>Open a public GitHub issue</li> <li>Discuss the vulnerability publicly before it has been addressed</li> </ul>"},{"location":"policies/biomcp-security/#please-do","title":"Please DO:","text":"<ul> <li>Email us at security@genomoncology.com</li> <li>Include the word \"SECURITY\" in the subject line</li> <li>Provide detailed steps to reproduce the vulnerability</li> <li>Include the impact and potential attack scenarios</li> </ul>"},{"location":"policies/biomcp-security/#what-to-expect","title":"What to expect:","text":"<ul> <li>Acknowledgment: Within 24 hours</li> <li>Initial Assessment: Within 72 hours</li> <li>Status Updates: At least every 5 business days</li> <li>Resolution Target: Critical issues within 30 days</li> </ul>"},{"location":"policies/biomcp-security/#scope","title":"Scope","text":"<p>Vulnerabilities in the following areas are in scope:</p> <ul> <li>Authentication bypass or privilege escalation</li> <li>Data exposure or unauthorized access to user queries</li> <li>Injection vulnerabilities (SQL, command, etc.)</li> <li>Cross-site scripting (XSS) or request forgery (CSRF)</li> <li>Denial of service vulnerabilities</li> <li>Insecure cryptographic implementations</li> <li>Third-party API key exposure</li> </ul>"},{"location":"policies/biomcp-security/#out-of-scope","title":"Out of Scope:","text":"<ul> <li>Vulnerabilities in third-party services (PubMed, bioRxiv, etc.)</li> <li>Issues in dependencies with existing patches</li> <li>Social engineering attacks</li> <li>Physical attacks</li> <li>Attacks requiring authenticated admin access</li> </ul>"},{"location":"policies/biomcp-security/#disclosure-policy","title":"Disclosure Policy","text":"<ul> <li>We will work with you to understand and validate the issue</li> <li>We will prepare a fix and release it as soon as possible</li> <li>We will publicly disclose the vulnerability after the fix is released</li> <li>We will credit you for the discovery (unless you prefer to remain anonymous)</li> </ul>"},{"location":"policies/biomcp-security/#safe-harbor","title":"Safe Harbor","text":"<p>Any activities conducted in a manner consistent with this policy will be considered authorized conduct, and we will not initiate legal action against you. If legal action is initiated by a third party against you in connection with activities conducted under this policy, we will take steps to make it known that your actions were conducted in compliance with this policy.</p>"},{"location":"policies/biomcp-security/#contact","title":"Contact","text":"<p>Security Team Email: security@genomoncology.com PGP Key: Available upon request</p> <p>Thank you for helping keep biomcp and our users safe!</p>"},{"location":"policies/biomcp-terms/","title":"GenomOncology Remote MCP","text":"<p>Terms of Service Version 1.2 \u2013 Effective June 18, 2025</p> <p>This document applies to the hosted Remote MCP service (the \"Service\") provided by GenomOncology LLC.</p> <p>For use of the open-source code available at https://github.com/genomoncology/biomcp, refer to the repository's LICENSE file (e.g., MIT License).</p>"},{"location":"policies/biomcp-terms/#1-definitions","title":"1. Definitions","text":"Term Meaning Service The hosted Model Context Protocol (MCP) instance available via Cloudflare and secured by Google OAuth. User Content Prompts, messages, files, code, or other material submitted by you. Output Model-generated text or data produced in response to your User Content. Personal Data Information that identifies or relates to an identifiable individual, including Google account identifiers and query text. Commercial Use Any use that directly or indirectly generates revenue, including but not limited to: selling access, integrating into paid products, or using for business operations. Academic Research Non-commercial research conducted by accredited educational institutions for scholarly purposes."},{"location":"policies/biomcp-terms/#2-eligibility-accounts","title":"2. Eligibility &amp; Accounts","text":"<p>You must:</p> <ul> <li>Be at least 16 years old</li> <li>Have a valid Google account</li> <li>Not be barred from receiving services under applicable law</li> </ul> <p>Authentication is handled via Google OAuth. Keep your credentials secure.</p>"},{"location":"policies/biomcp-terms/#3-license-intellectual-property","title":"3. License &amp; Intellectual Property","text":"<p>You are granted a limited, revocable, non-exclusive, non-transferable license to use the Service for internal research and non-commercial evaluation.</p> <p>Permitted Uses:</p> <ul> <li>Personal research and learning</li> <li>Academic research (with attribution)</li> <li>Evaluation for potential commercial licensing</li> <li>Open-source development (non-commercial)</li> </ul> <p>Prohibited Commercial Uses:</p> <ul> <li>Reselling or redistributing Service access</li> <li>Integration into commercial products/services</li> <li>Use in revenue-generating operations</li> <li>Commercial data analysis or insights</li> </ul> <p>For commercial licensing inquiries, contact: licensing@genomoncology.com</p> <p>We retain all rights in the Service and its software. You retain ownership of your User Content, but grant us a royalty-free, worldwide license to use it (and the resulting Output) to provide, secure, and improve the Service.</p>"},{"location":"policies/biomcp-terms/#4-acceptable-use-rate-limits","title":"4. Acceptable Use &amp; Rate Limits","text":"<p>You must not:</p> <ol> <li>Violate any law or regulation</li> <li>Reverse-engineer, scrape, or probe the Service or model weights</li> <li>Exceed rate limits or disrupt the Service</li> </ol> <p>Rate Limits:</p> <ul> <li>Standard tier: 100 requests per hour, 1000 per day</li> <li>Burst limit: 10 requests per minute</li> <li>Payload size: 50KB per request</li> </ul> <p>Exceeding Limits:</p> <ul> <li>First violation: 1-hour suspension</li> <li>Repeated violations: Account review and possible termination</li> <li>Higher limits available upon request: api-limits@genomoncology.com</li> </ul>"},{"location":"policies/biomcp-terms/#5-privacy-logging-improvement","title":"5. Privacy, Logging &amp; Improvement","text":"<p>We store Google user ID, email address, and query text with timestamps in Google BigQuery. This data is analyzed to:</p> <ul> <li>Operate and secure the Service</li> <li>Improve system performance and user experience</li> <li>Tune models and develop features</li> <li>Generate usage analytics</li> </ul> <p>Note: We process but do not retain operational data like IP addresses or user-agents. Third-party API responses are used in real-time but not stored.</p> <p>See our Privacy Policy for details.</p>"},{"location":"policies/biomcp-terms/#6-thirdparty-services","title":"6. Third\u2011Party Services","text":"<p>The Service queries third-party APIs and knowledge sources (e.g., PubMed, bioRxiv, TCGA, 1000 Genomes) to respond to user prompts.</p> <p>Important:</p> <ul> <li>Your queries are transmitted to these services</li> <li>Third-party services have independent terms and privacy policies</li> <li>We cannot guarantee their availability, accuracy, or uptime</li> <li>Third parties may retain your query data per their policies</li> <li>API responses are used to generate output but not stored by us</li> </ul> <p>You acknowledge that third-party content is subject to their respective licenses and terms.</p>"},{"location":"policies/biomcp-terms/#7-disclaimers","title":"7. Disclaimers","text":"<ul> <li>AI Output: May be inaccurate or biased. Do not rely on it for medical or legal decisions.</li> <li>AS\u2011IS: The Service is provided \"as is\" with no warranties or guarantees.</li> <li>Third-Party Content: We are not responsible for accuracy or availability of third-party data.</li> </ul>"},{"location":"policies/biomcp-terms/#8-limitation-of-liability","title":"8. Limitation of Liability","text":"<p>To the extent permitted by law, GenomOncology is not liable for indirect, incidental, or consequential damages, including:</p> <ul> <li>Data loss</li> <li>Business interruption</li> <li>Inaccurate output</li> <li>Third-party service failures</li> </ul>"},{"location":"policies/biomcp-terms/#9-indemnification","title":"9. Indemnification","text":"<p>You agree to indemnify and hold GenomOncology harmless from any claim resulting from your misuse of the Service.</p>"},{"location":"policies/biomcp-terms/#10-termination","title":"10. Termination","text":"<p>We may suspend or terminate access at any time. Upon termination:</p> <ul> <li>Your license ends immediately</li> <li>We retain stored data (username &amp; queries) per our Privacy Policy</li> <li>You may request data export within 30 days</li> </ul>"},{"location":"policies/biomcp-terms/#11-governing-law-dispute-resolution","title":"11. Governing Law &amp; Dispute Resolution","text":"<p>These Terms are governed by the laws of Ohio, USA. Disputes will be resolved via binding arbitration in Cuyahoga County, Ohio, under JAMS Streamlined Rules.</p>"},{"location":"policies/biomcp-terms/#12-changes","title":"12. Changes","text":"<p>We may update these Terms by posting to <code>/terms</code>. Material changes will be emailed. Continued use constitutes acceptance. Version history: github.com/genomoncology/biomcp/blob/main/docs/biomcp-terms.md</p>"},{"location":"policies/biomcp-terms/#13-security-vulnerability-reporting","title":"13. Security &amp; Vulnerability Reporting","text":"<p>Found a security issue? Please report it responsibly:</p> <ul> <li>Email: security@genomoncology.com</li> <li>See: SECURITY.md</li> </ul>"},{"location":"policies/biomcp-terms/#14-contact","title":"14. Contact","text":"<p>GenomOncology LLC 1138 West 9th Street, Suite 400 Cleveland, OH 44113 \ud83d\udce7 legal@genomoncology.com</p>"},{"location":"policies/biomcp-terms/#appendix-a-acceptable-use-policy-aup","title":"Appendix A \u2013 Acceptable Use Policy (AUP)","text":"<ul> <li>Do not submit illegal, harassing, or hateful content</li> <li>Do not generate malware, spam, or scrape personal data</li> <li>Respect copyright and IP laws</li> <li>Do not attempt to re-identify individuals from model output</li> <li>Do not use the Service to process protected health information (PHI)</li> <li>Do not submit personally identifiable genetic data</li> </ul>"},{"location":"troubleshooting/macos/","title":"MacOS Troubleshooting Guide","text":"<p>Prerequisites:</p> <ul> <li>Ensure you have <code>uv</code> installed. Recommended method for macOS:   <pre><code>brew install uv\n</code></pre>   For other systems or methods, see the uv installation guide.</li> <li>Ensure you have <code>npx</code> available (usually comes with Node.js/npm). Recommended method for macOS if needed:   <pre><code>brew install node\n</code></pre></li> </ul> <p>1. Testing the CLI Directly:</p> <p>You can run <code>biomcp</code> commands directly without a full installation using <code>uv</code>:</p> <ul> <li>Check the version:   <pre><code>uv run --with biomcp-python biomcp version\n# Expected Output (version may vary): biomcp version: 0.1.0\n</code></pre></li> <li>Test a search command (e.g., trial search):   <pre><code>uv run --with biomcp-python biomcp trial search --condition NSCLC | head -n 5\n# Expected Output (NCT ID and Title will vary):\n# # Record 1\n# Nct Number: NCT0XXXXXXX\n# Study Title:\n#   Some Title Related to NSCLC\n# Study Url: https://clinicaltrials.gov/study/NCT0XXXXXXX\n</code></pre></li> </ul> <p>2. Testing the MCP Server with Inspector:</p> <p>This verifies that the server starts correctly and the tools are available via the Model Context Protocol.</p> <ul> <li>Run the inspector, telling it to start your server using the <code>uv</code> command:   <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre></li> <li>Open the MCP Inspector interface in your browser (usually <code>http://127.0.0.1:6274</code>).</li> <li>You should see the list of available tools (e.g., <code>article_searcher</code>, <code>trial_protocol</code>, <code>variant_searcher</code>, etc.).</li> <li>Try invoking a tool:</li> <li>Select <code>trial_searcher</code>.</li> <li>Enter valid JSON input matching the <code>TrialQuery</code> model, for example:     <pre><code>{\n  \"conditions\": [\"Melanoma\"],\n  \"recruiting_status\": \"OPEN\"\n}\n</code></pre></li> <li>Click \"Call Tool\".</li> <li>You should see a Markdown-formatted list of results in the \"Output\" section.</li> </ul>"},{"location":"tutorials/alphagenome-api-key-handling/","title":"AlphaGenome API Key Handling","text":"<p>This guide explains how to use AlphaGenome predictions in BioMCP, especially in hosted environments where users need to provide their own API keys.</p>"},{"location":"tutorials/alphagenome-api-key-handling/#overview","title":"Overview","text":"<p>AlphaGenome requires an API key for predictions. BioMCP supports three ways to provide it:</p> <ol> <li>Per-request API key (recommended for hosted environments)</li> <li>Environment variable (for personal use)</li> <li>Interactive prompt (AI agents will ask for it)</li> </ol>"},{"location":"tutorials/alphagenome-api-key-handling/#per-request-api-key-recommended-for-hosted-environments","title":"Per-Request API Key (Recommended for Hosted Environments)","text":"<p>When using BioMCP through a hosted service or AI assistant, include your API key directly in your request:</p>"},{"location":"tutorials/alphagenome-api-key-handling/#example-1-natural-language","title":"Example 1: Natural Language","text":"<pre><code>\"Predict regulatory effects of BRAF V600E mutation: chr7:140753336 A&gt;T.\nMy AlphaGenome API key is YOUR_KEY_HERE\"\n</code></pre> <p>The AI agent will recognize the pattern \"My AlphaGenome API key is...\" and extract the key automatically.</p>"},{"location":"tutorials/alphagenome-api-key-handling/#example-2-multiple-predictions","title":"Example 2: Multiple Predictions","text":"<pre><code>\"I need to analyze several variants. My AlphaGenome API key is YOUR_KEY_HERE.\nPlease predict effects for:\n1. BRAF V600E (chr7:140753336 A&gt;T)\n2. TP53 R273H (chr17:7577121 C&gt;T)\n3. EGFR L858R (chr7:55259515 T&gt;G)\"\n</code></pre>"},{"location":"tutorials/alphagenome-api-key-handling/#environment-variable-personal-use","title":"Environment Variable (Personal Use)","text":"<p>For personal use or development, set the API key as an environment variable:</p> <pre><code>export ALPHAGENOME_API_KEY='your-key-here'\n</code></pre>"},{"location":"tutorials/alphagenome-api-key-handling/#interactive-prompt","title":"Interactive Prompt","text":"<p>If no API key is provided, the AI agent will receive a clear action request:</p> <pre><code>\u274c **AlphaGenome API key required**\n\nI need an API key to use AlphaGenome. Please provide it by either:\n\n**Option 1: Include your key in your request**\nSay: \"My AlphaGenome API key is YOUR_KEY_HERE\" and I'll use it for this prediction.\n\n**Option 2: Set it as an environment variable (for persistent use)**\n```bash\nexport ALPHAGENOME_API_KEY='your-key'\n</code></pre> <p>Get a free API key at: https://deepmind.google.com/science/alphagenome</p> <p>ACTION REQUIRED: Please provide your API key using Option 1 above to continue.</p> <pre><code>## CLI Usage\n\nThe CLI also supports per-request API keys:\n\n```bash\n# Using environment variable\nexport ALPHAGENOME_API_KEY='your-key'\nbiomcp variant predict chr7 140753336 A T\n\n# Using command-line option\nbiomcp variant predict chr7 140753336 A T --api-key YOUR_KEY\n\n# The --api-key option overrides the environment variable\n</code></pre>"},{"location":"tutorials/alphagenome-api-key-handling/#security-considerations","title":"Security Considerations","text":"<ol> <li>Hosted Environments: Always use per-request API keys to ensure users' keys aren't shared</li> <li>Never commit API keys to version control</li> <li>Use environment variables only on trusted personal machines</li> <li>API keys are user-specific - each user should obtain their own</li> </ol>"},{"location":"tutorials/alphagenome-api-key-handling/#getting-an-api-key","title":"Getting an API Key","text":"<ol> <li>Visit https://deepmind.google.com/science/alphagenome</li> <li>Register for a free API key (non-commercial use)</li> <li>Keep your key secure and don't share it</li> </ol>"},{"location":"tutorials/alphagenome-api-key-handling/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/alphagenome-api-key-handling/#ai-agent-doesnt-ask-for-key","title":"AI Agent Doesn't Ask for Key","text":"<p>If the AI agent doesn't proactively ask for your API key, include it in your initial request:</p> <ul> <li>\u2705 \"Predict effects of chr7:140753336 A&gt;T. My AlphaGenome API key is KEY123\"</li> <li>\u274c \"Predict effects of chr7:140753336 A&gt;T\" (agent may continue without asking)</li> </ul>"},{"location":"tutorials/alphagenome-api-key-handling/#key-not-recognized","title":"Key Not Recognized","text":"<p>Ensure you use the exact phrase \"My AlphaGenome API key is\" followed by your key.</p>"},{"location":"tutorials/alphagenome-api-key-handling/#invalid-key-error","title":"Invalid Key Error","text":"<p>Verify your key is correct and active at the AlphaGenome website.</p>"},{"location":"tutorials/alphagenome-api-key-handling/#best-practices","title":"Best Practices","text":"<ol> <li>For AI Assistants: Always include your API key in the initial request</li> <li>For Scripts: Use environment variables for automation</li> <li>For Hosted Services: Never store users' API keys; always use per-request keys</li> <li>For Development: Use a separate development API key</li> </ol>"},{"location":"tutorials/alphagenome-api-key-handling/#example-conversation","title":"Example Conversation","text":"<p>User: \"Can you predict the effects of the BRAF V600E mutation?\"</p> <p>AI: \"I'll help you predict the effects of the BRAF V600E mutation using AlphaGenome. I'll need your AlphaGenome API key to proceed. Please provide it by saying 'My AlphaGenome API key is YOUR_KEY_HERE'.\"</p> <p>User: \"My AlphaGenome API key is AIzaSyB...\"</p> <p>AI: \"Thank you! Now analyzing the BRAF V600E mutation (chr7:140753336 A&gt;T)...\"</p> <p>[Results follow]</p>"},{"location":"tutorials/alphagenome-prompts/","title":"AlphaGenome Prompt Examples","text":"<p>This guide provides example prompts for using AlphaGenome through BioMCP to analyze genetic variants. These prompts are designed for use with AI assistants like Claude that have BioMCP integrated.</p>"},{"location":"tutorials/alphagenome-prompts/#including-your-api-key","title":"Including Your API Key","text":"<p>When using AlphaGenome through an AI assistant, include your API key in your request:</p> <pre><code>Analyze BRAF V600E mutation effects. My AlphaGenome API key is YOUR_KEY_HERE\n</code></pre> <p>Or for multiple analyses:</p> <pre><code>My AlphaGenome API key is YOUR_KEY_HERE. Please analyze these variants:\n1. BRAF V600E (chr7:140753336 A&gt;T)\n2. TP53 R273H (chr17:7577121 C&gt;T)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#basic-variant-analysis","title":"Basic Variant Analysis","text":""},{"location":"tutorials/alphagenome-prompts/#known-pathogenic-variants","title":"Known Pathogenic Variants","text":"<p>BRAF V600E (Melanoma)</p> <pre><code>Use alphagenome_predictor to analyze the regulatory effects of the BRAF V600E mutation (chr7:140753336 A&gt;T)\n</code></pre> <p>TP53 Hotspot Mutations</p> <pre><code>Predict how the TP53 R175H mutation (chr17:7675088 C&gt;T) affects gene expression and chromatin accessibility\n</code></pre> <p>EGFR Resistance Mutation</p> <pre><code>What are the predicted regulatory impacts of the EGFR T790M mutation (chr7:55181378 C&gt;T)?\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#non-coding-variant-analysis","title":"Non-coding Variant Analysis","text":"<p>Promoter Variants</p> <pre><code>Analyze this promoter variant using AlphaGenome: chr1:45797505 G&gt;A in the MUTYH gene promoter\n</code></pre> <p>Enhancer Variants</p> <pre><code>Use alphagenome_predictor to assess this enhancer variant: chr8:128748315 T&gt;C near the MYC gene\n</code></pre> <p>UTR Variants</p> <pre><code>Predict the regulatory effects of this 5' UTR variant: chr17:41244936 G&gt;A in BRCA1\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#research-oriented-analysis","title":"Research-Oriented Analysis","text":""},{"location":"tutorials/alphagenome-prompts/#variant-prioritization","title":"Variant Prioritization","text":"<p>Multiple Variant Screening</p> <pre><code>I have a list of variants from whole genome sequencing. Can you use alphagenome_predictor to analyze these and identify which ones likely have the strongest regulatory effects:\n- chr3:178936091 G&gt;A\n- chr12:25398285 C&gt;T\n- chr19:11224301 G&gt;T\n</code></pre> <p>Regulatory Impact Ranking</p> <pre><code>Analyze these non-coding variants and rank them by predicted regulatory impact:\n1. chr5:1282543 C&gt;T (TERT promoter)\n2. chr8:128750412 A&gt;G (MYC enhancer)\n3. chr17:7571720 G&gt;A (TP53 promoter)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#splicing-analysis","title":"Splicing Analysis","text":"<p>Intronic Variants</p> <pre><code>Use AlphaGenome to predict if this intronic variant affects splicing: chr2:215593426 A&gt;G in the BARD1 gene\n</code></pre> <p>Splice Site Variants</p> <pre><code>Analyze these variants near splice sites for potential splicing alterations:\n- chr11:108198135 C&gt;T (ATM gene, +5 position)\n- chr13:32340700 G&gt;A (BRCA2 gene, -3 position)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#tissue-specific-analysis","title":"Tissue-Specific Analysis","text":"<p>Breast Tissue Analysis</p> <pre><code>Predict the effects of chr7:140753336 A&gt;T specifically in breast tissue (UBERON:0000310)\n</code></pre> <p>Liver-Specific Effects</p> <pre><code>Use alphagenome_predictor with liver tissue context (UBERON:0002107) for this variant: chr16:31356190 G&gt;A in the FTO gene\n</code></pre> <p>Multi-Tissue Comparison</p> <pre><code>Compare the effects of chr12:25398285 C&gt;T across:\n- Brain tissue (UBERON:0000955)\n- Liver tissue (UBERON:0002107)\n- Lung tissue (UBERON:0002048)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#clinical-research-workflows","title":"Clinical Research Workflows","text":""},{"location":"tutorials/alphagenome-prompts/#variant-of-uncertain-significance-vus-analysis","title":"Variant of Uncertain Significance (VUS) Analysis","text":"<p>Complete VUS Workup</p> <pre><code>I found a variant of uncertain significance in a cancer patient: chr9:21971076 C&gt;T in CDKN2A.\n1. First use variant_getter to see known annotations\n2. Then use alphagenome_predictor to assess potential regulatory impacts\n3. Search for articles about similar CDKN2A variants\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#pharmacogenomics","title":"Pharmacogenomics","text":"<p>Drug Metabolism Variants</p> <pre><code>Analyze how the CYP2D6 variant chr22:42130692 G&gt;A might affect drug metabolism gene expression using AlphaGenome\n</code></pre> <p>Warfarin Sensitivity</p> <pre><code>Predict the regulatory effects of VKORC1 variant chr16:31107689 G&gt;A on warfarin sensitivity\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#rare-disease-investigation","title":"Rare Disease Investigation","text":"<p>Mitochondrial Disease</p> <pre><code>This patient has a rare variant chr15:89859516 C&gt;T in the POLG gene. Use alphagenome_predictor to understand if it might affect mitochondrial DNA polymerase expression\n</code></pre> <p>Neurodevelopmental Disorders</p> <pre><code>Analyze this de novo variant in a child with developmental delay: chr2:166199235 C&gt;G in the SCN1A gene\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#comparative-analysis","title":"Comparative Analysis","text":""},{"location":"tutorials/alphagenome-prompts/#multiple-variant-comparison","title":"Multiple Variant Comparison","text":"<p>Gene-Wide Analysis</p> <pre><code>Compare the predicted regulatory effects of these three BRCA1 variants using AlphaGenome:\n- chr17:41245237 G&gt;A (promoter)\n- chr17:41244936 G&gt;A (5' UTR)\n- chr17:41243451 T&gt;C (intron 2)\n</code></pre> <p>Hotspot Comparison</p> <pre><code>I'm studying why some TP53 mutations are more severe than others. Use alphagenome_predictor to compare these hotspot mutations:\n- R175H (chr17:7675088 C&gt;T)\n- R248W (chr17:7674220 G&gt;A)\n- R273H (chr17:7673802 C&gt;T)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#allele-specific-analysis","title":"Allele-Specific Analysis","text":"<p>Alternative Alleles</p> <pre><code>This GWAS hit is at chr5:1280000. Use alphagenome_predictor to analyze all possible variants:\n- chr5:1280000 A&gt;G\n- chr5:1280000 A&gt;C\n- chr5:1280000 A&gt;T\nWhich alternate allele has the strongest predicted effect?\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#advanced-research-prompts","title":"Advanced Research Prompts","text":""},{"location":"tutorials/alphagenome-prompts/#long-range-regulatory-analysis","title":"Long-Range Regulatory Analysis","text":"<p>Extended Window Analysis</p> <pre><code>Use alphagenome_predictor with --interval 1048576 to analyze long-range regulatory effects of chr8:128750000 A&gt;G near the MYC oncogene\n</code></pre> <p>TAD Boundary Variants</p> <pre><code>Analyze this variant at a TAD boundary with maximum interval: chr3:186500000 C&gt;T (use 1Mb window)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#compound-heterozygote-analysis","title":"Compound Heterozygote Analysis","text":"<p>Trans Configuration</p> <pre><code>Analyze these two variants in trans in the same gene:\n- Maternal: chr11:47342697 C&gt;T (MYBPC3)\n- Paternal: chr11:47380142 G&gt;A (MYBPC3)\nWhat are their individual regulatory effects?\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#cancer-research","title":"Cancer Research","text":"<p>Driver vs Passenger</p> <pre><code>Help distinguish driver from passenger mutations. Analyze these variants from a tumor:\n1. chr7:140753336 A&gt;T (BRAF V600E)\n2. chr3:41266101 C&gt;T (CTNNB1 S33F)\n3. chr1:115256529 G&gt;A (NRAS Q61R)\nWhich show the strongest regulatory effects?\n</code></pre> <p>Tumor Suppressor Analysis</p> <pre><code>Analyze non-coding variants near tumor suppressors:\n- chr17:7565097 C&gt;T (TP53 promoter)\n- chr13:32316461 A&gt;G (BRCA2 promoter)\n- chr17:41196312 G&gt;C (BRCA1 promoter)\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#integration-with-other-biomcp-tools","title":"Integration with Other BioMCP Tools","text":""},{"location":"tutorials/alphagenome-prompts/#full-variant-characterization","title":"Full Variant Characterization","text":"<p>Literature + Prediction</p> <pre><code>1. Search for articles about KRAS G12D mutations using article_searcher\n2. Then use alphagenome_predictor to analyze chr12:25245350 C&gt;T\n3. Compare the literature findings with AlphaGenome predictions\n</code></pre> <p>Database + AI Analysis</p> <pre><code>1. Use variant_searcher to find pathogenic variants in the BRCA2 gene\n2. Pick the top 3 results\n3. Analyze each with alphagenome_predictor\n4. Which has the strongest predicted regulatory impact?\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#clinical-trial-context","title":"Clinical Trial Context","text":"<p>Treatment Target Analysis</p> <pre><code>1. Find clinical trials for BRAF V600E melanoma\n2. Use AlphaGenome to understand why this mutation (chr7:140753336 A&gt;T) is so impactful\n3. Does the regulatory effect explain the treatment response?\n</code></pre>"},{"location":"tutorials/alphagenome-prompts/#tips-for-effective-prompts","title":"Tips for Effective Prompts","text":""},{"location":"tutorials/alphagenome-prompts/#required-information","title":"Required Information","text":"<ul> <li>Chromosome: Use \"chr\" prefix (e.g., chr7, chrX)</li> <li>Position: 1-based coordinate from reference genome</li> <li>Reference allele: Current base(s) at that position</li> <li>Alternate allele: Changed base(s)</li> </ul>"},{"location":"tutorials/alphagenome-prompts/#optional-parameters","title":"Optional Parameters","text":"<ul> <li>Interval size: 2048, 16384, 131072, 524288, or 1048576</li> <li>Tissue type: UBERON ontology terms</li> <li>Multiple variants: Analyze in single prompt for comparison</li> </ul>"},{"location":"tutorials/alphagenome-prompts/#best-practices","title":"Best Practices","text":"<ol> <li>Be specific - Include exact coordinates</li> <li>Provide context - Mention gene names and known effects</li> <li>Ask for interpretation - Request specific insights</li> <li>Combine tools - Use multiple BioMCP tools for comprehensive analysis</li> <li>Consider mechanism - Ask about expression, splicing, or chromatin</li> </ol>"},{"location":"tutorials/alphagenome-prompts/#example-multi-step-workflow","title":"Example Multi-Step Workflow","text":"<pre><code>I'm investigating a patient with suspected hereditary cancer syndrome. They have these variants:\n\n1. First, check each variant in databases:\n   - Use variant_getter on chr17:41245237 G&gt;A\n   - Use variant_getter on chr13:32340700 G&gt;A\n   - Use variant_getter on chr11:108198135 C&gt;T\n\n2. Then predict regulatory effects:\n   - Use alphagenome_predictor on each variant\n   - Compare which has the strongest impact\n\n3. Search literature:\n   - Find articles about each affected gene\n   - Look for similar cases\n\n4. Summarize findings:\n   - Which variant is most likely pathogenic?\n   - What functional evidence supports this?\n</code></pre> <p>This structured approach combines AlphaGenome's predictive power with BioMCP's database access for comprehensive variant analysis.</p>"},{"location":"tutorials/alphagenome-setup/","title":"AlphaGenome Setup and Usage Guide","text":"<p>This guide covers how to set up and use Google DeepMind's AlphaGenome with BioMCP for advanced variant effect prediction.</p>"},{"location":"tutorials/alphagenome-setup/#overview","title":"Overview","text":"<p>AlphaGenome is a state-of-the-art AI model that predicts how genetic variants affect gene regulation. It analyzes variants in their genomic context to predict impacts on:</p> <ul> <li>Gene expression (RNA-seq)</li> <li>Chromatin accessibility (ATAC-seq, DNase-seq)</li> <li>Splicing patterns</li> <li>Promoter activity (CAGE)</li> <li>Transcription factor binding</li> <li>3D chromatin structure</li> </ul>"},{"location":"tutorials/alphagenome-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>BioMCP Installation: Ensure BioMCP is installed and working</li> <li>Python 3.10+: Required for AlphaGenome compatibility</li> <li>Git: For cloning the AlphaGenome repository</li> </ol>"},{"location":"tutorials/alphagenome-setup/#setup-instructions","title":"Setup Instructions","text":""},{"location":"tutorials/alphagenome-setup/#step-1-get-an-alphagenome-api-key","title":"Step 1: Get an AlphaGenome API Key","text":"<ol> <li>Visit Google DeepMind AlphaGenome</li> <li>Click \"Get Started\" or \"Request Access\"</li> <li>Fill out the registration form (free for non-commercial use)</li> <li>You'll receive an API key that looks like: <code>AIzaSy...</code></li> </ol>"},{"location":"tutorials/alphagenome-setup/#step-2-configure-the-api-key","title":"Step 2: Configure the API Key","text":"<p>You have three options for providing your API key:</p>"},{"location":"tutorials/alphagenome-setup/#option-a-per-request-recommended-for-ai-assistants","title":"Option A: Per-Request (Recommended for AI Assistants)","text":"<p>Include your API key directly in your request to the AI assistant:</p> <pre><code>\"Predict effects of BRAF V600E. My AlphaGenome API key is YOUR_KEY_HERE\"\n</code></pre> <p>See the API Key Handling Guide for detailed examples.</p>"},{"location":"tutorials/alphagenome-setup/#option-b-environment-variable-personal-use","title":"Option B: Environment Variable (Personal Use)","text":"<p>Set it in your shell profile (<code>~/.zshrc</code> or <code>~/.bashrc</code>):</p> <pre><code>export ALPHAGENOME_API_KEY='your-api-key-here'\n</code></pre>"},{"location":"tutorials/alphagenome-setup/#option-c-using-env-file-development","title":"Option C: Using .env file (Development)","text":"<ol> <li>Create a <code>.env</code> file in your BioMCP directory:</li> </ol> <pre><code>cd ~/code/biomcp  # or your BioMCP installation directory\necho 'ALPHAGENOME_API_KEY=your-api-key-here' &gt;&gt; .env\n</code></pre> <ol> <li>Replace <code>your-api-key-here</code> with your actual API key</li> </ol>"},{"location":"tutorials/alphagenome-setup/#option-c-claude-desktop-configuration","title":"Option C: Claude Desktop Configuration","text":"<p>Add to your Claude Desktop MCP settings:</p> <pre><code>\"biomcp\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"--directory\",\n    \"/path/to/biomcp\",\n    \"run\",\n    \"biomcp\",\n    \"run\"\n  ],\n  \"env\": {\n    \"ALPHAGENOME_API_KEY\": \"your-api-key-here\"\n  }\n}\n</code></pre>"},{"location":"tutorials/alphagenome-setup/#step-3-install-alphagenome","title":"Step 3: Install AlphaGenome","text":"<ol> <li>Clone the AlphaGenome repository:</li> </ol> <pre><code>cd ~/code  # or any directory you prefer\ngit clone https://github.com/google-deepmind/alphagenome.git\n</code></pre> <ol> <li>Install AlphaGenome in BioMCP's environment:</li> </ol> <pre><code>cd ~/code/biomcp  # Navigate to BioMCP directory\nuv pip install ~/code/alphagenome\n</code></pre> <ol> <li>Verify installation:    <pre><code>uv run python -c \"import alphagenome; print('AlphaGenome installed successfully')\"\n</code></pre></li> </ol>"},{"location":"tutorials/alphagenome-setup/#step-4-test-the-integration","title":"Step 4: Test the Integration","text":"<p>Test via CLI:</p> <pre><code>uv run biomcp variant predict chr7 140753336 A T\n</code></pre> <p>Expected output:</p> <pre><code>## AlphaGenome Variant Effect Predictions\n\n**Variant**: chr7:140753336 A&gt;T\n**Analysis window**: 131,072 bp\n\n### Gene Expression\n- **BRAF**: -0.85 log\u2082 fold change (\u2193 decreases expression)\n...\n</code></pre>"},{"location":"tutorials/alphagenome-setup/#usage-examples","title":"Usage Examples","text":""},{"location":"tutorials/alphagenome-setup/#basic-variant-analysis","title":"Basic Variant Analysis","text":"<pre><code># Analyze a known pathogenic variant (BRAF V600E)\nbiomcp variant predict chr7 140753336 A T\n\n# Analyze with larger genomic context (1Mb window)\nbiomcp variant predict chr7 140753336 A T --interval 1048576\n\n# Analyze with tissue-specific context\nbiomcp variant predict chr7 140753336 A T --tissue UBERON:0000310  # breast tissue\n\n# Analyze with custom significance threshold\nbiomcp variant predict chr7 140753336 A T --threshold 0.3\n</code></pre>"},{"location":"tutorials/alphagenome-setup/#using-in-claude-desktop","title":"Using in Claude Desktop","text":"<p>Once configured, you can use these prompts in Claude:</p>"},{"location":"tutorials/alphagenome-setup/#known-pathogenic-variants","title":"Known Pathogenic Variants","text":"<ul> <li>\"Use alphagenome_predictor to analyze the regulatory effects of the BRAF V600E mutation (chr7:140753336 A&gt;T)\"</li> <li>\"Predict how the TP53 R175H mutation (chr17:7675088 C&gt;T) affects gene expression and chromatin accessibility\"</li> <li>\"What are the predicted regulatory impacts of the EGFR T790M mutation (chr7:55181378 C&gt;T)?\"</li> </ul>"},{"location":"tutorials/alphagenome-setup/#non-coding-variant-analysis","title":"Non-coding Variant Analysis","text":"<ul> <li>\"Analyze this promoter variant using AlphaGenome: chr1:45797505 G&gt;A in the MUTYH gene promoter\"</li> <li>\"Use alphagenome_predictor to assess this enhancer variant: chr8:128748315 T&gt;C near the MYC gene\"</li> <li>\"Predict the regulatory effects of this 5' UTR variant: chr17:41244936 G&gt;A in BRCA1\"</li> </ul>"},{"location":"tutorials/alphagenome-setup/#splicing-analysis","title":"Splicing Analysis","text":"<ul> <li>\"Use AlphaGenome to predict if this intronic variant affects splicing: chr2:215593426 A&gt;G in the BARD1 gene\"</li> <li>\"Analyze these variants near splice sites for potential splicing alterations: chr11:108198135 C&gt;T (ATM)\"</li> </ul>"},{"location":"tutorials/alphagenome-setup/#research-workflows","title":"Research Workflows","text":"<ul> <li>\"I found a variant of uncertain significance: chr9:21971076 C&gt;T in CDKN2A. First use variant_getter to see known annotations, then use alphagenome_predictor to assess regulatory impacts\"</li> <li>\"Compare the predicted effects of these BRCA1 variants: chr17:41245237 G&gt;A vs chr17:41244936 G&gt;A\"</li> </ul>"},{"location":"tutorials/alphagenome-setup/#multi-variant-analysis","title":"Multi-variant Analysis","text":"<ul> <li>\"I have variants from whole genome sequencing. Analyze these for regulatory effects: chr3:178936091 G&gt;A, chr12:25398285 C&gt;T, chr19:11224301 G&gt;T\"</li> </ul>"},{"location":"tutorials/alphagenome-setup/#advanced-usage","title":"Advanced Usage","text":""},{"location":"tutorials/alphagenome-setup/#tissue-specific-predictions","title":"Tissue-Specific Predictions","text":"<p>AlphaGenome can provide tissue-specific predictions using UBERON ontology terms:</p> <pre><code># Common tissue codes:\n# UBERON:0000310 - breast\n# UBERON:0002107 - liver\n# UBERON:0002367 - prostate\n# UBERON:0000955 - brain\n# UBERON:0002048 - lung\n# UBERON:0001157 - colon\n\n# Example: Liver-specific analysis\nresult = await alphagenome_predictor(\n    chromosome=\"chr16\",\n    position=31356190,\n    reference=\"G\",\n    alternate=\"A\",\n    tissue_types=[\"UBERON:0002107\"]\n)\n</code></pre>"},{"location":"tutorials/alphagenome-setup/#interval-sizes","title":"Interval Sizes","text":"<p>AlphaGenome supports specific interval sizes:</p> <ul> <li>2,048 bp (2kb) - Very local effects</li> <li>16,384 bp (16kb) - Local regulatory elements</li> <li>131,072 bp (128kb) - Default, captures most regulatory elements</li> <li>524,288 bp (512kb) - Extended regulatory landscape</li> <li>1,048,576 bp (1Mb) - Long-range interactions</li> </ul> <p>Choose based on your hypothesis:</p> <ul> <li>Promoter variants: 16kb</li> <li>Enhancer variants: 128kb-512kb</li> <li>Long-range regulatory: 1Mb</li> </ul> <p>Note: If you request a size larger than 1Mb, the system automatically uses 1Mb. If you request a size between supported values, it rounds up to the next supported size.</p>"},{"location":"tutorials/alphagenome-setup/#interpreting-results","title":"Interpreting Results","text":"<p>Gene Expression (log\u2082 fold change):</p> <ul> <li>&gt; +1.0: Strong increase (2x or more)</li> <li>+0.5 to +1.0: Moderate increase</li> <li>-0.5 to +0.5: Minimal change</li> <li>-1.0 to -0.5: Moderate decrease</li> <li>&lt; -1.0: Strong decrease (2x or less)</li> </ul> <p>Chromatin Accessibility:</p> <ul> <li>Positive values: More open chromatin (increased accessibility)</li> <li>Negative values: More closed chromatin (decreased accessibility)</li> </ul> <p>Summary Statistics:</p> <ul> <li>Total tracks: Number of cell types/conditions analyzed</li> <li>Significant changes: Tracks with |log\u2082| &gt; 0.5 (default threshold)</li> <li>Custom threshold: You can adjust the significance threshold using the <code>--threshold</code> parameter</li> </ul>"},{"location":"tutorials/alphagenome-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/alphagenome-setup/#alphagenome-api-key-not-found","title":"\"AlphaGenome API key not found\"","text":"<ul> <li>Check your <code>.env</code> file exists and contains <code>ALPHAGENOME_API_KEY=your-key</code></li> <li>Ensure you're running commands from the BioMCP directory</li> <li>Try: <code>cat .env | grep ALPHAGENOME</code> to verify</li> </ul>"},{"location":"tutorials/alphagenome-setup/#alphagenome-not-installed","title":"\"AlphaGenome not installed\"","text":"<ul> <li>Make sure you installed AlphaGenome: <code>uv pip install ~/code/alphagenome</code></li> <li>Check installation: <code>uv pip list | grep alphagenome</code></li> </ul>"},{"location":"tutorials/alphagenome-setup/#sequence-length-x-not-supported","title":"\"Sequence length X not supported\"","text":"<ul> <li>Use one of the supported sizes: 2048, 16384, 131072, 524288, 1048576</li> <li>The tool automatically rounds up to the nearest supported size</li> </ul>"},{"location":"tutorials/alphagenome-setup/#protobuf-warnings","title":"Protobuf warnings","text":"<ul> <li>You may see warnings like \"Protobuf gencode version 5.27.2 is exactly one major version older...\"</li> <li>These warnings are harmless and don't affect functionality</li> <li>They occur because AlphaGenome's proto files were compiled with an older protobuf version</li> <li>To suppress in your own code:   <pre><code>import warnings\nwarnings.filterwarnings(\"ignore\", message=\"Protobuf gencode version.*is exactly one major version older\")\n</code></pre></li> </ul>"},{"location":"tutorials/alphagenome-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Start with default settings - The 128kb window captures most regulatory elements</li> <li>Use tissue context when relevant - Especially for tissue-specific diseases</li> <li>Combine with other tools - Use <code>variant_getter</code> first for known annotations</li> <li>Consider multiple variants - Analyze all variants in a gene for comprehensive view</li> <li>Document your findings - Save important predictions for future reference</li> <li>Validate inputs - Ensure chromosome format (chr1-22, chrX, chrY, chrM/chrMT) and valid nucleotides (A, C, G, T)</li> <li>Leverage caching - Results are cached for 30 minutes to improve performance for repeated queries</li> <li>Adjust thresholds - Use lower thresholds (e.g., 0.3) to detect subtle effects, higher (e.g., 1.0) for strong effects only</li> </ol>"},{"location":"tutorials/alphagenome-setup/#limitations","title":"Limitations","text":"<ul> <li>Human genome only (GRCh38/hg38)</li> <li>Requires exact genomic coordinates</li> <li>Cannot analyze structural variants or complex indels</li> <li>Predictions are computational and should be validated experimentally</li> <li>API rate limits may apply for high-volume usage</li> <li>Chromosome format must include 'chr' prefix (e.g., chr1, not 1)</li> <li>Only standard nucleotides supported (A, C, G, T) - no ambiguity codes</li> </ul>"},{"location":"tutorials/alphagenome-setup/#further-resources","title":"Further Resources","text":"<ul> <li>AlphaGenome Paper</li> <li>BioMCP Variant Documentation</li> <li>UBERON Tissue Ontology</li> </ul>"},{"location":"tutorials/bigquery_logging/","title":"BigQuery Logging for BioMCP","text":"<p>This document outlines how BioMCP uses Google BigQuery for logging user interactions and API usage.</p>"},{"location":"tutorials/bigquery_logging/#overview","title":"Overview","text":"<p>BioMCP integrates with Google BigQuery to log user interactions, queries, and API usage. This logging provides valuable insights into how the system is being used, helps with debugging, and enables analytics for improving the service.</p>"},{"location":"tutorials/bigquery_logging/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Google Cloud Platform (GCP) account</li> <li>A BigQuery dataset and table created in your GCP project</li> <li>A GCP service account with BigQuery permissions</li> </ul>"},{"location":"tutorials/bigquery_logging/#setting-up-bigquery-for-biomcp","title":"Setting Up BigQuery for BioMCP","text":"<ol> <li> <p>Create a BigQuery Dataset and Table</p> </li> <li> <p>In the Google Cloud Console, navigate to BigQuery</p> </li> <li>Create a new dataset (e.g., <code>biomcp_logs</code>)</li> <li>Create a table within the dataset (e.g., <code>worker_logs</code>) with the following schema:      <pre><code>timestamp: TIMESTAMP\nuserEmail: STRING\nquery: STRING\n</code></pre></li> <li> <p>Adjust the schema as needed for your specific logging requirements</p> </li> <li> <p>Create a Service Account</p> </li> <li> <p>Navigate to \"IAM &amp; Admin\" &gt; \"Service Accounts\" in the Google Cloud Console</p> </li> <li>Create a new service account with a descriptive name (e.g., <code>biomcp-bigquery-logger</code>)</li> <li>Assign the \"BigQuery Data Editor\" role to the service account</li> <li> <p>Create and download a JSON key for the service account</p> </li> <li> <p>Configure BioMCP with BigQuery Credentials</p> </li> <li> <p>Open <code>wrangler.toml</code> in the BioMCP project</p> </li> <li>Update the following variables with your BigQuery information:      <pre><code>BQ_PROJECT_ID = \"your-gcp-project-id\"\nBQ_DATASET = \"biomcp_logs\"\nBQ_TABLE = \"worker_logs\"\n</code></pre></li> <li>For the service account key, use Cloudflare's secret management:      <pre><code>npx wrangler secret put BQ_SA_KEY_JSON\n</code></pre>      When prompted, paste the entire JSON content of your service account key file</li> </ol>"},{"location":"tutorials/bigquery_logging/#how-bigquery-logging-works","title":"How BigQuery Logging Works","text":"<p>The BioMCP worker uses the following process to log data to BigQuery:</p> <ol> <li>Authentication: The worker generates a JWT token using the service account credentials</li> <li>Token Exchange: The JWT is exchanged for a Google OAuth access token</li> <li>Data Insertion: The worker uses BigQuery's streaming insert API to log events</li> </ol> <p>The implementation includes:</p> <ul> <li>Token caching to minimize authentication requests</li> <li>Error handling for failed logging attempts</li> <li>Automatic retry logic for transient failures</li> </ul>"},{"location":"tutorials/bigquery_logging/#logged-information","title":"Logged Information","text":"<p>By default, the following information is logged to BigQuery:</p> <ul> <li>timestamp: When the event occurred</li> <li>userEmail: The email address of the authenticated user (if available)</li> <li>query: The query or request that was made</li> </ul> <p>You can extend the logging schema to include additional information as needed.</p>"},{"location":"tutorials/bigquery_logging/#accessing-and-analyzing-logs","title":"Accessing and Analyzing Logs","text":"<p>To access and analyze the logs:</p> <ol> <li> <p>Query the BigQuery Table</p> </li> <li> <p>Use the BigQuery console or SQL to query your logs</p> </li> <li> <p>Example query to see recent logs:      <pre><code>SELECT timestamp, userEmail, query\nFROM `your-project.biomcp_logs.worker_logs`\nORDER BY timestamp DESC\nLIMIT 100\n</code></pre></p> </li> <li> <p>Create Visualizations</p> </li> <li> <p>Use Google Data Studio to create dashboards based on your BigQuery data</p> </li> <li>Connect Data Studio to your BigQuery table and create visualizations</li> </ol>"},{"location":"tutorials/bigquery_logging/#security-considerations","title":"Security Considerations","text":"<ul> <li>The service account key is sensitive information and should be protected</li> <li>Use Cloudflare's secret management to store the key securely</li> <li>Consider implementing field-level encryption for sensitive data</li> <li>Implement data retention policies to comply with privacy regulations</li> <li>IMPORTANT: Never include PHI (Protected Health Information) or PII (Personally Identifiable Information) in queries or logs</li> <li>Ensure all queries are sanitized to remove patient identifiers, medical record numbers, and other sensitive information</li> <li>Consider implementing automatic redaction of potential PHI/PII from logs</li> <li>Regularly audit logs to ensure compliance with HIPAA and other privacy regulations</li> <li>Remember that BigQuery logs are not designed for storing protected health information</li> </ul>"},{"location":"tutorials/bigquery_logging/#automatic-sanitization","title":"Automatic Sanitization","text":"<p>BioMCP automatically sanitizes sensitive data before logging to BigQuery:</p> <ul> <li>API Keys and Secrets: Fields containing <code>api_key</code>, <code>apiKey</code>, <code>api-key</code>, <code>token</code>, <code>secret</code>, or <code>password</code> are automatically redacted</li> <li>Nested Objects: Sanitization works recursively through nested objects and arrays</li> <li>Case-Insensitive: Field name matching is case-insensitive to catch variations</li> <li>Preserved Structure: The original request structure is maintained with sensitive values replaced by <code>[REDACTED]</code></li> </ul> <p>Example of sanitization:</p> <pre><code>// Original request\n{\n  \"params\": {\n    \"arguments\": {\n      \"api_key\": \"AIzaSyB1234567890\",\n      \"gene\": \"BRAF\"\n    }\n  }\n}\n\n// Sanitized for BigQuery\n{\n  \"params\": {\n    \"arguments\": {\n      \"api_key\": \"[REDACTED]\",\n      \"gene\": \"BRAF\"\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/bigquery_logging/#excluded-queries","title":"Excluded Queries","text":"<p>Certain types of queries are automatically excluded from BigQuery logging:</p> <ul> <li>Think Tool Calls: Any calls to the <code>think</code> tool are not logged</li> <li>Thinking Domain: Queries with <code>domain=\"thinking\"</code> or <code>domain=\"think\"</code> are excluded</li> <li>Privacy-First Design: This ensures that internal reasoning and analysis steps remain private</li> </ul>"},{"location":"tutorials/bigquery_logging/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Authentication Failures: Verify that the service account key is correctly formatted and has the necessary permissions</li> <li>Insertion Errors: Check that the BigQuery table schema matches the data being inserted</li> <li>Missing Logs: Ensure that the worker has network access to the BigQuery API</li> </ul>"},{"location":"tutorials/bigquery_logging/#example-code","title":"Example Code","text":"<p>The worker includes the following key functions for BigQuery logging:</p> <ul> <li><code>getBQToken()</code>: Fetches and caches a BigQuery OAuth token</li> <li><code>insertEvent()</code>: Inserts a single row into BigQuery via streaming insert</li> <li><code>sanitizeObject()</code>: Recursively sanitizes sensitive fields from objects before logging</li> </ul> <p>These functions handle the authentication and data insertion process automatically.</p>"},{"location":"tutorials/bigquery_logging/#testing","title":"Testing","text":"<p>BioMCP includes comprehensive tests for the BigQuery logging functionality:</p>"},{"location":"tutorials/bigquery_logging/#javascript-tests","title":"JavaScript Tests","text":"<p>The sanitization logic is tested using Node.js built-in test framework:</p> <pre><code># Run JavaScript worker tests\nmake test-js\n\n# Or run directly\nnode --test tests/tdd/workers/test_worker_sanitization.js\n</code></pre> <p>Tests cover:</p> <ul> <li>API key redaction</li> <li>Nested sensitive field handling</li> <li>Array sanitization</li> <li>Case-insensitive field matching</li> <li>Think tool detection</li> <li>Domain-based filtering</li> </ul>"},{"location":"tutorials/biothings-prompts/","title":"BioThings Integration Example Prompts","text":"<p>This guide provides example prompts for AI assistants to effectively use the BioThings suite integration in BioMCP.</p>"},{"location":"tutorials/biothings-prompts/#overview-of-biothings-suite","title":"Overview of BioThings Suite","text":"<p>BioMCP integrates with the complete BioThings suite of APIs:</p> <ul> <li>MyGene.info - Gene information and annotations</li> <li>MyDisease.info - Disease ontology and synonyms</li> <li>MyVariant.info - Genetic variant annotations (pre-existing integration, enhanced with BioThings client)</li> <li>MyChem.info - Drug/chemical information and annotations</li> </ul> <p>All four services share common infrastructure through the BioThings client module, providing consistent error handling, rate limiting, and response parsing.</p>"},{"location":"tutorials/biothings-prompts/#gene-information-retrieval","title":"Gene Information Retrieval","text":""},{"location":"tutorials/biothings-prompts/#basic-gene-lookup","title":"Basic Gene Lookup","text":"<pre><code>\"What is the TP53 gene?\"\n\"Tell me about BRAF\"\n\"Get information on the EGFR gene\"\n\"What does the BRCA1 gene do?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"TP53\")</code> \u2192 Returns official name, summary, aliases</p>"},{"location":"tutorials/biothings-prompts/#gene-by-id","title":"Gene by ID","text":"<pre><code>\"Look up gene with Entrez ID 7157\"\n\"What is gene 673?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"7157\")</code> \u2192 Returns TP53 information</p>"},{"location":"tutorials/biothings-prompts/#gene-context-for-research","title":"Gene Context for Research","text":"<pre><code>\"I need to understand the KRAS gene before searching for mutations\"\n\"What type of protein does BRAF encode?\"\n\"Give me the official name and aliases for MYC\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#disease-information-retrieval","title":"Disease Information Retrieval","text":""},{"location":"tutorials/biothings-prompts/#basic-disease-lookup","title":"Basic Disease Lookup","text":"<pre><code>\"What is GIST?\"\n\"Tell me about melanoma\"\n\"Define non-small cell lung cancer\"\n\"What is Erdheim-Chester disease?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"GIST\")</code> \u2192 Returns definition, synonyms, ontology IDs</p>"},{"location":"tutorials/biothings-prompts/#disease-by-ontology-id","title":"Disease by Ontology ID","text":"<pre><code>\"Look up disease MONDO:0018076\"\n\"What is DOID:1909?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"MONDO:0018076\")</code> \u2192 Returns disease information</p>"},{"location":"tutorials/biothings-prompts/#disease-synonyms-for-research","title":"Disease Synonyms for Research","text":"<pre><code>\"What are all the names for gastrointestinal stromal tumor?\"\n\"Find synonyms for NSCLC\"\n\"What other terms are used for melanoma?\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#variant-information-retrieval-myvariantinfo","title":"Variant Information Retrieval (MyVariant.info)","text":"<p>MyVariant.info is part of the BioThings suite and provides comprehensive variant annotations. BioMCP has extensive integration with specialized features:</p>"},{"location":"tutorials/biothings-prompts/#basic-variant-lookup","title":"Basic Variant Lookup","text":"<pre><code>\"Get information about rs7412\"\n\"What is the BRAF V600E variant?\"\n\"Look up variant chr7:140453136-140453136\"\n</code></pre> <p>Expected tool usage: <code>variant_getter(\"rs7412\")</code> \u2192 Returns variant annotations with external database links</p>"},{"location":"tutorials/biothings-prompts/#variant-search-with-filters","title":"Variant Search with Filters","text":"<pre><code>\"Find pathogenic variants in TP53\"\n\"Search for BRCA1 variants with high impact\"\n\"Get all loss-of-function variants in KRAS\"\n</code></pre> <p>Expected tool usage: <code>variant_searcher(gene=\"TP53\", significance=\"pathogenic\")</code> \u2192 Returns filtered variant list</p>"},{"location":"tutorials/biothings-prompts/#variant-with-cancer-context","title":"Variant with Cancer Context","text":"<pre><code>\"What cancer types have BRAF V600E mutations?\"\n\"Get TCGA data for TP53 R273H\"\n</code></pre> <p>Expected tool usage: Variant tools automatically integrate cBioPortal, TCGA, and 1000 Genomes data when available</p>"},{"location":"tutorials/biothings-prompts/#drug-information-retrieval-mycheminfo","title":"Drug Information Retrieval (MyChem.info)","text":"<p>MyChem.info is part of the BioThings suite and provides comprehensive drug/chemical information.</p>"},{"location":"tutorials/biothings-prompts/#basic-drug-lookup","title":"Basic Drug Lookup","text":"<pre><code>\"What is imatinib?\"\n\"Tell me about aspirin\"\n\"Get information on pembrolizumab\"\n\"What does metformin do?\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"imatinib\")</code> \u2192 Returns drug information with database links</p>"},{"location":"tutorials/biothings-prompts/#drug-by-id","title":"Drug by ID","text":"<pre><code>\"Look up DrugBank ID DB00619\"\n\"What is CHEMBL941?\"\n\"Get details for PubChem CID 5291\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"DB00619\")</code> \u2192 Returns drug details by identifier</p>"},{"location":"tutorials/biothings-prompts/#drug-properties-and-mechanism","title":"Drug Properties and Mechanism","text":"<pre><code>\"What is the mechanism of action of imatinib?\"\n\"Find the chemical formula for aspirin\"\n\"What are the trade names for adalimumab?\"\n\"How does pembrolizumab work?\"\n</code></pre> <p>Expected tool usage: <code>drug_getter(\"pembrolizumab\")</code> \u2192 Returns mechanism, indications, and properties</p>"},{"location":"tutorials/biothings-prompts/#integrated-research-workflows","title":"Integrated Research Workflows","text":""},{"location":"tutorials/biothings-prompts/#variant-analysis-with-gene-context","title":"Variant Analysis with Gene Context","text":"<pre><code>\"Analyze the BRAF V600E mutation - first tell me about the gene, then find pathogenic variants\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Analyzing BRAF V600E mutation\", thoughtNumber=1)</code></li> <li><code>gene_getter(\"BRAF\")</code> \u2192 Gene context</li> <li><code>variant_searcher(gene=\"BRAF\", hgvsp=\"V600E\", significance=\"pathogenic\")</code> \u2192 Variant details</li> </ol>"},{"location":"tutorials/biothings-prompts/#clinical-trial-search-with-disease-expansion","title":"Clinical Trial Search with Disease Expansion","text":"<pre><code>\"Find clinical trials for GIST patients\"\n\"Search for trials treating gastrointestinal stromal tumors\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>trial_searcher(conditions=[\"GIST\"], expand_synonyms=True)</code></li> <li>Automatically searches for: GIST OR \"gastrointestinal stromal tumor\" OR \"GI stromal tumor\"</li> </ul>"},{"location":"tutorials/biothings-prompts/#comprehensive-gene-disease-research","title":"Comprehensive Gene-Disease Research","text":"<pre><code>\"I'm researching EGFR mutations in lung cancer. Start with the gene, then the disease, then find relevant trials\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Researching EGFR in lung cancer\", thoughtNumber=1)</code></li> <li><code>gene_getter(\"EGFR\")</code> \u2192 Gene information</li> <li><code>disease_getter(\"lung cancer\")</code> \u2192 Disease context and synonyms</li> <li><code>trial_searcher(conditions=[\"lung cancer\"], interventions=[\"EGFR inhibitor\"])</code> \u2192 Trials with synonym expansion</li> </ol>"},{"location":"tutorials/biothings-prompts/#multi-gene-analysis","title":"Multi-Gene Analysis","text":"<pre><code>\"Compare TP53, BRAF, and KRAS genes\"\n\"Tell me about the RAS family genes: KRAS, NRAS, HRAS\"\n</code></pre> <p>Expected tool usage: Multiple <code>gene_getter()</code> calls for each gene</p>"},{"location":"tutorials/biothings-prompts/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"tutorials/biothings-prompts/#gene-alias-resolution","title":"Gene Alias Resolution","text":"<pre><code>\"What is the official name for the p53 gene?\"\n\"Is TRP53 the same as TP53?\"\n</code></pre> <p>Expected tool usage: <code>gene_getter(\"p53\")</code> \u2192 Will resolve to TP53</p>"},{"location":"tutorials/biothings-prompts/#disease-name-disambiguation","title":"Disease Name Disambiguation","text":"<pre><code>\"Is GIST the same as gastrointestinal stromal tumor?\"\n\"What's the MONDO ID for melanoma?\"\n</code></pre> <p>Expected tool usage: <code>disease_getter(\"GIST\")</code> \u2192 Shows all synonyms and IDs</p>"},{"location":"tutorials/biothings-prompts/#trial-search-without-synonym-expansion","title":"Trial Search Without Synonym Expansion","text":"<pre><code>\"Find trials specifically mentioning 'GIST' not other names\"\n</code></pre> <p>Expected tool usage: <code>trial_searcher(conditions=[\"GIST\"], expand_synonyms=False)</code></p>"},{"location":"tutorials/biothings-prompts/#integrated-literature-and-gene-search","title":"Integrated Literature and Gene Search","text":"<pre><code>\"Find recent papers about TP53 mutations - first tell me about the gene\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>gene_getter(\"TP53\")</code> \u2192 Gene context</li> <li><code>article_searcher(genes=[\"TP53\"], keywords=[\"mutation\"])</code> \u2192 Literature</li> </ol>"},{"location":"tutorials/biothings-prompts/#drug-target-research","title":"Drug-Target Research","text":"<pre><code>\"I'm researching imatinib for CML treatment. Get drug info, then find trials\"\n\"What targets does pembrolizumab hit? Then find related articles\"\n</code></pre> <p>Expected tool sequence:</p> <ol> <li><code>think(thought=\"Researching imatinib for CML\", thoughtNumber=1)</code></li> <li><code>drug_getter(\"imatinib\")</code> \u2192 Drug information and mechanism</li> <li><code>trial_searcher(interventions=[\"imatinib\"], conditions=[\"chronic myeloid leukemia\"])</code></li> </ol>"},{"location":"tutorials/biothings-prompts/#tips-for-ai-assistants","title":"Tips for AI Assistants","text":"<ol> <li>Always use think() first for complex biomedical queries</li> <li>Gene context helps interpretation: Get gene info before analyzing variants</li> <li>Disease synonyms improve search: Use expand_synonyms=True (default) for comprehensive results</li> <li>Drug mechanisms matter: Get drug info before searching trials to understand targets</li> <li>Real-time data: All BioThings data is fetched live, ensuring current information</li> <li>Combine tools: Gene + disease + variant + drug tools work together for comprehensive analysis</li> </ol>"},{"location":"tutorials/biothings-prompts/#common-patterns","title":"Common Patterns","text":""},{"location":"tutorials/biothings-prompts/#pattern-1-gene-variant-clinical-impact","title":"Pattern 1: Gene \u2192 Variant \u2192 Clinical Impact","text":"<pre><code>gene_getter(\"BRAF\") \u2192\nvariant_searcher(gene=\"BRAF\", significance=\"pathogenic\") \u2192\narticle_searcher(genes=[\"BRAF\"], diseases=[\"melanoma\"])\n</code></pre>"},{"location":"tutorials/biothings-prompts/#pattern-2-disease-trials-locations","title":"Pattern 2: Disease \u2192 Trials \u2192 Locations","text":"<pre><code>disease_getter(\"NSCLC\") \u2192\ntrial_searcher(conditions=[\"NSCLC\"], expand_synonyms=True) \u2192\ntrial_locations_getter(nct_id=\"NCT...\")\n</code></pre>"},{"location":"tutorials/biothings-prompts/#pattern-3-multi-gene-pathway-analysis","title":"Pattern 3: Multi-Gene Pathway Analysis","text":"<pre><code>gene_getter(\"EGFR\") \u2192\ngene_getter(\"KRAS\") \u2192\ngene_getter(\"BRAF\") \u2192\narticle_searcher(genes=[\"EGFR\", \"KRAS\", \"BRAF\"], keywords=[\"pathway\"])\n</code></pre>"},{"location":"tutorials/biothings-prompts/#unified-search-with-biothings-domains","title":"Unified Search with BioThings Domains","text":"<p>BioMCP's unified search now supports gene, drug, and disease domains alongside articles, trials, and variants:</p>"},{"location":"tutorials/biothings-prompts/#domain-specific-search","title":"Domain-Specific Search","text":"<pre><code>\"Search for BRAF in the gene domain\"\n\"Find imatinib in drugs\"\n\"Look up melanoma in diseases\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>search(domain=\"gene\", keywords=[\"BRAF\"])</code></li> <li><code>search(domain=\"drug\", keywords=[\"imatinib\"])</code></li> <li><code>search(domain=\"disease\", keywords=[\"melanoma\"])</code></li> </ul>"},{"location":"tutorials/biothings-prompts/#unified-query-language-with-biothings","title":"Unified Query Language with BioThings","text":"<pre><code>\"genes.symbol:BRAF AND genes.type:protein-coding\"\n\"drugs.tradename:gleevec\"\n\"diseases.name:melanoma OR diseases.synonym:malignant melanoma\"\n</code></pre> <p>Expected tool usage: Query parser automatically routes to appropriate domains</p>"},{"location":"tutorials/biothings-prompts/#cross-domain-gene-searches","title":"Cross-Domain Gene Searches","text":"<pre><code>\"gene:BRAF\"  # Searches articles, variants, genes, and trials\n\"Search everything about TP53\"\n</code></pre> <p>Expected behavior:</p> <ul> <li>Gene queries trigger searches across multiple domains</li> <li>Results include gene info, variants, articles, and related trials</li> </ul>"},{"location":"tutorials/biothings-prompts/#cross-domain-disease-searches","title":"Cross-Domain Disease Searches","text":"<pre><code>\"disease:melanoma\"  # Searches articles, trials, and diseases\n\"Find all information about NSCLC\"\n</code></pre> <p>Expected behavior:</p> <ul> <li>Disease queries search articles, trials, and disease databases</li> <li>Disease synonyms are automatically expanded in trial searches</li> </ul>"},{"location":"tutorials/biothings-prompts/#combined-domain-queries","title":"Combined Domain Queries","text":"<pre><code>\"gene:BRAF AND disease:melanoma\"\n\"drugs.indication:leukemia AND trials.phase:3\"\n\"genes.symbol:EGFR AND articles.year:&gt;2023\"\n</code></pre>"},{"location":"tutorials/biothings-prompts/#unified-fetch","title":"Unified Fetch","text":"<pre><code>\"Fetch BRAF from gene domain\"\n\"Get imatinib details from drugs\"\n\"Retrieve melanoma information from diseases\"\n</code></pre> <p>Expected tool usage:</p> <ul> <li><code>fetch(id=\"BRAF\", domain=\"gene\")</code></li> <li><code>fetch(id=\"imatinib\", domain=\"drug\")</code></li> <li><code>fetch(id=\"melanoma\", domain=\"disease\")</code></li> </ul>"},{"location":"tutorials/biothings-prompts/#error-handling","title":"Error Handling","text":"<p>If a gene/disease is not found:</p> <ul> <li>Check for typos or alternative names</li> <li>Try searching with partial names</li> <li>Use official symbols for genes (e.g., \"TP53\" not \"p53 gene\")</li> <li>For diseases, try both common and medical names</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/","title":"Using Claude Code with BioMCP for AlphaGenome Variant Analysis","text":"<p>This tutorial demonstrates how to use Claude Code with BioMCP to analyze genetic variants using Google DeepMind's AlphaGenome. We'll explore both the MCP server integration and CLI approaches, showing how Claude Code can seamlessly work with both interfaces.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Code: Latest version with MCP support</li> <li>Python 3.11+: Required for BioMCP and AlphaGenome</li> <li>uv: Modern Python package manager (installation guide)</li> <li>AlphaGenome API Key: Get free access at Google DeepMind AlphaGenome</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#setup-overview","title":"Setup Overview","text":"<p>BioMCP offers two interfaces that work perfectly with Claude Code:</p> <ol> <li>MCP Server: Integrated directly into Claude Code for seamless workflows</li> <li>CLI: Command-line interface for direct terminal access</li> </ol> <p>Both produce identical results, giving you flexibility in how you work.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-1-mcp-server-setup","title":"Part 1: MCP Server Setup","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-1-install-biomcp-cli","title":"Step 1: Install BioMCP CLI","text":"<pre><code># Install BioMCP CLI globally (note: biomcp-python, not biomcp!)\nuv tool install -q biomcp-python\n\n# Verify installation\nbiomcp --version\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-2-configure-mcp-server","title":"Step 2: Configure MCP Server","text":"<p>Add BioMCP to your Claude Code MCP configuration:</p> <pre><code># Basic setup (requires ALPHAGENOME_API_KEY environment variable)\nclaude mcp add biomcp -- uv run --with biomcp-python biomcp run\n\n# Or with API key in configuration\nclaude mcp add biomcp -e ALPHAGENOME_API_KEY=your-api-key-here -- uv run --with biomcp-python biomcp run\n</code></pre> <p>Verify the setup:</p> <pre><code>claude mcp list\nclaude mcp get biomcp\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-3-set-environment-variable","title":"Step 3: Set Environment Variable","text":"<pre><code># Add to your shell profile (~/.zshrc or ~/.bashrc)\nexport ALPHAGENOME_API_KEY='your-api-key-here'\n\n# Or set per-session\nexport ALPHAGENOME_API_KEY='your-api-key-here'\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#step-4-install-alphagenome","title":"Step 4: Install AlphaGenome","text":"<pre><code># Clone and install AlphaGenome\ngit clone https://github.com/google-deepmind/alphagenome.git\ncd alphagenome &amp;&amp; uv pip install .\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-2-testing-with-claude-code","title":"Part 2: Testing with Claude Code","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#example-dlg1-exon-skipping-variant","title":"Example: DLG1 Exon Skipping Variant","text":"<p>Let's analyze the variant <code>chr3:197081044:TACTC&gt;T</code> from the AlphaGenome paper, which demonstrates exon skipping in the DLG1 gene.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#using-mcp-server-recommended","title":"Using MCP Server (Recommended)","text":"<pre><code># Claude Code automatically uses MCP when available\nmcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr3\",\n    position=197081044,\n    reference=\"TACTC\",\n    alternate=\"T\"\n)\n</code></pre> <p>Result:</p> <pre><code>## AlphaGenome Variant Effect Predictions\n\n**Variant**: chr3:197081044 TACTC&gt;T\n**Analysis window**: 131,072 bp\n\n### Gene Expression\n\n- **MELTF**: +2.57 log\u2082 fold change (\u2191 increases expression)\n\n### Chromatin Accessibility\n\n- **EFO:0005719 DNase-seq**: +17.27 log\u2082 change (\u2191 increases accessibility)\n\n### Splicing\n\n- Potential splicing alterations detected\n\n### Summary\n\n- Analyzed 11796 regulatory tracks\n- 6045 tracks show substantial changes (|log\u2082| &gt; 0.5)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#using-cli-interface","title":"Using CLI Interface","text":"<pre><code># Same analysis via CLI\nexport ALPHAGENOME_API_KEY='your-api-key-here'\nuv run biomcp variant predict chr3 197081044 TACTC T\n</code></pre> <p>Result: Identical output to MCP server.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-3-why-both-interfaces-matter","title":"Part 3: Why Both Interfaces Matter","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#mcp-server-advantages","title":"MCP Server Advantages \ud83d\udd0c","text":"<ul> <li>Persistent State: No need to re-export environment variables</li> <li>Workflow Integration: Seamless chaining with other biomedical tools</li> <li>Structured Data: Direct programmatic access to results</li> <li>Auto-Documentation: Built-in parameter validation</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#cli-advantages","title":"CLI Advantages \ud83d\udcbb","text":"<ul> <li>Immediate Access: No server setup required</li> <li>Debugging: Direct command-line testing</li> <li>Scripting: Easy integration into bash scripts</li> <li>Standalone Use: Works without Claude Code</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#claude-code-perspective","title":"Claude Code Perspective","text":"<p>As Claude Code, both interfaces work equally well. The MCP approach provides slight benefits:</p> <ul> <li>Results persist across conversation turns</li> <li>Built-in error handling and validation</li> <li>Automatic integration with thinking and search workflows</li> <li>No need to manage environment variables per session</li> </ul> <p>Trade-off: MCP requires initial setup, while CLI is immediately available.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-4-advanced-usage-examples","title":"Part 4: Advanced Usage Examples","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#multi-variant-analysis","title":"Multi-Variant Analysis","text":"<pre><code># Analyze multiple variants from AlphaGenome paper\nvariants = [\n    (\"chr3\", 197081044, \"TACTC\", \"T\"),      # DLG1 exon skipping\n    (\"chr21\", 46126238, \"G\", \"C\"),          # COL6A2 splice junction\n    (\"chr16\", 173694, \"A\", \"G\")             # HBA2 polyadenylation\n]\n\nfor chr, pos, ref, alt in variants:\n    result = mcp__biomcp__alphagenome_predictor(\n        chromosome=chr,\n        position=pos,\n        reference=ref,\n        alternate=alt\n    )\n    print(f\"Most affected gene: {result}\")\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#tissue-specific-analysis","title":"Tissue-Specific Analysis","text":"<pre><code># Analyze with tissue context\nmcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\",\n    tissue_types=[\"UBERON:0000310\"]  # breast tissue\n)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#combined-biomcp-workflow","title":"Combined BioMCP Workflow","text":"<pre><code># 1. First, search for known annotations\nvariant_data = mcp__biomcp__variant_searcher(gene=\"BRAF\")\n\n# 2. Then predict regulatory effects\nregulatory_effects = mcp__biomcp__alphagenome_predictor(\n    chromosome=\"chr7\",\n    position=140753336,\n    reference=\"A\",\n    alternate=\"T\"\n)\n\n# 3. Search literature for context\nliterature = mcp__biomcp__article_searcher(\n    genes=[\"BRAF\"],\n    variants=[\"V600E\"]\n)\n</code></pre>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-5-validation-and-quality-assurance","title":"Part 5: Validation and Quality Assurance","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#how-we-validated-the-integration","title":"How We Validated the Integration","text":"<ol> <li>Raw API Testing: Directly tested Google's AlphaGenome API</li> <li>Source Code Analysis: Verified BioMCP uses correct API methods (<code>score_variant</code> + <code>get_recommended_scorers</code>)</li> <li>Cross-Validation: Confirmed identical results across all three approaches:</li> <li>Raw Python API: MELTF +2.57 log\u2082</li> <li>BioMCP CLI: MELTF +2.57 log\u2082</li> <li>BioMCP MCP: MELTF +2.57 log\u2082</li> </ol>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#key-scientific-finding","title":"Key Scientific Finding","text":"<p>The variant <code>chr3:197081044:TACTC&gt;T</code> most strongly affects MELTF (+2.57 log\u2082 fold change), not DLG1 as initially expected. This demonstrates that AlphaGenome considers the full regulatory landscape, not just the nearest gene.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#part-6-best-practices","title":"Part 6: Best Practices","text":""},{"location":"tutorials/claude-code-biomcp-alphagenome/#for-mcp-usage","title":"For MCP Usage","text":"<ul> <li>Use structured thinking with <code>mcp__biomcp__think</code> for complex analyses</li> <li>Leverage <code>call_benefit</code> parameter to improve result quality</li> <li>Chain multiple tools for comprehensive variant characterization</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#for-cli-usage","title":"For CLI Usage","text":"<ul> <li>Set <code>ALPHAGENOME_API_KEY</code> in your shell profile</li> <li>Use <code>--help</code> to explore all available parameters</li> <li>Combine with other CLI tools via pipes and scripts</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#general-tips","title":"General Tips","text":"<ul> <li>Start with default 131kb analysis window</li> <li>Use tissue-specific analysis when relevant</li> <li>Validate surprising results with literature search</li> <li>Consider both gene expression and chromatin accessibility effects</li> </ul>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#conclusion","title":"Conclusion","text":"<p>BioMCP's dual interface approach (MCP + CLI) provides robust variant analysis capabilities. Claude Code works seamlessly with both, offering flexibility for different workflows. The MCP integration provides slight advantages for interactive analysis, while the CLI excels for scripting and debugging.</p> <p>The combination of AlphaGenome's predictive power with BioMCP's comprehensive biomedical data access creates a powerful platform for genetic variant analysis and interpretation.</p>"},{"location":"tutorials/claude-code-biomcp-alphagenome/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>AlphaGenome Paper</li> <li>Claude Code MCP Guide</li> <li>uv Documentation</li> </ul>"},{"location":"tutorials/claude-desktop/","title":"BioMCP with Claude Desktop: Step-by-Step Tutorial","text":"<p>This tutorial will guide you through setting up BioMCP as a Model Context Protocol (MCP) server for Claude Desktop, allowing Claude to access specialized biomedical data.</p>"},{"location":"tutorials/claude-desktop/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop: Download from Anthropic</li> <li>Python: 3.11 or newer</li> <li>uv: Installation</li> </ul> <p>Verify the uv installation on the command line:</p> <pre><code>uv --version\n</code></pre> <p>Make sure it is installed globally for Claude to access. For instance, on MacOS, we recommend installing <code>uv</code> using Homebrew:</p> <pre><code>% which uv\n/opt/homebrew/bin/uv\n</code></pre>"},{"location":"tutorials/claude-desktop/#configure-claude-desktop","title":"Configure Claude Desktop","text":"<p>Open Claude Desktop and access the Settings &gt; Developer section.</p> <p>Then click \"Edit Config\" which on MacOS opens up the folder containing this file:</p> <pre><code>claude_desktop_config.json\n</code></pre> <p>Edit the file like this using your favorite text editor:</p> <pre><code>{\n  \"biomcp\": {\n    \"command\": \"uv\",\n    \"args\": [\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n  }\n}\n</code></pre> <p>Note: BioMCP now includes built-in sequential thinking capabilities, so you don't need to add a separate sequential thinking server.</p> <p>Save your JSON file and restart Claude Desktop.</p>"},{"location":"tutorials/claude-desktop/#using-biomcp-with-claude","title":"Using BioMCP with Claude","text":"<p>Upload loading, we recommend accessing the BioMCP \"custom instructions\" by clicking the \"connector\" icon below the chat that says \"Attach from MCP\".</p> <p>In that dialog, select the biomcp instructions as an \"integration\" and the MCP resource will be added as text.</p> <p>You should see at least 10 tools that can be accessed with BioMCP, including the built-in sequential thinking tool.</p>"},{"location":"tutorials/claude-desktop/#optional-parameters-for-better-results","title":"Optional Parameters for Better Results","text":"<p>The <code>search</code> and <code>fetch</code> tools include optional parameters:</p> <p>For search and fetch tools:</p> <ul> <li><code>call_benefit</code>: Helps the AI think about why it's making the call, improving accuracy and providing context for analytics</li> </ul> <p>For fetch tool:</p> <ul> <li><code>domain</code>: Usually not needed as BioMCP automatically detects the domain from the ID format:</li> <li>NCT12345 \u2192 trial</li> <li>12345678 \u2192 article (PMID)</li> <li>10.1038/nature12345 \u2192 article (DOI)</li> <li>rs12345 \u2192 variant</li> </ul> <p>When using these tools, the AI will automatically provide this context when it understands the benefit.</p>"},{"location":"tutorials/claude-desktop/#example-queries","title":"Example Queries","text":"<p>Below are some example questions to try based on your use cases/research.</p>"},{"location":"tutorials/claude-desktop/#clinical-trials-queries","title":"Clinical Trials Queries","text":"<p>Try questions like:</p> <ul> <li>\"Find Phase 3 clinical trials for lung cancer with immunotherapy\"</li> <li>\"Are there any recruiting breast cancer trials near Boston?\"</li> <li>\"What are the eligibility criteria for trial NCT04280705?\"</li> </ul>"},{"location":"tutorials/claude-desktop/#pubmed-articles-queries","title":"PubMed Articles Queries","text":"<p>Try questions like:</p> <ul> <li>\"Summarize recent research on EGFR mutations in lung cancer\"</li> <li>\"Find articles about the relationship between BRAF mutations and melanoma\"</li> <li>\"Get the abstract of PubMed article 21717063\"</li> </ul>"},{"location":"tutorials/claude-desktop/#genetic-variants-queries","title":"Genetic Variants Queries","text":"<p>Try questions like:</p> <ul> <li>\"What's the clinical significance of the BRAF V600E mutation?\"</li> <li>\"Find pathogenic variants in the TP53 gene\"</li> <li>\"Explain the difference between Class I and Class III BRAF mutations\"</li> </ul>"},{"location":"tutorials/claude-desktop/#combination-queries","title":"Combination Queries","text":"<p>Claude can combine multiple BioMCP tools in a single query:</p> <ul> <li>\"I'm researching KRAS G12C mutations in lung cancer. Can you find:\"</li> <li>The key characteristics of this mutation</li> <li>Recent clinical trials targeting it</li> <li>Significant research papers from the last 2 years</li> </ul> <p>Claude can help with complex biomedical research workflows:</p> <ul> <li>I'm studying treatment resistance in ALK-positive lung cancer. Help me:</li> <li>Identify the main ALK fusion variants</li> <li>Find current clinical trials testing next-generation ALK inhibitors</li> <li>Summarize recent literature on resistance mechanisms</li> </ul>"},{"location":"tutorials/claude-desktop/#sequential-thinking-queries","title":"Sequential Thinking Queries","text":"<p>BioMCP includes built-in sequential thinking capabilities for complex problem-solving:</p> <ul> <li>\"Please classify the variant chr19:10602767:C:A, KEAP1 c.811G&gt;T p.V271L, as oncogenic, likely-oncogenic, uncertain significance, likely benign, or benign. Use sequential thinking to work through your analysis.\"</li> <li>\"I need to design a clinical trial for BRAF-mutated melanoma. Use sequential thinking to outline the key considerations and steps.\"</li> <li>\"Help me understand the relationship between TP53 mutations and cancer prognosis. Use sequential thinking to analyze this systematically.\"</li> </ul> <p>The sequential thinking tool helps Claude break down complex biomedical problems into manageable steps, revise thinking based on new insights, and explore alternative reasoning paths.</p>"},{"location":"tutorials/claude-desktop/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/claude-desktop/#common-issues","title":"Common Issues","text":"<ul> <li>\"SPAWN ENOENT\" Error:</li> <li>Make sure <code>uv</code> is in your PATH</li> <li>Try using the full path to <code>uv</code> in the configuration</li> <li>Claude doesn't use BioMCP</li> <li>Verify you've correctly configured the MCP server</li> <li>Check if your query is specific enough to trigger BioMCP usage</li> <li>Ask Claude directly to search trials, variants, or articles using BioMCP</li> <li>No results returned</li> <li>Your query may be too specific or use terms not in the databases</li> <li>Try reformulating with more standard medical terminology</li> </ul>"},{"location":"tutorials/claude-desktop/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>Claude Desktop Documentation</li> <li>Model Context Protocol (MCP) Guide</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/","title":"Deploying BioMCP as a Cloudflare Worker","text":"<p>This guide explains how to deploy BioMCP as a Cloudflare Worker using Server-Sent Events (SSE) for communication.</p>"},{"location":"tutorials/cloudflare-worker-deployment/#overview","title":"Overview","text":"<p>BioMCP now supports two deployment modes:</p> <ol> <li>Local STDIO Mode: The traditional mode where the server communicates via standard input/output.</li> <li>Cloudflare Worker Mode: Deployment as a Cloudflare Worker using SSE for communication.</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Cloudflare account with Workers enabled</li> <li>Wrangler CLI installed</li> <li>For local development of the Worker mode: <code>pip install biomcp-python[worker]</code></li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#architecture","title":"Architecture","text":"<p>When deployed as a Cloudflare Worker, BioMCP works as follows:</p> <ol> <li>The Cloudflare Worker receives HTTP requests from clients</li> <li>The Worker forwards these requests to your remote MCP server</li> <li>The remote MCP server processes the requests and returns responses</li> <li>The Worker streams these responses back to clients using SSE</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#architecture-diagram","title":"Architecture Diagram","text":"<p>Below is an improved diagram of the setup:</p> <pre><code>+-----------------------+\n|  Claude Desktop (or   |\n|    other client)      |\n+----------+------------+\n           |\n           v\n+----------+------------+\n|   Cloudflare Worker   |\n+----------+------------+\n           |\n           v\n+-------------------------------+\n|   FastMCP Python Service      |\n|   (Docker, hosted server)     |\n+-------------------------------+\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#setup","title":"Setup","text":""},{"location":"tutorials/cloudflare-worker-deployment/#1-configure-your-remote-mcp-server","title":"1. Configure Your Remote MCP Server","text":"<p>First, you need to set up a remote MCP server that will handle the actual processing:</p>"},{"location":"tutorials/cloudflare-worker-deployment/#using-docker-compose","title":"Using Docker Compose","text":"<p>A Docker Compose file is now provided for building and deploying the remote FastMCP Python service. You must set the <code>TAG</code> variable to specify the image version:</p> <pre><code>TAG=latest docker compose up -d\n</code></pre> <ul> <li>The service will be accessible on the configured port (default: 8000).</li> <li>Ensure your server is reachable from Cloudflare Workers.</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#manual-installation","title":"Manual Installation","text":"<pre><code># Install with worker dependencies\npip install biomcp-python[worker]\n\n# Run the server in worker mode\nbiomcp run --mode worker --host 0.0.0.0 --port 8000\n</code></pre> <p>Make sure this server is accessible from the internet, or at least from Cloudflare Workers.</p>"},{"location":"tutorials/cloudflare-worker-deployment/#2-configure-cloudflare-worker","title":"2. Configure Cloudflare Worker","text":"<p>Edit the <code>wrangler.toml</code> file to point to your remote MCP server:</p> <pre><code>[vars]\nREMOTE_MCP_SERVER_URL = \"https://your-remote-mcp-server.com/mcp\"\n# Add an API key if your server requires authentication\nMCP_SERVER_API_KEY = \"your-api-key\"\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#3-deploy-the-worker","title":"3. Deploy the Worker","text":"<p>Use Wrangler to deploy your Worker:</p> <pre><code># Login to Cloudflare\nnpx wrangler@latest login\n\n# Deploy the worker\nnpx wrangler@latest deploy\n\n# Tail logs for debugging\nnpx wrangler@latest tail\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#benefits-of-remote-mcp","title":"Benefits of Remote MCP","text":"<ul> <li>Scalability: Offloads heavy computation to a dedicated server, reducing load on the Worker and improving performance.</li> <li>Security: The Worker acts as a secure proxy, hiding your backend and enabling API key protection.</li> <li>Flexibility: You can update or scale the Python service independently of the Worker.</li> <li>Debugging: Use <code>npx wrangler tail</code> for real-time logs and easier troubleshooting.</li> <li>Modern Deployment: Docker Compose simplifies environment setup and reproducibility.</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#usage","title":"Usage","text":"<p>Once deployed, your Cloudflare Worker will be available at a URL like: <code>https://biomcp-worker.&lt;your-worker-subdomain&gt;.workers.dev</code></p> <p>Clients can connect to this endpoint using SSE:</p> <pre><code>// Example client-side JavaScript\nconst eventSource = new EventSource(\n  \"https://biomcp-worker.&lt;your-worker-subdomain&gt;.workers.dev\",\n);\n\neventSource.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log(\"Received:\", data);\n\n  // Check for the end of the stream\n  if (event.data === \"[DONE]\") {\n    eventSource.close();\n  }\n};\n\neventSource.onerror = (error) =&gt; {\n  console.error(\"EventSource error:\", error);\n  eventSource.close();\n};\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#local-development","title":"Local Development","text":"<p>For local development and testing, you can run the worker mode locally:</p> <pre><code># Run the server in worker mode on localhost\nbiomcp run --mode worker --host 127.0.0.1 --port 8000\n</code></pre> <p>Then use Wrangler to develop locally:</p> <pre><code>npx wrangler@latest dev\n</code></pre>"},{"location":"tutorials/cloudflare-worker-deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/cloudflare-worker-deployment/#worker-connection-issues","title":"Worker Connection Issues","text":"<p>If the Worker cannot connect to your remote MCP server:</p> <ol> <li>Ensure your remote server is publicly accessible</li> <li>Check that the <code>REMOTE_MCP_SERVER_URL</code> is correctly set</li> <li>Verify any authentication requirements</li> </ol>"},{"location":"tutorials/cloudflare-worker-deployment/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cloudflare Workers have execution time limits (typically 30 seconds for free accounts)</li> <li>Consider implementing timeouts and chunking for large responses</li> <li>Monitor your Worker's performance in the Cloudflare dashboard</li> </ul>"},{"location":"tutorials/cloudflare-worker-deployment/#security-considerations","title":"Security Considerations","text":"<ul> <li>Always use HTTPS for communication between the Worker and your remote MCP server</li> <li>Consider implementing authentication for your remote MCP server</li> <li>Do not expose sensitive information in your Worker code</li> </ul>"},{"location":"tutorials/cursor-ide/","title":"BioMCP with Cursor IDE: Step-by-Step Tutorial","text":"<p>This tutorial will guide you through setting up BioMCP within the Cursor IDE, allowing you to access specialized biomedical data directly from your development environment.</p>"},{"location":"tutorials/cursor-ide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Cursor IDE: Download and install from the official website</li> <li>A Smithery account with an active token</li> </ul>"},{"location":"tutorials/cursor-ide/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Download and install Cursor IDE from https://www.cursor.com/en</p> </li> <li> <p>Open Cursor IDE and access the terminal (you can use the keyboard shortcut <code>Ctrl+`</code> or go to Terminal &gt; New Terminal)</p> </li> <li> <p>In the Cursor terminal, run the following command:</p> </li> </ol> <pre><code>npx -y @smithery/cli@latest install @genomoncology/biomcp --client cursor\n</code></pre> <ol> <li> <p>You will be prompted to enter your Smithery token, which can be retrieved from your Smithery account</p> </li> <li> <p>Once the installation completes successfully, BioMCP is ready to use within Cursor IDE</p> </li> </ol>"},{"location":"tutorials/cursor-ide/#using-biomcp-with-cursor","title":"Using BioMCP with Cursor","text":"<p>You can now use BioMCP by asking questions directly in the Cursor IDE. For example, try asking:</p> <ul> <li>\"What are the locations for NCT04280705?\"</li> </ul> <p>The response will include detailed information about the clinical trial locations:</p> <p></p>"},{"location":"tutorials/cursor-ide/#example-queries","title":"Example Queries","text":""},{"location":"tutorials/cursor-ide/#clinical-trials-queries","title":"Clinical Trials Queries","text":"<p>Try questions like:</p> <ul> <li>\"Find Phase 3 clinical trials for lung cancer with immunotherapy\"</li> <li>\"Are there any recruiting breast cancer trials near Boston?\"</li> <li>\"What are the eligibility criteria for trial NCT04280705?\"</li> </ul>"},{"location":"tutorials/cursor-ide/#pubmed-articles-queries","title":"PubMed Articles Queries","text":"<p>Try questions like:</p> <ul> <li>\"Summarize recent research on EGFR mutations in lung cancer\"</li> <li>\"Find articles about the relationship between BRAF mutations and melanoma\"</li> <li>\"Get the abstract of PubMed article 21717063\"</li> </ul>"},{"location":"tutorials/cursor-ide/#genetic-variants-queries","title":"Genetic Variants Queries","text":"<p>Try questions like:</p> <ul> <li>\"What's the clinical significance of the BRAF V600E mutation?\"</li> <li>\"Find pathogenic variants in the TP53 gene\"</li> <li>\"Explain the difference between Class I and Class III BRAF mutations\"</li> </ul>"},{"location":"tutorials/cursor-ide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/cursor-ide/#common-issues","title":"Common Issues","text":"<ul> <li> <p>Installation fails:</p> </li> <li> <p>Make sure you have the correct Smithery token</p> </li> <li>Check your internet connection</li> <li> <p>Verify you have the necessary permissions to install packages</p> </li> <li> <p>No results returned:</p> </li> <li>Your query may be too specific or use terms not in the databases</li> <li>Try reformulating with more standard medical terminology</li> </ul>"},{"location":"tutorials/cursor-ide/#resources","title":"Resources","text":"<ul> <li>BioMCP Documentation</li> <li>Cursor IDE Documentation</li> <li>Smithery Documentation</li> </ul>"},{"location":"tutorials/docker-alphagenome/","title":"Using AlphaGenome with Docker","text":"<p>This guide explains how to use AlphaGenome with BioMCP in Docker containers.</p>"},{"location":"tutorials/docker-alphagenome/#docker-setup","title":"Docker Setup","text":"<p>The BioMCP Docker image now includes AlphaGenome pre-installed. Here's how to use it:</p>"},{"location":"tutorials/docker-alphagenome/#1-build-the-docker-image","title":"1. Build the Docker Image","text":"<pre><code>docker build -t biomcp-alphagenome .\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#2-run-with-docker-compose","title":"2. Run with Docker Compose","text":"<p>Create or update your <code>docker-compose.yml</code>:</p> <pre><code>services:\n  biomcp-server:\n    build: .\n    image: biomcp-alphagenome:latest\n    container_name: biomcp-server\n    ports:\n      - \"8000:8000\"\n    environment:\n      - MCP_MODE=worker # Can be 'stdio' or 'worker'\n      - ALPHAGENOME_API_KEY=${ALPHAGENOME_API_KEY}\n    restart: unless-stopped\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#3-set-your-api-key","title":"3. Set Your API Key","text":"<p>Create a <code>.env</code> file in the same directory as your <code>docker-compose.yml</code>:</p> <pre><code>ALPHAGENOME_API_KEY=your-api-key-here\n</code></pre> <p>Or set it in your shell:</p> <pre><code>export ALPHAGENOME_API_KEY='your-api-key-here'\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#4-start-the-container","title":"4. Start the Container","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#usage-in-container","title":"Usage in Container","text":""},{"location":"tutorials/docker-alphagenome/#via-docker-exec","title":"Via Docker Exec","text":"<p>You can run AlphaGenome predictions directly in the container:</p> <pre><code># Basic prediction\ndocker exec biomcp-server biomcp variant predict chr7 140753336 A T\n\n# With tissue specificity\ndocker exec biomcp-server biomcp variant predict chr7 140753336 A T --tissue UBERON:0000310\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#via-mcp-worker-mode","title":"Via MCP Worker Mode","text":"<p>When running in worker mode, the container exposes port 8000 for MCP connections. Configure your MCP client to connect to:</p> <pre><code>http://localhost:8000\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#dockerfile-details","title":"Dockerfile Details","text":"<p>The Dockerfile includes these AlphaGenome-specific changes:</p> <ol> <li>Git Installation: Required to clone AlphaGenome repository</li> </ol> <pre><code>RUN apt-get update &amp;&amp; apt-get install -y git\n</code></pre> <ol> <li>AlphaGenome Installation: Cloned and installed during build</li> </ol> <pre><code>RUN git clone https://github.com/google-deepmind/alphagenome.git /tmp/alphagenome &amp;&amp; \\\n    pip install /tmp/alphagenome &amp;&amp; \\\n    rm -rf /tmp/alphagenome\n</code></pre> <ol> <li>Environment Variable: API key passed through docker-compose    <pre><code>environment:\n  - ALPHAGENOME_API_KEY=${ALPHAGENOME_API_KEY}\n</code></pre></li> </ol>"},{"location":"tutorials/docker-alphagenome/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tutorials/docker-alphagenome/#container-cant-find-api-key","title":"Container Can't Find API Key","text":"<p>Check that the environment variable is set:</p> <pre><code>docker exec biomcp-server env | grep ALPHAGENOME\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#alphagenome-import-errors","title":"AlphaGenome Import Errors","text":"<p>Verify AlphaGenome is installed in the container:</p> <pre><code>docker exec biomcp-server pip list | grep alphagenome\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#rebuilding-after-changes","title":"Rebuilding After Changes","text":"<p>If you update the Dockerfile or dependencies:</p> <pre><code>docker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#security-considerations","title":"Security Considerations","text":"<ol> <li>API Key Security: Never commit your API key to version control</li> <li>Use .env Files: Keep API keys in <code>.env</code> files (add to <code>.gitignore</code>)</li> <li>Network Security: In production, use proper network isolation</li> <li>Volume Mounts: Be careful with volume mounts that might expose sensitive data</li> </ol>"},{"location":"tutorials/docker-alphagenome/#example-docker-run-command","title":"Example Docker Run Command","text":"<p>For standalone container without docker-compose:</p> <pre><code>docker run -d \\\n  --name biomcp-alphagenome \\\n  -p 8000:8000 \\\n  -e MCP_MODE=worker \\\n  -e ALPHAGENOME_API_KEY=\"$ALPHAGENOME_API_KEY\" \\\n  biomcp-alphagenome:latest\n</code></pre>"},{"location":"tutorials/docker-alphagenome/#performance-notes","title":"Performance Notes","text":"<ul> <li>AlphaGenome predictions require network calls to Google's API</li> <li>Container startup is slightly slower due to AlphaGenome installation</li> <li>Consider using volume mounts for caching if making many predictions</li> <li>The 1Mb genomic window option uses more memory and takes longer</li> </ul>"},{"location":"tutorials/docker-alphagenome/#next-steps","title":"Next Steps","text":"<ul> <li>See AlphaGenome Setup Guide for general setup</li> <li>See AlphaGenome Prompt Examples for usage patterns</li> <li>Check the main Dockerfile for implementation details</li> </ul>"},{"location":"tutorials/macos-claude-desktop-dockerized-biomcp/","title":"Containerized BioMCP with Claude Desktop for Mac: Step-by-Step Tutorial","text":"<p>This tutorial will guide you through setting up BioMCP as a Model Context Protocol (MCP) server for Claude Desktop for Mac, while having biomcp fully dockerized.</p>"},{"location":"tutorials/macos-claude-desktop-dockerized-biomcp/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop: Download from Anthropic, or if you have brew, simply <code>brew install --cask claude</code></li> <li>Docker: Download from Docker.com or, again if you have brew, simply <code>brew install --cask docker</code></li> </ul>"},{"location":"tutorials/macos-claude-desktop-dockerized-biomcp/#steps","title":"Steps","text":"<p>Create a file called <code>Dockerfile</code> in a directory of your choice with this content</p> <pre><code>FROM python:3.13-slim AS production\nRUN apt-get update &amp;&amp; rm -rf /var/lib/apt/lists/*\nWORKDIR /app\nRUN pip install biomcp-python\nEXPOSE 8000\nCMD [\"biomcp\",\"run\"]\n</code></pre> <p>then in the same directory run the command <code>docker build -t biomcp .</code></p> <p>Finally, enter the directory of Claude Desktop configs <code>cd \"$HOME/Library/Application Support/Claude/\"</code></p> <p>and edit the file <code>claude_desktop_config.json</code> adding the biomcp server</p> <pre><code>{\n  \"mcpServers\": {\n    \"biomcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"biomcp:latest\"],\n      \"env\": {}\n    }\n  }\n}\n</code></pre> <p>That's it; you should now have biomcp, fully containerized, available in your Macos Claude Desktop Application</p>"},{"location":"tutorials/mcp-client/","title":"BioMCP with MCP Client Tutorial","text":""},{"location":"tutorials/mcp-client/#overview","title":"Overview","text":"<p>This tutorial explains how to integrate BioMCP with MCP clients programmatically. The Model Context Protocol (MCP) enables applications to interact with BioMCP as a specialized tool server, providing structured access to biomedical data sources.</p>"},{"location":"tutorials/mcp-client/#key-features","title":"Key Features","text":"<ul> <li>STDIO Communication: BioMCP uses standard input/output for MCP communication</li> <li>Tool Discovery: Clients can discover available tools through the MCP interface</li> <li>Resource Access: Provides access to BioMCP resources and instructions</li> <li>Standard Protocol: Follows the MCP 1.0 specification for compatibility with clients</li> </ul>"},{"location":"tutorials/mcp-client/#main-components","title":"Main Components","text":"<p>The MCP integration relies on these key components:</p> <ol> <li> <p>MCP Client</p> </li> <li> <p>Python client from the <code>mcp</code> package</p> </li> <li> <p>Handles communication with the BioMCP server</p> </li> <li> <p>BioMCP Server</p> </li> <li> <p>Started as a subprocess with the <code>biomcp run</code> command</p> </li> <li> <p>Exposes biomedical data tools through the MCP interface</p> </li> <li> <p>Tool Invocation</p> </li> <li>Execute biomedical queries using standardized tool calls</li> <li>Process structured responses for application integration</li> </ol>"},{"location":"tutorials/mcp-client/#basic-usage-pattern","title":"Basic Usage Pattern","text":"<p>Integrating with BioMCP through MCP follows this pattern:</p> <ol> <li>Start the BioMCP server as a subprocess</li> <li>Create an MCP client session to communicate with the server</li> <li>Discover available tools and resources</li> <li>Call tools with appropriate parameters</li> <li>Process the returned content</li> </ol>"},{"location":"tutorials/mcp-client/#example-code","title":"Example Code","text":"<p>Here's a minimal example showing how to connect to BioMCP using the Python MCP client:</p> <pre><code>import asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\nasync def connect_to_biomcp():\n    # Configure the BioMCP server\n    server_params = StdioServerParameters(\n        command=\"uv\",\n        args=[\"run\", \"--with\", \"biomcp-python\", \"biomcp\", \"run\"]\n    )\n\n    # Connect to the server\n    async with (\n        stdio_client(server_params) as (read, write),\n        ClientSession(read, write) as session\n    ):\n        # Initialize the session\n        await session.initialize()\n\n        # List available tools\n        tool_result = await session.list_tools()\n        print(f\"Available tools: {[t.name for t in tool_result.tools]}\")\n\n        # IMPORTANT: Always use think tool first!\n        think_result = await session.call_tool(\n            \"think\",\n            {\n                \"thought\": \"Planning to analyze variant rs113488022...\",\n                \"thoughtNumber\": 1,\n                \"totalThoughts\": 2,\n                \"nextThoughtNeeded\": True\n            }\n        )\n\n        # Now call a search/fetch tool (fetch variant details)\n        result = await session.call_tool(\n            \"fetch\",\n            {\"domain\": \"variant\", \"id_\": \"rs113488022\"}\n        )\n\n        if not result.isError and result.content:\n            # Access the text content from the first content block\n            content = result.content[0].text\n            print(f\"Result snippet: {content[:100]}...\")\n\n# Run the example\nif __name__ == \"__main__\":\n    asyncio.run(connect_to_biomcp())\n</code></pre> <p>For a complete example of integrating BioMCP with an MCP client, see:</p> <p>BioMCP MCP Integration Example Script</p>"},{"location":"tutorials/mcp-client/#available-tools","title":"Available Tools","text":"<p>BioMCP exposes 13 tools through the MCP interface:</p>"},{"location":"tutorials/mcp-client/#core-tools-3","title":"Core Tools (3)","text":"<ol> <li> <p>Think Tool (CRITICAL - USE FIRST!)</p> </li> <li> <p><code>think</code>: Sequential thinking for systematic analysis (MUST be used before searches)</p> </li> <li> <p>Unified Tools</p> </li> <li><code>search</code>: Unified search across all biomedical data sources</li> <li><code>fetch</code>: Retrieve detailed information for any domain</li> </ol>"},{"location":"tutorials/mcp-client/#individual-tools-10","title":"Individual Tools (10)","text":"<ol> <li> <p>Article Tools</p> </li> <li> <p><code>article_searcher</code>: Search biomedical literature with cBioPortal integration</p> </li> <li> <p><code>article_getter</code>: Get details for a specific article</p> </li> <li> <p>Trial Tools</p> </li> <li> <p><code>trial_searcher</code>: Search clinical trials</p> </li> <li><code>trial_getter</code>: Get all trial details</li> <li><code>trial_protocol_getter</code>: Get trial protocol details</li> <li><code>trial_references_getter</code>: Get trial references</li> <li><code>trial_outcomes_getter</code>: Get trial outcome data</li> <li> <p><code>trial_locations_getter</code>: Get trial location information</p> </li> <li> <p>Variant Tools</p> </li> <li><code>variant_searcher</code>: Search genetic variants with cBioPortal integration</li> <li><code>variant_getter</code>: Get detailed variant information</li> </ol>"},{"location":"tutorials/mcp-client/#integration-options","title":"Integration Options","text":"<p>There are several ways to integrate BioMCP with MCP clients:</p> <ol> <li>Direct Python Integration: Use the example above in Python applications</li> <li>Language-Specific Clients: Implement MCP clients in other languages (JavaScript, etc.)</li> <li>AI Assistant Integration: Configure LLM platforms to use BioMCP as a tool provider</li> </ol>"},{"location":"tutorials/mcp-client/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues when integrating BioMCP:</p> <ul> <li>Server Not Found: Ensure BioMCP is installed and the command path is correct</li> <li>Connection Errors: Check subprocess management and STDIO handling</li> <li>Tool Errors: Verify tool names and parameter formats match BioMCP's expectations</li> </ul>"},{"location":"tutorials/mcp-client/#next-steps","title":"Next Steps","text":"<p>For more information on MCP integration with BioMCP:</p> <ul> <li>Explore the MCP Client Library</li> <li>Review the MCP Specification</li> <li>Try the MCP Inspector for interactive debugging</li> </ul>"},{"location":"tutorials/mcp-inspector/","title":"Testing BioMCP with MCP Inspector: Step-by-Step Tutorial","text":"<p>This tutorial guides you through using the MCP Inspector to test and debug BioMCP integration. The MCP Inspector provides a user-friendly interface to interact with BioMCP directly, without needing to integrate with an AI assistant first.</p>"},{"location":"tutorials/mcp-inspector/#what-is-the-mcp-inspector","title":"What is the MCP Inspector?","text":"<p>The MCP Inspector is a tool developed by Anthropic that allows you to:</p> <ul> <li>Test MCP servers like BioMCP directly</li> <li>Browse available tools and their parameters</li> <li>Send test requests and view responses</li> <li>Debug MCP server integrations</li> </ul>"},{"location":"tutorials/mcp-inspector/#step-1-start-mcp-inspector","title":"Step 1: Start MCP Inspector","text":"<p>To run biomcp inside the MCP inspector, use the following command:</p> <pre><code>npx @modelcontextprotocol/inspector uv run --with biomcp-python biomcp run\n</code></pre> <p>This will launch the inspector interface (usually at http://127.0.0.1:6274).</p>"},{"location":"tutorials/mcp-inspector/#step-2-connect","title":"Step 2: Connect","text":"<p>Press the \"Connect\" button to establish a connection to the MCP server.</p>"},{"location":"tutorials/mcp-inspector/#step-3-list-tools","title":"Step 3: List Tools","text":"<p>The Inspector should display the available BioMCP tools:</p> <ul> <li><code>article_searcher</code></li> <li><code>article_details</code></li> <li><code>trial_searcher</code></li> <li><code>trial_protocol</code></li> <li><code>trial_locations</code></li> <li><code>trial_outcomes</code></li> <li><code>trial_references</code></li> <li><code>variant_searcher</code></li> <li><code>variant_details</code></li> <li><code>sequential_thinking</code></li> </ul> <p>Click on any tool to see its description and input parameters.</p>"},{"location":"tutorials/mcp-inspector/#step-4-test-biomcp-tools","title":"Step 4: Test BioMCP Tools","text":"<p>Let's test each BioMCP tool with example inputs. For each test:</p> <ol> <li>Select the tool from the list</li> <li>Copy and paste the corresponding JSON input</li> <li>Click \"Call Tool\" to send the request</li> <li>Review the response in the Output section</li> </ol>"},{"location":"tutorials/mcp-inspector/#tool-1-article_searcher","title":"Tool 1: article_searcher","text":"<p>Input:</p> <pre><code>{\n  \"genes\": [\"EGFR\"],\n  \"diseases\": [\"NSCLC\"],\n  \"variants\": [\"BRAF V600E\"],\n  \"keywords\": [\"MEK Inhibitors\"],\n  \"chemicals\": [\"Afatinib\"]\n}\n</code></pre> <p>Example Output:</p> <pre><code># Record 1\n\nPmid: 33402199\nPmcid: PMC7786519\nTitle: MEK inhibitors for the treatment of non-small cell lung cancer\nJournal: J Hematol Oncol\nDate: 2021-01-05T00:00:00Z\nDoi: 10.1186/s13045-020-01025-7\nAbstract:\nBRAF and KRAS are two key oncogenes in the RAS/RAF/MEK/MAPK signaling\npathway. Concomitant mutations in both KRAS and BRAF genes have been\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-2-article_details","title":"Tool 2: article_details","text":"<p>Input:</p> <pre><code>21717063\n</code></pre> <p>Example Output:</p> <p>Same as <code>article_search</code> first record but with Full Text after the abstract:</p> <pre><code>Full Text:\nIntroduction\nLung cancer is the most common cause of cancer-related death worldwide,...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-3-trial_searcher","title":"Tool 3: trial_searcher","text":"<p>Input:</p> <pre><code>{\n  \"conditions\": [\"Lung Cancer\"],\n  \"interventions\": [\"Pembrolizumab\"],\n  \"recruiting_status\": \"OPEN\",\n  \"phase\": \"PHASE3\"\n}\n</code></pre> <p>Example Output:</p> <pre><code># Record 1\n\nNct Number: NCT06847334\nStudy Title:\nA Study to Compare the Efficacy, Safety, Immunogenicity, and\nPharmacokinetic Profile of HLX17 Vs. Keytruda\u00ae in the First-Line\nTreatment of Advanced Non-squamous Non-small Cell Lung Cancer\nStudy Url: https://clinicaltrials.gov/study/NCT06847334\nStudy Status: NOT_YET_RECRUITING\nBrief Summary:\nThis is a multicentre, randomized, double-blind, parallel-controlled\nintegrated phase I/III clinical study to evaluate the similarity in\nefficacy, safety, PK profile, and immunogenicity of HLX17 vs. Keytruda\u00ae(\nUS- and EU-sourced) in the first-line treatment of advanced non-squamous\n...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-4-trial_protocol","title":"Tool 4: trial_protocol","text":""},{"location":"tutorials/mcp-inspector/#tool-5-trial_locations","title":"Tool 5: trial_locations","text":""},{"location":"tutorials/mcp-inspector/#tool-6-trial_outcomes","title":"Tool 6: trial_outcomes","text":""},{"location":"tutorials/mcp-inspector/#tool-7-trial_references","title":"Tool 7: trial_references","text":"<p>All trial \"detail\" tools work the same way by specifying the NCT ID.</p> <p>Input:</p> <pre><code>NCT04280705\n</code></pre> <p>Example Output:</p> <pre><code>Url: https://clinicaltrials.gov/study/NCT04280705\n\n# Protocol Section\n\n## Identification Module\n\nNct Id: NCT04280705\nBrief Title: Adaptive COVID-19 Treatment Trial (ACTT)\nOfficial Title:\nA Multicenter, Adaptive, Randomized Blinded Controlled Trial of the\nSafety and Efficacy of Investigational Therapeutics for the Treatment of\nCOVID-19 in Hospitalized Adults\n...\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-8-variant_searcher","title":"Tool 8: variant_searcher","text":"<p>Input:</p> <pre><code>{\n  \"gene\": \"BRAF\",\n  \"hgvsp\": \"p.V600E\",\n  \"size\": 5\n}\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-9-variant_details","title":"Tool 9: variant_details","text":"<p>Input:</p> <pre><code>rs113488022\n</code></pre> <p>or</p> <pre><code>chr7:g.140453136A&gt;T\n</code></pre>"},{"location":"tutorials/mcp-inspector/#tool-10-sequential_thinking","title":"Tool 10: sequential_thinking","text":"<p>Input:</p> <pre><code>{\n  \"thought\": \"First, I need to understand the clinical context of this BRAF V600E mutation\",\n  \"nextThoughtNeeded\": true,\n  \"thoughtNumber\": 1,\n  \"totalThoughts\": 3,\n  \"isRevision\": false\n}\n</code></pre> <p>Example Output:</p> <pre><code>Added thought 1 to main sequence. Progress: 1/3 thoughts. Next thought needed.\n</code></pre>"},{"location":"tutorials/mcp-inspector/#testing-location-based-search","title":"Testing Location-Based Search","text":"<p>Tool: <code>trial_searcher</code> Input:</p> <pre><code>{\n  \"conditions\": [\"Breast Cancer\"],\n  \"recruiting_status\": \"OPEN\",\n  \"lat\": 42.3601,\n  \"long\": -71.0589,\n  \"distance\": 100\n}\n</code></pre>"},{"location":"tutorials/mcp-inspector/#testing-variant-filtering","title":"Testing Variant Filtering","text":"<p>Tool: <code>variant_searcher</code> Input:</p> <pre><code>{\n  \"gene\": \"TP53\",\n  \"significance\": \"pathogenic\",\n  \"max_frequency\": 0.01,\n  \"cadd\": 20,\n  \"size\": 10\n}\n</code></pre>"},{"location":"tutorials/python-sdk/","title":"BioMCP Python SDK Tutorial","text":""},{"location":"tutorials/python-sdk/#overview","title":"Overview","text":"<p>The BioMCP Python SDK allows you to integrate BioMCP's biomedical data access capabilities directly into your Python applications. This tutorial provides a high-level overview of the SDK's capabilities.</p>"},{"location":"tutorials/python-sdk/#key-features","title":"Key Features","text":"<ul> <li>Asynchronous API: All BioMCP functions are async, designed for efficient network operations</li> <li>JSON or Markdown Output: Choose between formatted Markdown for display or JSON for programmatic use</li> <li>Validated Models: Input using Pydantic models for type safety and validation</li> <li>Complete API Coverage: Access all BioMCP capabilities (variants, trials, articles) programmatically</li> </ul>"},{"location":"tutorials/python-sdk/#main-components","title":"Main Components","text":"<p>The SDK is organized into domain-specific modules:</p> <ol> <li> <p>Variants Module</p> </li> <li> <p>Search for genetic variants with <code>search_variants()</code></p> </li> <li> <p>Retrieve detailed variant information with <code>get_variant()</code></p> </li> <li> <p>Trials Module</p> </li> <li> <p>Search for clinical trials with <code>search_trials()</code></p> </li> <li> <p>Get trial details with <code>get_trial()</code></p> </li> <li> <p>Articles Module</p> </li> <li>Search for medical literature with <code>search_articles()</code></li> <li>Retrieve article details with <code>fetch_articles()</code></li> </ol>"},{"location":"tutorials/python-sdk/#basic-usage-pattern","title":"Basic Usage Pattern","text":"<p>All BioMCP SDK functions follow a similar pattern:</p> <ol> <li>Import required modules and models</li> <li>Create a query object (e.g., <code>VariantQuery</code>, <code>TrialQuery</code>)</li> <li>Call the async function with the query</li> <li>Process the results (as Markdown or JSON)</li> </ol>"},{"location":"tutorials/python-sdk/#example-code","title":"Example Code","text":"<p>To use the below code, either use the <code>uv</code> script runner or install the biomcp-python package using pip or uv.</p> <pre><code>pip install biomcp-python\n</code></pre> <p>or uv pip install:</p> <pre><code>uv pip install biomcp-python\n</code></pre> <p>or add the package to your uv project:</p> <pre><code>uv add biomcp-python\n</code></pre> <p>or run the script directly:</p> <pre><code>#!/usr/bin/env -S uv --quiet run --script\n# /// script\n# requires-python = \"&gt;=3.11\"\n# dependencies = [\n#     \"biomcp-python\",\n# ]\n# ///\n\nimport json\n\nfrom biomcp.variants.search import VariantQuery, search_variants\n\nasync def find_pathogenic_tp53():\n    # noinspection PyTypeChecker\n    query = VariantQuery(gene=\"TP53\", significance=\"pathogenic\", size=5)\n    # Get results as Markdown (default)\n    json_output_str = await search_variants(query, output_json=True)\n    data = json.loads(json_output_str)\n    assert len(data) == 5\n    for item in data:\n        clinvar = item.get(\"clinvar\")\n        for rcv in clinvar.get(\"rcv\", []):\n            assert \"pathogenic\" in rcv[\"clinical_significance\"].lower()\n</code></pre> <p>For complete examples of the BioMCP Python SDK in action, see the official example script:</p> <p>BioMCP Python SDK Example Script</p>"},{"location":"tutorials/python-sdk/#next-steps","title":"Next Steps","text":"<p>For more detailed information on the SDK:</p> <ul> <li>Explore the source code at github.com/genomoncology/biomcp</li> <li>Run <code>help()</code> on imported modules and classes for API details</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/","title":"Setting Up Stytch OAuth for BioMCP","text":"<p>This document outlines the steps required to set up Stytch OAuth authentication for the BioMCP application.</p>"},{"location":"tutorials/stytch_oauth_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Stytch account (sign up at Stytch)</li> <li>Access to the BioMCP codebase</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#setting-up-your-stytch-account","title":"Setting Up Your Stytch Account","text":"<ol> <li> <p>Create a Stytch Account</p> </li> <li> <p>Sign up at Stytch</p> </li> <li> <p>Select \"Consumer Authentication\" when prompted during the setup process</p> </li> <li> <p>Configure the Stytch Project</p> </li> <li> <p>In the Stytch dashboard, navigate to \"Frontend SDKs\" and enable the frontend SDK</p> </li> <li>Navigate to \"Connected Apps\" and enable \"Dynamic Client Registration\"</li> <li> <p>This allows MCP clients to register themselves dynamically with Stytch</p> </li> <li> <p>Retrieve Your Credentials</p> </li> <li>Go to \"Project Settings\" in the Stytch dashboard</li> <li>Note down the following credentials:<ul> <li>Project ID</li> <li>Secret (API Key)</li> <li>Public Token</li> </ul> </li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#configuring-biomcp-with-stytch","title":"Configuring BioMCP with Stytch","text":"<ol> <li> <p>Update the Wrangler Configuration</p> </li> <li> <p>Open <code>wrangler.toml</code> in the BioMCP project</p> </li> <li>Update the following variables with your Stytch credentials:      <pre><code>STYTCH_PROJECT_ID = \"your-project-id\"\nSTYTCH_SECRET = \"your-secret-key\"\nSTYTCH_PUBLIC_TOKEN = \"your-public-token\"\n</code></pre></li> <li>For development, use the test environment:      <pre><code>STYTCH_API_URL = \"https://test.stytch.com/v1\"\n</code></pre></li> <li> <p>For production, use:      <pre><code>STYTCH_API_URL = \"https://api.stytch.com/v1\"\n</code></pre></p> </li> <li> <p>Configure the OAuth KV Namespace</p> </li> <li> <p>Create a KV namespace in Cloudflare for storing OAuth tokens and state</p> </li> <li> <p>Update the KV namespace ID in <code>wrangler.toml</code>:      <pre><code>[[kv_namespaces]]\nbinding = \"OAUTH_KV\"\nid = \"your-kv-namespace-id\"\n</code></pre></p> </li> <li> <p>Configure JWT Secret</p> </li> <li>Set a strong JWT secret for token signing:      <pre><code>JWT_SECRET = \"your-secure-jwt-secret\"\n</code></pre></li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#oauth-flow-overview","title":"OAuth Flow Overview","text":"<p>The BioMCP application uses the following OAuth flow:</p> <ol> <li>Discovery: MCP clients fetch OAuth metadata to locate Stytch authorization endpoints</li> <li>Registration: MCP clients dynamically register with Stytch</li> <li>Authorization: Users are redirected to Stytch for authentication and consent</li> <li>Token Exchange: After consent, authorization codes are exchanged for access tokens</li> <li>MCP Connection: MCP clients connect to the BioMCP server using OAuth access tokens</li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#endpoints","title":"Endpoints","text":"<p>The worker implements the following OAuth endpoints:</p> <ul> <li><code>/.well-known/oauth-authorization-server</code>: OAuth server metadata</li> <li><code>/authorize</code>: OAuth authorization endpoint</li> <li><code>/callback</code>: OAuth callback endpoint</li> <li><code>/token</code>: Token exchange endpoint</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#integration-with-bigquery-logging","title":"Integration with BigQuery Logging","text":"<p>BioMCP integrates Stytch OAuth authentication with BigQuery logging to track user interactions and API usage. This integration:</p> <ol> <li>Captures Authentication Events: Logs successful and failed authentication attempts</li> <li>Tracks User Activity: Associates API requests with authenticated users</li> <li>Enables Analytics: Provides insights into how users interact with the system</li> </ol> <p>For detailed information about the BigQuery logging setup and usage, see the BigQuery Logging Documentation.</p>"},{"location":"tutorials/stytch_oauth_setup/#testing","title":"Testing","text":"<p>To test the OAuth implementation:</p> <ol> <li>Deploy the worker to Cloudflare:</li> </ol> <pre><code>wrangler deploy\n</code></pre> <ol> <li>Use the MCP Inspector or another OAuth client to test the flow:</li> <li>Set the OAuth discovery URL to: <code>https://your-worker.workers.dev/.well-known/oauth-authorization-server</code></li> <li>The inspector will guide you through the OAuth flow</li> </ol>"},{"location":"tutorials/stytch_oauth_setup/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>JWT Validation Issues: Ensure the JWKS endpoint is correctly configured and accessible</li> <li>Callback Errors: Check that the redirect URIs are properly registered and match exactly</li> <li>Token Exchange Failures: Verify that the authorization code is valid and not expired</li> </ul>"},{"location":"tutorials/stytch_oauth_setup/#security-considerations","title":"Security Considerations","text":"<ul> <li>Always use HTTPS for all OAuth endpoints</li> <li>Implement proper CORS headers for cross-origin requests</li> <li>Regularly rotate the JWT secret</li> <li>Use the production Stytch API URL for production environments</li> </ul>"}]}